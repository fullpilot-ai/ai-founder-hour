module.exports = {

"[project]/node_modules/next/dist/server/route-modules/app-page/vendored/ssr/react-jsx-dev-runtime.js [app-ssr] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
module.exports = __turbopack_context__.r("[project]/node_modules/next/dist/server/route-modules/app-page/module.compiled.js [app-ssr] (ecmascript)").vendored['react-ssr'].ReactJsxDevRuntime; //# sourceMappingURL=react-jsx-dev-runtime.js.map
}}),
"[project]/node_modules/valibot/dist/index.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
// src/storages/globalConfig/globalConfig.ts
__turbopack_context__.s({
    "BASE64_REGEX": (()=>BASE64_REGEX),
    "BIC_REGEX": (()=>BIC_REGEX),
    "CUID2_REGEX": (()=>CUID2_REGEX),
    "DECIMAL_REGEX": (()=>DECIMAL_REGEX),
    "DIGITS_REGEX": (()=>DIGITS_REGEX),
    "EMAIL_REGEX": (()=>EMAIL_REGEX),
    "EMOJI_REGEX": (()=>EMOJI_REGEX),
    "HEXADECIMAL_REGEX": (()=>HEXADECIMAL_REGEX),
    "HEX_COLOR_REGEX": (()=>HEX_COLOR_REGEX),
    "IMEI_REGEX": (()=>IMEI_REGEX),
    "IPV4_REGEX": (()=>IPV4_REGEX),
    "IPV6_REGEX": (()=>IPV6_REGEX),
    "IP_REGEX": (()=>IP_REGEX),
    "ISO_DATE_REGEX": (()=>ISO_DATE_REGEX),
    "ISO_DATE_TIME_REGEX": (()=>ISO_DATE_TIME_REGEX),
    "ISO_TIMESTAMP_REGEX": (()=>ISO_TIMESTAMP_REGEX),
    "ISO_TIME_REGEX": (()=>ISO_TIME_REGEX),
    "ISO_TIME_SECOND_REGEX": (()=>ISO_TIME_SECOND_REGEX),
    "ISO_WEEK_REGEX": (()=>ISO_WEEK_REGEX),
    "MAC48_REGEX": (()=>MAC48_REGEX),
    "MAC64_REGEX": (()=>MAC64_REGEX),
    "MAC_REGEX": (()=>MAC_REGEX),
    "NANO_ID_REGEX": (()=>NANO_ID_REGEX),
    "OCTAL_REGEX": (()=>OCTAL_REGEX),
    "RFC_EMAIL_REGEX": (()=>RFC_EMAIL_REGEX),
    "SLUG_REGEX": (()=>SLUG_REGEX),
    "ULID_REGEX": (()=>ULID_REGEX),
    "UUID_REGEX": (()=>UUID_REGEX),
    "ValiError": (()=>ValiError),
    "_addIssue": (()=>_addIssue),
    "_getByteCount": (()=>_getByteCount),
    "_getGraphemeCount": (()=>_getGraphemeCount),
    "_getLastMetadata": (()=>_getLastMetadata),
    "_getStandardProps": (()=>_getStandardProps),
    "_getWordCount": (()=>_getWordCount),
    "_isLuhnAlgo": (()=>_isLuhnAlgo),
    "_isValidObjectKey": (()=>_isValidObjectKey),
    "_joinExpects": (()=>_joinExpects),
    "_stringify": (()=>_stringify),
    "any": (()=>any),
    "args": (()=>args),
    "argsAsync": (()=>argsAsync),
    "array": (()=>array),
    "arrayAsync": (()=>arrayAsync),
    "assert": (()=>assert),
    "awaitAsync": (()=>awaitAsync),
    "base64": (()=>base64),
    "bic": (()=>bic),
    "bigint": (()=>bigint),
    "blob": (()=>blob),
    "boolean": (()=>boolean),
    "brand": (()=>brand),
    "bytes": (()=>bytes),
    "check": (()=>check),
    "checkAsync": (()=>checkAsync),
    "checkItems": (()=>checkItems),
    "checkItemsAsync": (()=>checkItemsAsync),
    "config": (()=>config),
    "creditCard": (()=>creditCard),
    "cuid2": (()=>cuid2),
    "custom": (()=>custom),
    "customAsync": (()=>customAsync),
    "date": (()=>date),
    "decimal": (()=>decimal),
    "deleteGlobalConfig": (()=>deleteGlobalConfig),
    "deleteGlobalMessage": (()=>deleteGlobalMessage),
    "deleteSchemaMessage": (()=>deleteSchemaMessage),
    "deleteSpecificMessage": (()=>deleteSpecificMessage),
    "description": (()=>description),
    "digits": (()=>digits),
    "email": (()=>email),
    "emoji": (()=>emoji),
    "empty": (()=>empty),
    "endsWith": (()=>endsWith),
    "entries": (()=>entries),
    "entriesFromList": (()=>entriesFromList),
    "entriesFromObjects": (()=>entriesFromObjects),
    "enum": (()=>enum_),
    "enum_": (()=>enum_),
    "everyItem": (()=>everyItem),
    "exactOptional": (()=>exactOptional),
    "exactOptionalAsync": (()=>exactOptionalAsync),
    "excludes": (()=>excludes),
    "fallback": (()=>fallback),
    "fallbackAsync": (()=>fallbackAsync),
    "file": (()=>file),
    "filterItems": (()=>filterItems),
    "findItem": (()=>findItem),
    "finite": (()=>finite),
    "flatten": (()=>flatten),
    "flavor": (()=>flavor),
    "forward": (()=>forward),
    "forwardAsync": (()=>forwardAsync),
    "function": (()=>function_),
    "function_": (()=>function_),
    "getDefault": (()=>getDefault),
    "getDefaults": (()=>getDefaults),
    "getDefaultsAsync": (()=>getDefaultsAsync),
    "getDescription": (()=>getDescription),
    "getDotPath": (()=>getDotPath),
    "getFallback": (()=>getFallback),
    "getFallbacks": (()=>getFallbacks),
    "getFallbacksAsync": (()=>getFallbacksAsync),
    "getGlobalConfig": (()=>getGlobalConfig),
    "getGlobalMessage": (()=>getGlobalMessage),
    "getMetadata": (()=>getMetadata),
    "getSchemaMessage": (()=>getSchemaMessage),
    "getSpecificMessage": (()=>getSpecificMessage),
    "getTitle": (()=>getTitle),
    "graphemes": (()=>graphemes),
    "gtValue": (()=>gtValue),
    "hash": (()=>hash),
    "hexColor": (()=>hexColor),
    "hexadecimal": (()=>hexadecimal),
    "imei": (()=>imei),
    "includes": (()=>includes),
    "instance": (()=>instance),
    "integer": (()=>integer),
    "intersect": (()=>intersect),
    "intersectAsync": (()=>intersectAsync),
    "ip": (()=>ip),
    "ipv4": (()=>ipv4),
    "ipv6": (()=>ipv6),
    "is": (()=>is),
    "isOfKind": (()=>isOfKind),
    "isOfType": (()=>isOfType),
    "isValiError": (()=>isValiError),
    "isoDate": (()=>isoDate),
    "isoDateTime": (()=>isoDateTime),
    "isoTime": (()=>isoTime),
    "isoTimeSecond": (()=>isoTimeSecond),
    "isoTimestamp": (()=>isoTimestamp),
    "isoWeek": (()=>isoWeek),
    "keyof": (()=>keyof),
    "lazy": (()=>lazy),
    "lazyAsync": (()=>lazyAsync),
    "length": (()=>length),
    "literal": (()=>literal),
    "looseObject": (()=>looseObject),
    "looseObjectAsync": (()=>looseObjectAsync),
    "looseTuple": (()=>looseTuple),
    "looseTupleAsync": (()=>looseTupleAsync),
    "ltValue": (()=>ltValue),
    "mac": (()=>mac),
    "mac48": (()=>mac48),
    "mac64": (()=>mac64),
    "map": (()=>map),
    "mapAsync": (()=>mapAsync),
    "mapItems": (()=>mapItems),
    "maxBytes": (()=>maxBytes),
    "maxEntries": (()=>maxEntries),
    "maxGraphemes": (()=>maxGraphemes),
    "maxLength": (()=>maxLength),
    "maxSize": (()=>maxSize),
    "maxValue": (()=>maxValue),
    "maxWords": (()=>maxWords),
    "message": (()=>message),
    "metadata": (()=>metadata),
    "mimeType": (()=>mimeType),
    "minBytes": (()=>minBytes),
    "minEntries": (()=>minEntries),
    "minGraphemes": (()=>minGraphemes),
    "minLength": (()=>minLength),
    "minSize": (()=>minSize),
    "minValue": (()=>minValue),
    "minWords": (()=>minWords),
    "multipleOf": (()=>multipleOf),
    "nan": (()=>nan),
    "nanoid": (()=>nanoid),
    "never": (()=>never),
    "nonEmpty": (()=>nonEmpty),
    "nonNullable": (()=>nonNullable),
    "nonNullableAsync": (()=>nonNullableAsync),
    "nonNullish": (()=>nonNullish),
    "nonNullishAsync": (()=>nonNullishAsync),
    "nonOptional": (()=>nonOptional),
    "nonOptionalAsync": (()=>nonOptionalAsync),
    "normalize": (()=>normalize),
    "notBytes": (()=>notBytes),
    "notEntries": (()=>notEntries),
    "notGraphemes": (()=>notGraphemes),
    "notLength": (()=>notLength),
    "notSize": (()=>notSize),
    "notValue": (()=>notValue),
    "notValues": (()=>notValues),
    "notWords": (()=>notWords),
    "null": (()=>null_),
    "null_": (()=>null_),
    "nullable": (()=>nullable),
    "nullableAsync": (()=>nullableAsync),
    "nullish": (()=>nullish),
    "nullishAsync": (()=>nullishAsync),
    "number": (()=>number),
    "object": (()=>object),
    "objectAsync": (()=>objectAsync),
    "objectWithRest": (()=>objectWithRest),
    "objectWithRestAsync": (()=>objectWithRestAsync),
    "octal": (()=>octal),
    "omit": (()=>omit),
    "optional": (()=>optional),
    "optionalAsync": (()=>optionalAsync),
    "parse": (()=>parse),
    "parseAsync": (()=>parseAsync),
    "parseJson": (()=>parseJson),
    "parser": (()=>parser),
    "parserAsync": (()=>parserAsync),
    "partial": (()=>partial),
    "partialAsync": (()=>partialAsync),
    "partialCheck": (()=>partialCheck),
    "partialCheckAsync": (()=>partialCheckAsync),
    "pick": (()=>pick),
    "picklist": (()=>picklist),
    "pipe": (()=>pipe),
    "pipeAsync": (()=>pipeAsync),
    "promise": (()=>promise),
    "rawCheck": (()=>rawCheck),
    "rawCheckAsync": (()=>rawCheckAsync),
    "rawTransform": (()=>rawTransform),
    "rawTransformAsync": (()=>rawTransformAsync),
    "readonly": (()=>readonly),
    "record": (()=>record),
    "recordAsync": (()=>recordAsync),
    "reduceItems": (()=>reduceItems),
    "regex": (()=>regex),
    "required": (()=>required),
    "requiredAsync": (()=>requiredAsync),
    "returns": (()=>returns),
    "returnsAsync": (()=>returnsAsync),
    "rfcEmail": (()=>rfcEmail),
    "safeInteger": (()=>safeInteger),
    "safeParse": (()=>safeParse),
    "safeParseAsync": (()=>safeParseAsync),
    "safeParser": (()=>safeParser),
    "safeParserAsync": (()=>safeParserAsync),
    "set": (()=>set),
    "setAsync": (()=>setAsync),
    "setGlobalConfig": (()=>setGlobalConfig),
    "setGlobalMessage": (()=>setGlobalMessage),
    "setSchemaMessage": (()=>setSchemaMessage),
    "setSpecificMessage": (()=>setSpecificMessage),
    "size": (()=>size),
    "slug": (()=>slug),
    "someItem": (()=>someItem),
    "sortItems": (()=>sortItems),
    "startsWith": (()=>startsWith),
    "strictObject": (()=>strictObject),
    "strictObjectAsync": (()=>strictObjectAsync),
    "strictTuple": (()=>strictTuple),
    "strictTupleAsync": (()=>strictTupleAsync),
    "string": (()=>string),
    "stringifyJson": (()=>stringifyJson),
    "summarize": (()=>summarize),
    "symbol": (()=>symbol),
    "title": (()=>title),
    "toLowerCase": (()=>toLowerCase),
    "toMaxValue": (()=>toMaxValue),
    "toMinValue": (()=>toMinValue),
    "toUpperCase": (()=>toUpperCase),
    "transform": (()=>transform),
    "transformAsync": (()=>transformAsync),
    "trim": (()=>trim),
    "trimEnd": (()=>trimEnd),
    "trimStart": (()=>trimStart),
    "tuple": (()=>tuple),
    "tupleAsync": (()=>tupleAsync),
    "tupleWithRest": (()=>tupleWithRest),
    "tupleWithRestAsync": (()=>tupleWithRestAsync),
    "ulid": (()=>ulid),
    "undefined": (()=>undefined_),
    "undefined_": (()=>undefined_),
    "undefinedable": (()=>undefinedable),
    "undefinedableAsync": (()=>undefinedableAsync),
    "union": (()=>union),
    "unionAsync": (()=>unionAsync),
    "unknown": (()=>unknown),
    "unwrap": (()=>unwrap),
    "url": (()=>url),
    "uuid": (()=>uuid),
    "value": (()=>value),
    "values": (()=>values),
    "variant": (()=>variant),
    "variantAsync": (()=>variantAsync),
    "void": (()=>void_),
    "void_": (()=>void_),
    "words": (()=>words)
});
var store;
function setGlobalConfig(config2) {
    store = {
        ...store,
        ...config2
    };
}
// @__NO_SIDE_EFFECTS__
function getGlobalConfig(config2) {
    return {
        lang: config2?.lang ?? store?.lang,
        message: config2?.message,
        abortEarly: config2?.abortEarly ?? store?.abortEarly,
        abortPipeEarly: config2?.abortPipeEarly ?? store?.abortPipeEarly
    };
}
function deleteGlobalConfig() {
    store = void 0;
}
// src/storages/globalMessage/globalMessage.ts
var store2;
function setGlobalMessage(message2, lang) {
    if (!store2) store2 = /* @__PURE__ */ new Map();
    store2.set(lang, message2);
}
// @__NO_SIDE_EFFECTS__
function getGlobalMessage(lang) {
    return store2?.get(lang);
}
function deleteGlobalMessage(lang) {
    store2?.delete(lang);
}
// src/storages/schemaMessage/schemaMessage.ts
var store3;
function setSchemaMessage(message2, lang) {
    if (!store3) store3 = /* @__PURE__ */ new Map();
    store3.set(lang, message2);
}
// @__NO_SIDE_EFFECTS__
function getSchemaMessage(lang) {
    return store3?.get(lang);
}
function deleteSchemaMessage(lang) {
    store3?.delete(lang);
}
// src/storages/specificMessage/specificMessage.ts
var store4;
function setSpecificMessage(reference, message2, lang) {
    if (!store4) store4 = /* @__PURE__ */ new Map();
    if (!store4.get(reference)) store4.set(reference, /* @__PURE__ */ new Map());
    store4.get(reference).set(lang, message2);
}
// @__NO_SIDE_EFFECTS__
function getSpecificMessage(reference, lang) {
    return store4?.get(reference)?.get(lang);
}
function deleteSpecificMessage(reference, lang) {
    store4?.get(reference)?.delete(lang);
}
// src/utils/_stringify/_stringify.ts
// @__NO_SIDE_EFFECTS__
function _stringify(input) {
    const type = typeof input;
    if (type === "string") {
        return `"${input}"`;
    }
    if (type === "number" || type === "bigint" || type === "boolean") {
        return `${input}`;
    }
    if (type === "object" || type === "function") {
        return (input && Object.getPrototypeOf(input)?.constructor?.name) ?? "null";
    }
    return type;
}
// src/utils/_addIssue/_addIssue.ts
function _addIssue(context, label, dataset, config2, other) {
    const input = other && "input" in other ? other.input : dataset.value;
    const expected = other?.expected ?? context.expects ?? null;
    const received = other?.received ?? _stringify(input);
    const issue = {
        kind: context.kind,
        type: context.type,
        input,
        expected,
        received,
        message: `Invalid ${label}: ${expected ? `Expected ${expected} but r` : "R"}eceived ${received}`,
        requirement: context.requirement,
        path: other?.path,
        issues: other?.issues,
        lang: config2.lang,
        abortEarly: config2.abortEarly,
        abortPipeEarly: config2.abortPipeEarly
    };
    const isSchema = context.kind === "schema";
    const message2 = other?.message ?? context.message ?? getSpecificMessage(context.reference, issue.lang) ?? (isSchema ? getSchemaMessage(issue.lang) : null) ?? config2.message ?? getGlobalMessage(issue.lang);
    if (message2 !== void 0) {
        issue.message = typeof message2 === "function" ? // @ts-expect-error
        message2(issue) : message2;
    }
    if (isSchema) {
        dataset.typed = false;
    }
    if (dataset.issues) {
        dataset.issues.push(issue);
    } else {
        dataset.issues = [
            issue
        ];
    }
}
// src/utils/_getByteCount/_getByteCount.ts
var textEncoder;
// @__NO_SIDE_EFFECTS__
function _getByteCount(input) {
    if (!textEncoder) {
        textEncoder = new TextEncoder();
    }
    return textEncoder.encode(input).length;
}
// src/utils/_getGraphemeCount/_getGraphemeCount.ts
var segmenter;
// @__NO_SIDE_EFFECTS__
function _getGraphemeCount(input) {
    if (!segmenter) {
        segmenter = new Intl.Segmenter();
    }
    const segments = segmenter.segment(input);
    let count = 0;
    for (const _ of segments){
        count++;
    }
    return count;
}
// src/utils/_getLastMetadata/_getLastMetadata.ts
// @__NO_SIDE_EFFECTS__
function _getLastMetadata(schema, type) {
    if ("pipe" in schema) {
        const nestedSchemas = [];
        for(let index = schema.pipe.length - 1; index >= 0; index--){
            const item = schema.pipe[index];
            if (item.kind === "schema" && "pipe" in item) {
                nestedSchemas.push(item);
            } else if (item.kind === "metadata" && item.type === type) {
                return item[type];
            }
        }
        for (const nestedSchema of nestedSchemas){
            const result = /* @__PURE__ */ _getLastMetadata(nestedSchema, type);
            if (result !== void 0) {
                return result;
            }
        }
    }
}
// src/utils/_getStandardProps/_getStandardProps.ts
// @__NO_SIDE_EFFECTS__
function _getStandardProps(context) {
    return {
        version: 1,
        vendor: "valibot",
        validate (value2) {
            return context["~run"]({
                value: value2
            }, getGlobalConfig());
        }
    };
}
// src/utils/_getWordCount/_getWordCount.ts
var store5;
// @__NO_SIDE_EFFECTS__
function _getWordCount(locales, input) {
    if (!store5) {
        store5 = /* @__PURE__ */ new Map();
    }
    if (!store5.get(locales)) {
        store5.set(locales, new Intl.Segmenter(locales, {
            granularity: "word"
        }));
    }
    const segments = store5.get(locales).segment(input);
    let count = 0;
    for (const segment of segments){
        if (segment.isWordLike) {
            count++;
        }
    }
    return count;
}
// src/utils/_isLuhnAlgo/_isLuhnAlgo.ts
var NON_DIGIT_REGEX = /\D/gu;
// @__NO_SIDE_EFFECTS__
function _isLuhnAlgo(input) {
    const number2 = input.replace(NON_DIGIT_REGEX, "");
    let length2 = number2.length;
    let bit = 1;
    let sum = 0;
    while(length2){
        const value2 = +number2[--length2];
        bit ^= 1;
        sum += bit ? [
            0,
            2,
            4,
            6,
            8,
            1,
            3,
            5,
            7,
            9
        ][value2] : value2;
    }
    return sum % 10 === 0;
}
// src/utils/_isValidObjectKey/_isValidObjectKey.ts
// @__NO_SIDE_EFFECTS__
function _isValidObjectKey(object2, key) {
    return Object.hasOwn(object2, key) && key !== "__proto__" && key !== "prototype" && key !== "constructor";
}
// src/utils/_joinExpects/_joinExpects.ts
// @__NO_SIDE_EFFECTS__
function _joinExpects(values2, separator) {
    const list = [
        ...new Set(values2)
    ];
    if (list.length > 1) {
        return `(${list.join(` ${separator} `)})`;
    }
    return list[0] ?? "never";
}
// src/utils/entriesFromList/entriesFromList.ts
// @__NO_SIDE_EFFECTS__
function entriesFromList(list, schema) {
    const entries2 = {};
    for (const key of list){
        entries2[key] = schema;
    }
    return entries2;
}
// src/utils/entriesFromObjects/entriesFromObjects.ts
// @__NO_SIDE_EFFECTS__
function entriesFromObjects(schemas) {
    const entries2 = {};
    for (const schema of schemas){
        Object.assign(entries2, schema.entries);
    }
    return entries2;
}
// src/utils/getDotPath/getDotPath.ts
// @__NO_SIDE_EFFECTS__
function getDotPath(issue) {
    if (issue.path) {
        let key = "";
        for (const item of issue.path){
            if (typeof item.key === "string" || typeof item.key === "number") {
                if (key) {
                    key += `.${item.key}`;
                } else {
                    key += item.key;
                }
            } else {
                return null;
            }
        }
        return key;
    }
    return null;
}
// src/utils/isOfKind/isOfKind.ts
// @__NO_SIDE_EFFECTS__
function isOfKind(kind, object2) {
    return object2.kind === kind;
}
// src/utils/isOfType/isOfType.ts
// @__NO_SIDE_EFFECTS__
function isOfType(type, object2) {
    return object2.type === type;
}
// src/utils/isValiError/isValiError.ts
// @__NO_SIDE_EFFECTS__
function isValiError(error) {
    return error instanceof ValiError;
}
// src/utils/ValiError/ValiError.ts
var ValiError = class extends Error {
    /**
   * Creates a Valibot error with useful information.
   *
   * @param issues The error issues.
   */ constructor(issues){
        super(issues[0].message);
        this.name = "ValiError";
        this.issues = issues;
    }
};
// src/actions/args/args.ts
// @__NO_SIDE_EFFECTS__
function args(schema) {
    return {
        kind: "transformation",
        type: "args",
        reference: args,
        async: false,
        schema,
        "~run" (dataset, config2) {
            const func = dataset.value;
            dataset.value = (...args_)=>{
                const argsDataset = this.schema["~run"]({
                    value: args_
                }, config2);
                if (argsDataset.issues) {
                    throw new ValiError(argsDataset.issues);
                }
                return func(...argsDataset.value);
            };
            return dataset;
        }
    };
}
// src/actions/args/argsAsync.ts
// @__NO_SIDE_EFFECTS__
function argsAsync(schema) {
    return {
        kind: "transformation",
        type: "args",
        reference: argsAsync,
        async: false,
        schema,
        "~run" (dataset, config2) {
            const func = dataset.value;
            dataset.value = async (...args2)=>{
                const argsDataset = await schema["~run"]({
                    value: args2
                }, config2);
                if (argsDataset.issues) {
                    throw new ValiError(argsDataset.issues);
                }
                return func(...argsDataset.value);
            };
            return dataset;
        }
    };
}
// src/actions/await/awaitAsync.ts
// @__NO_SIDE_EFFECTS__
function awaitAsync() {
    return {
        kind: "transformation",
        type: "await",
        reference: awaitAsync,
        async: true,
        async "~run" (dataset) {
            dataset.value = await dataset.value;
            return dataset;
        }
    };
}
// src/regex.ts
var BASE64_REGEX = /^(?:[\da-z+/]{4})*(?:[\da-z+/]{2}==|[\da-z+/]{3}=)?$/iu;
var BIC_REGEX = /^[A-Z]{6}(?!00)[\dA-Z]{2}(?:[\dA-Z]{3})?$/u;
var CUID2_REGEX = /^[a-z][\da-z]*$/u;
var DECIMAL_REGEX = /^[+-]?(?:\d*\.)?\d+$/u;
var DIGITS_REGEX = /^\d+$/u;
var EMAIL_REGEX = /^[\w+-]+(?:\.[\w+-]+)*@[\da-z]+(?:[.-][\da-z]+)*\.[a-z]{2,}$/iu;
var EMOJI_REGEX = // eslint-disable-next-line redos-detector/no-unsafe-regex, regexp/no-dupe-disjunctions -- false positives
/^(?:[\u{1F1E6}-\u{1F1FF}]{2}|\u{1F3F4}[\u{E0061}-\u{E007A}]{2}[\u{E0030}-\u{E0039}\u{E0061}-\u{E007A}]{1,3}\u{E007F}|(?:\p{Emoji}\uFE0F\u20E3?|\p{Emoji_Modifier_Base}\p{Emoji_Modifier}?|\p{Emoji_Presentation})(?:\u200D(?:\p{Emoji}\uFE0F\u20E3?|\p{Emoji_Modifier_Base}\p{Emoji_Modifier}?|\p{Emoji_Presentation}))*)+$/u;
var HEXADECIMAL_REGEX = /^(?:0[hx])?[\da-fA-F]+$/u;
var HEX_COLOR_REGEX = /^#(?:[\da-fA-F]{3,4}|[\da-fA-F]{6}|[\da-fA-F]{8})$/u;
var IMEI_REGEX = /^\d{15}$|^\d{2}-\d{6}-\d{6}-\d$/u;
var IPV4_REGEX = // eslint-disable-next-line redos-detector/no-unsafe-regex -- false positive
/^(?:(?:[1-9]|1\d|2[0-4])?\d|25[0-5])(?:\.(?:(?:[1-9]|1\d|2[0-4])?\d|25[0-5])){3}$/u;
var IPV6_REGEX = /^(?:(?:[\da-f]{1,4}:){7}[\da-f]{1,4}|(?:[\da-f]{1,4}:){1,7}:|(?:[\da-f]{1,4}:){1,6}:[\da-f]{1,4}|(?:[\da-f]{1,4}:){1,5}(?::[\da-f]{1,4}){1,2}|(?:[\da-f]{1,4}:){1,4}(?::[\da-f]{1,4}){1,3}|(?:[\da-f]{1,4}:){1,3}(?::[\da-f]{1,4}){1,4}|(?:[\da-f]{1,4}:){1,2}(?::[\da-f]{1,4}){1,5}|[\da-f]{1,4}:(?::[\da-f]{1,4}){1,6}|:(?:(?::[\da-f]{1,4}){1,7}|:)|fe80:(?::[\da-f]{0,4}){0,4}%[\da-z]+|::(?:f{4}(?::0{1,4})?:)?(?:(?:25[0-5]|(?:2[0-4]|1?\d)?\d)\.){3}(?:25[0-5]|(?:2[0-4]|1?\d)?\d)|(?:[\da-f]{1,4}:){1,4}:(?:(?:25[0-5]|(?:2[0-4]|1?\d)?\d)\.){3}(?:25[0-5]|(?:2[0-4]|1?\d)?\d))$/iu;
var IP_REGEX = /^(?:(?:[1-9]|1\d|2[0-4])?\d|25[0-5])(?:\.(?:(?:[1-9]|1\d|2[0-4])?\d|25[0-5])){3}$|^(?:(?:[\da-f]{1,4}:){7}[\da-f]{1,4}|(?:[\da-f]{1,4}:){1,7}:|(?:[\da-f]{1,4}:){1,6}:[\da-f]{1,4}|(?:[\da-f]{1,4}:){1,5}(?::[\da-f]{1,4}){1,2}|(?:[\da-f]{1,4}:){1,4}(?::[\da-f]{1,4}){1,3}|(?:[\da-f]{1,4}:){1,3}(?::[\da-f]{1,4}){1,4}|(?:[\da-f]{1,4}:){1,2}(?::[\da-f]{1,4}){1,5}|[\da-f]{1,4}:(?::[\da-f]{1,4}){1,6}|:(?:(?::[\da-f]{1,4}){1,7}|:)|fe80:(?::[\da-f]{0,4}){0,4}%[\da-z]+|::(?:f{4}(?::0{1,4})?:)?(?:(?:25[0-5]|(?:2[0-4]|1?\d)?\d)\.){3}(?:25[0-5]|(?:2[0-4]|1?\d)?\d)|(?:[\da-f]{1,4}:){1,4}:(?:(?:25[0-5]|(?:2[0-4]|1?\d)?\d)\.){3}(?:25[0-5]|(?:2[0-4]|1?\d)?\d))$/iu;
var ISO_DATE_REGEX = /^\d{4}-(?:0[1-9]|1[0-2])-(?:[12]\d|0[1-9]|3[01])$/u;
var ISO_DATE_TIME_REGEX = /^\d{4}-(?:0[1-9]|1[0-2])-(?:[12]\d|0[1-9]|3[01])[T ](?:0\d|1\d|2[0-3]):[0-5]\d$/u;
var ISO_TIME_REGEX = /^(?:0\d|1\d|2[0-3]):[0-5]\d$/u;
var ISO_TIME_SECOND_REGEX = /^(?:0\d|1\d|2[0-3])(?::[0-5]\d){2}$/u;
var ISO_TIMESTAMP_REGEX = /^\d{4}-(?:0[1-9]|1[0-2])-(?:[12]\d|0[1-9]|3[01])[T ](?:0\d|1\d|2[0-3])(?::[0-5]\d){2}(?:\.\d{1,9})?(?:Z|[+-](?:0\d|1\d|2[0-3])(?::?[0-5]\d)?)$/u;
var ISO_WEEK_REGEX = /^\d{4}-W(?:0[1-9]|[1-4]\d|5[0-3])$/u;
var MAC48_REGEX = /^(?:[\da-f]{2}:){5}[\da-f]{2}$|^(?:[\da-f]{2}-){5}[\da-f]{2}$|^(?:[\da-f]{4}\.){2}[\da-f]{4}$/iu;
var MAC64_REGEX = /^(?:[\da-f]{2}:){7}[\da-f]{2}$|^(?:[\da-f]{2}-){7}[\da-f]{2}$|^(?:[\da-f]{4}\.){3}[\da-f]{4}$|^(?:[\da-f]{4}:){3}[\da-f]{4}$/iu;
var MAC_REGEX = /^(?:[\da-f]{2}:){5}[\da-f]{2}$|^(?:[\da-f]{2}-){5}[\da-f]{2}$|^(?:[\da-f]{4}\.){2}[\da-f]{4}$|^(?:[\da-f]{2}:){7}[\da-f]{2}$|^(?:[\da-f]{2}-){7}[\da-f]{2}$|^(?:[\da-f]{4}\.){3}[\da-f]{4}$|^(?:[\da-f]{4}:){3}[\da-f]{4}$/iu;
var NANO_ID_REGEX = /^[\w-]+$/u;
var OCTAL_REGEX = /^(?:0o)?[0-7]+$/u;
var RFC_EMAIL_REGEX = // eslint-disable-next-line regexp/prefer-w, no-useless-escape, regexp/no-useless-escape, regexp/require-unicode-regexp
/^[a-zA-Z0-9.!#$%&'*+\/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/;
var SLUG_REGEX = /^[\da-z]+(?:[-_][\da-z]+)*$/u;
var ULID_REGEX = /^[\da-hjkmnp-tv-zA-HJKMNP-TV-Z]{26}$/u;
var UUID_REGEX = /^[\da-f]{8}(?:-[\da-f]{4}){3}-[\da-f]{12}$/iu;
// src/actions/base64/base64.ts
// @__NO_SIDE_EFFECTS__
function base64(message2) {
    return {
        kind: "validation",
        type: "base64",
        reference: base64,
        async: false,
        expects: null,
        requirement: BASE64_REGEX,
        message: message2,
        "~run" (dataset, config2) {
            if (dataset.typed && !this.requirement.test(dataset.value)) {
                _addIssue(this, "Base64", dataset, config2);
            }
            return dataset;
        }
    };
}
// src/actions/bic/bic.ts
// @__NO_SIDE_EFFECTS__
function bic(message2) {
    return {
        kind: "validation",
        type: "bic",
        reference: bic,
        async: false,
        expects: null,
        requirement: BIC_REGEX,
        message: message2,
        "~run" (dataset, config2) {
            if (dataset.typed && !this.requirement.test(dataset.value)) {
                _addIssue(this, "BIC", dataset, config2);
            }
            return dataset;
        }
    };
}
// src/actions/brand/brand.ts
// @__NO_SIDE_EFFECTS__
function brand(name) {
    return {
        kind: "transformation",
        type: "brand",
        reference: brand,
        async: false,
        name,
        "~run" (dataset) {
            return dataset;
        }
    };
}
// src/actions/bytes/bytes.ts
// @__NO_SIDE_EFFECTS__
function bytes(requirement, message2) {
    return {
        kind: "validation",
        type: "bytes",
        reference: bytes,
        async: false,
        expects: `${requirement}`,
        requirement,
        message: message2,
        "~run" (dataset, config2) {
            if (dataset.typed) {
                const length2 = _getByteCount(dataset.value);
                if (length2 !== this.requirement) {
                    _addIssue(this, "bytes", dataset, config2, {
                        received: `${length2}`
                    });
                }
            }
            return dataset;
        }
    };
}
// src/actions/check/check.ts
// @__NO_SIDE_EFFECTS__
function check(requirement, message2) {
    return {
        kind: "validation",
        type: "check",
        reference: check,
        async: false,
        expects: null,
        requirement,
        message: message2,
        "~run" (dataset, config2) {
            if (dataset.typed && !this.requirement(dataset.value)) {
                _addIssue(this, "input", dataset, config2);
            }
            return dataset;
        }
    };
}
// src/actions/check/checkAsync.ts
// @__NO_SIDE_EFFECTS__
function checkAsync(requirement, message2) {
    return {
        kind: "validation",
        type: "check",
        reference: checkAsync,
        async: true,
        expects: null,
        requirement,
        message: message2,
        async "~run" (dataset, config2) {
            if (dataset.typed && !await this.requirement(dataset.value)) {
                _addIssue(this, "input", dataset, config2);
            }
            return dataset;
        }
    };
}
// src/actions/checkItems/checkItems.ts
// @__NO_SIDE_EFFECTS__
function checkItems(requirement, message2) {
    return {
        kind: "validation",
        type: "check_items",
        reference: checkItems,
        async: false,
        expects: null,
        requirement,
        message: message2,
        "~run" (dataset, config2) {
            if (dataset.typed) {
                for(let index = 0; index < dataset.value.length; index++){
                    const item = dataset.value[index];
                    if (!this.requirement(item, index, dataset.value)) {
                        _addIssue(this, "item", dataset, config2, {
                            input: item,
                            path: [
                                {
                                    type: "array",
                                    origin: "value",
                                    input: dataset.value,
                                    key: index,
                                    value: item
                                }
                            ]
                        });
                    }
                }
            }
            return dataset;
        }
    };
}
// src/actions/checkItems/checkItemsAsync.ts
// @__NO_SIDE_EFFECTS__
function checkItemsAsync(requirement, message2) {
    return {
        kind: "validation",
        type: "check_items",
        reference: checkItemsAsync,
        async: true,
        expects: null,
        requirement,
        message: message2,
        async "~run" (dataset, config2) {
            if (dataset.typed) {
                const requirementResults = await Promise.all(dataset.value.map(this.requirement));
                for(let index = 0; index < dataset.value.length; index++){
                    if (!requirementResults[index]) {
                        const item = dataset.value[index];
                        _addIssue(this, "item", dataset, config2, {
                            input: item,
                            path: [
                                {
                                    type: "array",
                                    origin: "value",
                                    input: dataset.value,
                                    key: index,
                                    value: item
                                }
                            ]
                        });
                    }
                }
            }
            return dataset;
        }
    };
}
// src/actions/creditCard/creditCard.ts
var CREDIT_CARD_REGEX = /^(?:\d{14,19}|\d{4}(?: \d{3,6}){2,4}|\d{4}(?:-\d{3,6}){2,4})$/u;
var SANITIZE_REGEX = /[- ]/gu;
var PROVIDER_REGEX_LIST = [
    // American Express
    /^3[47]\d{13}$/u,
    // Diners Club
    /^3(?:0[0-5]|[68]\d)\d{11,13}$/u,
    // Discover
    /^6(?:011|5\d{2})\d{12,15}$/u,
    // JCB
    /^(?:2131|1800|35\d{3})\d{11}$/u,
    // Mastercard
    // eslint-disable-next-line redos-detector/no-unsafe-regex
    /^5[1-5]\d{2}|(?:222\d|22[3-9]\d|2[3-6]\d{2}|27[01]\d|2720)\d{12}$/u,
    // UnionPay
    /^(?:6[27]\d{14,17}|81\d{14,17})$/u,
    // Visa
    /^4\d{12}(?:\d{3,6})?$/u
];
// @__NO_SIDE_EFFECTS__
function creditCard(message2) {
    return {
        kind: "validation",
        type: "credit_card",
        reference: creditCard,
        async: false,
        expects: null,
        requirement (input) {
            let sanitized;
            return CREDIT_CARD_REGEX.test(input) && // Remove any hyphens and blanks
            (sanitized = input.replace(SANITIZE_REGEX, "")) && // Check if it matches a provider
            PROVIDER_REGEX_LIST.some((regex2)=>regex2.test(sanitized)) && // Check if passes luhn algorithm
            _isLuhnAlgo(sanitized);
        },
        message: message2,
        "~run" (dataset, config2) {
            if (dataset.typed && !this.requirement(dataset.value)) {
                _addIssue(this, "credit card", dataset, config2);
            }
            return dataset;
        }
    };
}
// src/actions/cuid2/cuid2.ts
// @__NO_SIDE_EFFECTS__
function cuid2(message2) {
    return {
        kind: "validation",
        type: "cuid2",
        reference: cuid2,
        async: false,
        expects: null,
        requirement: CUID2_REGEX,
        message: message2,
        "~run" (dataset, config2) {
            if (dataset.typed && !this.requirement.test(dataset.value)) {
                _addIssue(this, "Cuid2", dataset, config2);
            }
            return dataset;
        }
    };
}
// src/actions/decimal/decimal.ts
// @__NO_SIDE_EFFECTS__
function decimal(message2) {
    return {
        kind: "validation",
        type: "decimal",
        reference: decimal,
        async: false,
        expects: null,
        requirement: DECIMAL_REGEX,
        message: message2,
        "~run" (dataset, config2) {
            if (dataset.typed && !this.requirement.test(dataset.value)) {
                _addIssue(this, "decimal", dataset, config2);
            }
            return dataset;
        }
    };
}
// src/actions/description/description.ts
// @__NO_SIDE_EFFECTS__
function description(description_) {
    return {
        kind: "metadata",
        type: "description",
        reference: description,
        description: description_
    };
}
// src/actions/digits/digits.ts
// @__NO_SIDE_EFFECTS__
function digits(message2) {
    return {
        kind: "validation",
        type: "digits",
        reference: digits,
        async: false,
        expects: null,
        requirement: DIGITS_REGEX,
        message: message2,
        "~run" (dataset, config2) {
            if (dataset.typed && !this.requirement.test(dataset.value)) {
                _addIssue(this, "digits", dataset, config2);
            }
            return dataset;
        }
    };
}
// src/actions/email/email.ts
// @__NO_SIDE_EFFECTS__
function email(message2) {
    return {
        kind: "validation",
        type: "email",
        reference: email,
        expects: null,
        async: false,
        requirement: EMAIL_REGEX,
        message: message2,
        "~run" (dataset, config2) {
            if (dataset.typed && !this.requirement.test(dataset.value)) {
                _addIssue(this, "email", dataset, config2);
            }
            return dataset;
        }
    };
}
// src/actions/emoji/emoji.ts
// @__NO_SIDE_EFFECTS__
function emoji(message2) {
    return {
        kind: "validation",
        type: "emoji",
        reference: emoji,
        async: false,
        expects: null,
        requirement: EMOJI_REGEX,
        message: message2,
        "~run" (dataset, config2) {
            if (dataset.typed && !this.requirement.test(dataset.value)) {
                _addIssue(this, "emoji", dataset, config2);
            }
            return dataset;
        }
    };
}
// src/actions/empty/empty.ts
// @__NO_SIDE_EFFECTS__
function empty(message2) {
    return {
        kind: "validation",
        type: "empty",
        reference: empty,
        async: false,
        expects: "0",
        message: message2,
        "~run" (dataset, config2) {
            if (dataset.typed && dataset.value.length > 0) {
                _addIssue(this, "length", dataset, config2, {
                    received: `${dataset.value.length}`
                });
            }
            return dataset;
        }
    };
}
// src/actions/endsWith/endsWith.ts
// @__NO_SIDE_EFFECTS__
function endsWith(requirement, message2) {
    return {
        kind: "validation",
        type: "ends_with",
        reference: endsWith,
        async: false,
        expects: `"${requirement}"`,
        requirement,
        message: message2,
        "~run" (dataset, config2) {
            if (dataset.typed && !dataset.value.endsWith(this.requirement)) {
                _addIssue(this, "end", dataset, config2, {
                    received: `"${dataset.value.slice(-this.requirement.length)}"`
                });
            }
            return dataset;
        }
    };
}
// src/actions/entries/entries.ts
// @__NO_SIDE_EFFECTS__
function entries(requirement, message2) {
    return {
        kind: "validation",
        type: "entries",
        reference: entries,
        async: false,
        expects: `${requirement}`,
        requirement,
        message: message2,
        "~run" (dataset, config2) {
            if (!dataset.typed) return dataset;
            const count = Object.keys(dataset.value).length;
            if (dataset.typed && count !== this.requirement) {
                _addIssue(this, "entries", dataset, config2, {
                    received: `${count}`
                });
            }
            return dataset;
        }
    };
}
// src/actions/everyItem/everyItem.ts
// @__NO_SIDE_EFFECTS__
function everyItem(requirement, message2) {
    return {
        kind: "validation",
        type: "every_item",
        reference: everyItem,
        async: false,
        expects: null,
        requirement,
        message: message2,
        "~run" (dataset, config2) {
            if (dataset.typed && !dataset.value.every(this.requirement)) {
                _addIssue(this, "item", dataset, config2);
            }
            return dataset;
        }
    };
}
// src/actions/excludes/excludes.ts
// @__NO_SIDE_EFFECTS__
function excludes(requirement, message2) {
    const received = _stringify(requirement);
    return {
        kind: "validation",
        type: "excludes",
        reference: excludes,
        async: false,
        expects: `!${received}`,
        requirement,
        message: message2,
        "~run" (dataset, config2) {
            if (dataset.typed && dataset.value.includes(this.requirement)) {
                _addIssue(this, "content", dataset, config2, {
                    received
                });
            }
            return dataset;
        }
    };
}
// src/actions/filterItems/filterItems.ts
// @__NO_SIDE_EFFECTS__
function filterItems(operation) {
    return {
        kind: "transformation",
        type: "filter_items",
        reference: filterItems,
        async: false,
        operation,
        "~run" (dataset) {
            dataset.value = dataset.value.filter(this.operation);
            return dataset;
        }
    };
}
// src/actions/findItem/findItem.ts
// @__NO_SIDE_EFFECTS__
function findItem(operation) {
    return {
        kind: "transformation",
        type: "find_item",
        reference: findItem,
        async: false,
        operation,
        "~run" (dataset) {
            dataset.value = dataset.value.find(this.operation);
            return dataset;
        }
    };
}
// src/actions/finite/finite.ts
// @__NO_SIDE_EFFECTS__
function finite(message2) {
    return {
        kind: "validation",
        type: "finite",
        reference: finite,
        async: false,
        expects: null,
        requirement: Number.isFinite,
        message: message2,
        "~run" (dataset, config2) {
            if (dataset.typed && !this.requirement(dataset.value)) {
                _addIssue(this, "finite", dataset, config2);
            }
            return dataset;
        }
    };
}
// src/actions/flavor/flavor.ts
// @__NO_SIDE_EFFECTS__
function flavor(name) {
    return {
        kind: "transformation",
        type: "flavor",
        reference: flavor,
        async: false,
        name,
        "~run" (dataset) {
            return dataset;
        }
    };
}
// src/actions/graphemes/graphemes.ts
// @__NO_SIDE_EFFECTS__
function graphemes(requirement, message2) {
    return {
        kind: "validation",
        type: "graphemes",
        reference: graphemes,
        async: false,
        expects: `${requirement}`,
        requirement,
        message: message2,
        "~run" (dataset, config2) {
            if (dataset.typed) {
                const count = _getGraphemeCount(dataset.value);
                if (count !== this.requirement) {
                    _addIssue(this, "graphemes", dataset, config2, {
                        received: `${count}`
                    });
                }
            }
            return dataset;
        }
    };
}
// src/actions/gtValue/gtValue.ts
// @__NO_SIDE_EFFECTS__
function gtValue(requirement, message2) {
    return {
        kind: "validation",
        type: "gt_value",
        reference: gtValue,
        async: false,
        expects: `>${requirement instanceof Date ? requirement.toJSON() : _stringify(requirement)}`,
        requirement,
        message: message2,
        "~run" (dataset, config2) {
            if (dataset.typed && !(dataset.value > this.requirement)) {
                _addIssue(this, "value", dataset, config2, {
                    received: dataset.value instanceof Date ? dataset.value.toJSON() : _stringify(dataset.value)
                });
            }
            return dataset;
        }
    };
}
// src/actions/hash/hash.ts
var HASH_LENGTHS = {
    md4: 32,
    md5: 32,
    sha1: 40,
    sha256: 64,
    sha384: 96,
    sha512: 128,
    ripemd128: 32,
    ripemd160: 40,
    tiger128: 32,
    tiger160: 40,
    tiger192: 48,
    crc32: 8,
    crc32b: 8,
    adler32: 8
};
// @__NO_SIDE_EFFECTS__
function hash(types, message2) {
    return {
        kind: "validation",
        type: "hash",
        reference: hash,
        expects: null,
        async: false,
        requirement: RegExp(types.map((type)=>`^[a-f0-9]{${HASH_LENGTHS[type]}}$`).join("|"), "iu"),
        message: message2,
        "~run" (dataset, config2) {
            if (dataset.typed && !this.requirement.test(dataset.value)) {
                _addIssue(this, "hash", dataset, config2);
            }
            return dataset;
        }
    };
}
// src/actions/hexadecimal/hexadecimal.ts
// @__NO_SIDE_EFFECTS__
function hexadecimal(message2) {
    return {
        kind: "validation",
        type: "hexadecimal",
        reference: hexadecimal,
        async: false,
        expects: null,
        requirement: HEXADECIMAL_REGEX,
        message: message2,
        "~run" (dataset, config2) {
            if (dataset.typed && !this.requirement.test(dataset.value)) {
                _addIssue(this, "hexadecimal", dataset, config2);
            }
            return dataset;
        }
    };
}
// src/actions/hexColor/hexColor.ts
// @__NO_SIDE_EFFECTS__
function hexColor(message2) {
    return {
        kind: "validation",
        type: "hex_color",
        reference: hexColor,
        async: false,
        expects: null,
        requirement: HEX_COLOR_REGEX,
        message: message2,
        "~run" (dataset, config2) {
            if (dataset.typed && !this.requirement.test(dataset.value)) {
                _addIssue(this, "hex color", dataset, config2);
            }
            return dataset;
        }
    };
}
// src/actions/imei/imei.ts
// @__NO_SIDE_EFFECTS__
function imei(message2) {
    return {
        kind: "validation",
        type: "imei",
        reference: imei,
        async: false,
        expects: null,
        requirement (input) {
            return IMEI_REGEX.test(input) && _isLuhnAlgo(input);
        },
        message: message2,
        "~run" (dataset, config2) {
            if (dataset.typed && !this.requirement(dataset.value)) {
                _addIssue(this, "IMEI", dataset, config2);
            }
            return dataset;
        }
    };
}
// src/actions/includes/includes.ts
// @__NO_SIDE_EFFECTS__
function includes(requirement, message2) {
    const expects = _stringify(requirement);
    return {
        kind: "validation",
        type: "includes",
        reference: includes,
        async: false,
        expects,
        requirement,
        message: message2,
        "~run" (dataset, config2) {
            if (dataset.typed && !dataset.value.includes(this.requirement)) {
                _addIssue(this, "content", dataset, config2, {
                    received: `!${expects}`
                });
            }
            return dataset;
        }
    };
}
// src/actions/integer/integer.ts
// @__NO_SIDE_EFFECTS__
function integer(message2) {
    return {
        kind: "validation",
        type: "integer",
        reference: integer,
        async: false,
        expects: null,
        requirement: Number.isInteger,
        message: message2,
        "~run" (dataset, config2) {
            if (dataset.typed && !this.requirement(dataset.value)) {
                _addIssue(this, "integer", dataset, config2);
            }
            return dataset;
        }
    };
}
// src/actions/ip/ip.ts
// @__NO_SIDE_EFFECTS__
function ip(message2) {
    return {
        kind: "validation",
        type: "ip",
        reference: ip,
        async: false,
        expects: null,
        requirement: IP_REGEX,
        message: message2,
        "~run" (dataset, config2) {
            if (dataset.typed && !this.requirement.test(dataset.value)) {
                _addIssue(this, "IP", dataset, config2);
            }
            return dataset;
        }
    };
}
// src/actions/ipv4/ipv4.ts
// @__NO_SIDE_EFFECTS__
function ipv4(message2) {
    return {
        kind: "validation",
        type: "ipv4",
        reference: ipv4,
        async: false,
        expects: null,
        requirement: IPV4_REGEX,
        message: message2,
        "~run" (dataset, config2) {
            if (dataset.typed && !this.requirement.test(dataset.value)) {
                _addIssue(this, "IPv4", dataset, config2);
            }
            return dataset;
        }
    };
}
// src/actions/ipv6/ipv6.ts
// @__NO_SIDE_EFFECTS__
function ipv6(message2) {
    return {
        kind: "validation",
        type: "ipv6",
        reference: ipv6,
        async: false,
        expects: null,
        requirement: IPV6_REGEX,
        message: message2,
        "~run" (dataset, config2) {
            if (dataset.typed && !this.requirement.test(dataset.value)) {
                _addIssue(this, "IPv6", dataset, config2);
            }
            return dataset;
        }
    };
}
// src/actions/isoDate/isoDate.ts
// @__NO_SIDE_EFFECTS__
function isoDate(message2) {
    return {
        kind: "validation",
        type: "iso_date",
        reference: isoDate,
        async: false,
        expects: null,
        requirement: ISO_DATE_REGEX,
        message: message2,
        "~run" (dataset, config2) {
            if (dataset.typed && !this.requirement.test(dataset.value)) {
                _addIssue(this, "date", dataset, config2);
            }
            return dataset;
        }
    };
}
// src/actions/isoDateTime/isoDateTime.ts
// @__NO_SIDE_EFFECTS__
function isoDateTime(message2) {
    return {
        kind: "validation",
        type: "iso_date_time",
        reference: isoDateTime,
        async: false,
        expects: null,
        requirement: ISO_DATE_TIME_REGEX,
        message: message2,
        "~run" (dataset, config2) {
            if (dataset.typed && !this.requirement.test(dataset.value)) {
                _addIssue(this, "date-time", dataset, config2);
            }
            return dataset;
        }
    };
}
// src/actions/isoTime/isoTime.ts
// @__NO_SIDE_EFFECTS__
function isoTime(message2) {
    return {
        kind: "validation",
        type: "iso_time",
        reference: isoTime,
        async: false,
        expects: null,
        requirement: ISO_TIME_REGEX,
        message: message2,
        "~run" (dataset, config2) {
            if (dataset.typed && !this.requirement.test(dataset.value)) {
                _addIssue(this, "time", dataset, config2);
            }
            return dataset;
        }
    };
}
// src/actions/isoTimeSecond/isoTimeSecond.ts
// @__NO_SIDE_EFFECTS__
function isoTimeSecond(message2) {
    return {
        kind: "validation",
        type: "iso_time_second",
        reference: isoTimeSecond,
        async: false,
        expects: null,
        requirement: ISO_TIME_SECOND_REGEX,
        message: message2,
        "~run" (dataset, config2) {
            if (dataset.typed && !this.requirement.test(dataset.value)) {
                _addIssue(this, "time-second", dataset, config2);
            }
            return dataset;
        }
    };
}
// src/actions/isoTimestamp/isoTimestamp.ts
// @__NO_SIDE_EFFECTS__
function isoTimestamp(message2) {
    return {
        kind: "validation",
        type: "iso_timestamp",
        reference: isoTimestamp,
        async: false,
        expects: null,
        requirement: ISO_TIMESTAMP_REGEX,
        message: message2,
        "~run" (dataset, config2) {
            if (dataset.typed && !this.requirement.test(dataset.value)) {
                _addIssue(this, "timestamp", dataset, config2);
            }
            return dataset;
        }
    };
}
// src/actions/isoWeek/isoWeek.ts
// @__NO_SIDE_EFFECTS__
function isoWeek(message2) {
    return {
        kind: "validation",
        type: "iso_week",
        reference: isoWeek,
        async: false,
        expects: null,
        requirement: ISO_WEEK_REGEX,
        message: message2,
        "~run" (dataset, config2) {
            if (dataset.typed && !this.requirement.test(dataset.value)) {
                _addIssue(this, "week", dataset, config2);
            }
            return dataset;
        }
    };
}
// src/actions/length/length.ts
// @__NO_SIDE_EFFECTS__
function length(requirement, message2) {
    return {
        kind: "validation",
        type: "length",
        reference: length,
        async: false,
        expects: `${requirement}`,
        requirement,
        message: message2,
        "~run" (dataset, config2) {
            if (dataset.typed && dataset.value.length !== this.requirement) {
                _addIssue(this, "length", dataset, config2, {
                    received: `${dataset.value.length}`
                });
            }
            return dataset;
        }
    };
}
// src/actions/ltValue/ltValue.ts
// @__NO_SIDE_EFFECTS__
function ltValue(requirement, message2) {
    return {
        kind: "validation",
        type: "lt_value",
        reference: ltValue,
        async: false,
        expects: `<${requirement instanceof Date ? requirement.toJSON() : _stringify(requirement)}`,
        requirement,
        message: message2,
        "~run" (dataset, config2) {
            if (dataset.typed && !(dataset.value < this.requirement)) {
                _addIssue(this, "value", dataset, config2, {
                    received: dataset.value instanceof Date ? dataset.value.toJSON() : _stringify(dataset.value)
                });
            }
            return dataset;
        }
    };
}
// src/actions/mac/mac.ts
// @__NO_SIDE_EFFECTS__
function mac(message2) {
    return {
        kind: "validation",
        type: "mac",
        reference: mac,
        async: false,
        expects: null,
        requirement: MAC_REGEX,
        message: message2,
        "~run" (dataset, config2) {
            if (dataset.typed && !this.requirement.test(dataset.value)) {
                _addIssue(this, "MAC", dataset, config2);
            }
            return dataset;
        }
    };
}
// src/actions/mac48/mac48.ts
// @__NO_SIDE_EFFECTS__
function mac48(message2) {
    return {
        kind: "validation",
        type: "mac48",
        reference: mac48,
        async: false,
        expects: null,
        requirement: MAC48_REGEX,
        message: message2,
        "~run" (dataset, config2) {
            if (dataset.typed && !this.requirement.test(dataset.value)) {
                _addIssue(this, "48-bit MAC", dataset, config2);
            }
            return dataset;
        }
    };
}
// src/actions/mac64/mac64.ts
// @__NO_SIDE_EFFECTS__
function mac64(message2) {
    return {
        kind: "validation",
        type: "mac64",
        reference: mac64,
        async: false,
        expects: null,
        requirement: MAC64_REGEX,
        message: message2,
        "~run" (dataset, config2) {
            if (dataset.typed && !this.requirement.test(dataset.value)) {
                _addIssue(this, "64-bit MAC", dataset, config2);
            }
            return dataset;
        }
    };
}
// src/actions/mapItems/mapItems.ts
// @__NO_SIDE_EFFECTS__
function mapItems(operation) {
    return {
        kind: "transformation",
        type: "map_items",
        reference: mapItems,
        async: false,
        operation,
        "~run" (dataset) {
            dataset.value = dataset.value.map(this.operation);
            return dataset;
        }
    };
}
// src/actions/maxBytes/maxBytes.ts
// @__NO_SIDE_EFFECTS__
function maxBytes(requirement, message2) {
    return {
        kind: "validation",
        type: "max_bytes",
        reference: maxBytes,
        async: false,
        expects: `<=${requirement}`,
        requirement,
        message: message2,
        "~run" (dataset, config2) {
            if (dataset.typed) {
                const length2 = _getByteCount(dataset.value);
                if (length2 > this.requirement) {
                    _addIssue(this, "bytes", dataset, config2, {
                        received: `${length2}`
                    });
                }
            }
            return dataset;
        }
    };
}
// src/actions/maxEntries/maxEntries.ts
// @__NO_SIDE_EFFECTS__
function maxEntries(requirement, message2) {
    return {
        kind: "validation",
        type: "max_entries",
        reference: maxEntries,
        async: false,
        expects: `<=${requirement}`,
        requirement,
        message: message2,
        "~run" (dataset, config2) {
            if (!dataset.typed) return dataset;
            const count = Object.keys(dataset.value).length;
            if (dataset.typed && count > this.requirement) {
                _addIssue(this, "entries", dataset, config2, {
                    received: `${count}`
                });
            }
            return dataset;
        }
    };
}
// src/actions/maxGraphemes/maxGraphemes.ts
// @__NO_SIDE_EFFECTS__
function maxGraphemes(requirement, message2) {
    return {
        kind: "validation",
        type: "max_graphemes",
        reference: maxGraphemes,
        async: false,
        expects: `<=${requirement}`,
        requirement,
        message: message2,
        "~run" (dataset, config2) {
            if (dataset.typed) {
                const count = _getGraphemeCount(dataset.value);
                if (count > this.requirement) {
                    _addIssue(this, "graphemes", dataset, config2, {
                        received: `${count}`
                    });
                }
            }
            return dataset;
        }
    };
}
// src/actions/maxLength/maxLength.ts
// @__NO_SIDE_EFFECTS__
function maxLength(requirement, message2) {
    return {
        kind: "validation",
        type: "max_length",
        reference: maxLength,
        async: false,
        expects: `<=${requirement}`,
        requirement,
        message: message2,
        "~run" (dataset, config2) {
            if (dataset.typed && dataset.value.length > this.requirement) {
                _addIssue(this, "length", dataset, config2, {
                    received: `${dataset.value.length}`
                });
            }
            return dataset;
        }
    };
}
// src/actions/maxSize/maxSize.ts
// @__NO_SIDE_EFFECTS__
function maxSize(requirement, message2) {
    return {
        kind: "validation",
        type: "max_size",
        reference: maxSize,
        async: false,
        expects: `<=${requirement}`,
        requirement,
        message: message2,
        "~run" (dataset, config2) {
            if (dataset.typed && dataset.value.size > this.requirement) {
                _addIssue(this, "size", dataset, config2, {
                    received: `${dataset.value.size}`
                });
            }
            return dataset;
        }
    };
}
// src/actions/maxValue/maxValue.ts
// @__NO_SIDE_EFFECTS__
function maxValue(requirement, message2) {
    return {
        kind: "validation",
        type: "max_value",
        reference: maxValue,
        async: false,
        expects: `<=${requirement instanceof Date ? requirement.toJSON() : _stringify(requirement)}`,
        requirement,
        message: message2,
        "~run" (dataset, config2) {
            if (dataset.typed && !(dataset.value <= this.requirement)) {
                _addIssue(this, "value", dataset, config2, {
                    received: dataset.value instanceof Date ? dataset.value.toJSON() : _stringify(dataset.value)
                });
            }
            return dataset;
        }
    };
}
// src/actions/maxWords/maxWords.ts
// @__NO_SIDE_EFFECTS__
function maxWords(locales, requirement, message2) {
    return {
        kind: "validation",
        type: "max_words",
        reference: maxWords,
        async: false,
        expects: `<=${requirement}`,
        locales,
        requirement,
        message: message2,
        "~run" (dataset, config2) {
            if (dataset.typed) {
                const count = _getWordCount(this.locales, dataset.value);
                if (count > this.requirement) {
                    _addIssue(this, "words", dataset, config2, {
                        received: `${count}`
                    });
                }
            }
            return dataset;
        }
    };
}
// src/actions/metadata/metadata.ts
// @__NO_SIDE_EFFECTS__
function metadata(metadata_) {
    return {
        kind: "metadata",
        type: "metadata",
        reference: metadata,
        metadata: metadata_
    };
}
// src/actions/mimeType/mimeType.ts
// @__NO_SIDE_EFFECTS__
function mimeType(requirement, message2) {
    return {
        kind: "validation",
        type: "mime_type",
        reference: mimeType,
        async: false,
        expects: _joinExpects(requirement.map((option)=>`"${option}"`), "|"),
        requirement,
        message: message2,
        "~run" (dataset, config2) {
            if (dataset.typed && !this.requirement.includes(dataset.value.type)) {
                _addIssue(this, "MIME type", dataset, config2, {
                    received: `"${dataset.value.type}"`
                });
            }
            return dataset;
        }
    };
}
// src/actions/minBytes/minBytes.ts
// @__NO_SIDE_EFFECTS__
function minBytes(requirement, message2) {
    return {
        kind: "validation",
        type: "min_bytes",
        reference: minBytes,
        async: false,
        expects: `>=${requirement}`,
        requirement,
        message: message2,
        "~run" (dataset, config2) {
            if (dataset.typed) {
                const length2 = _getByteCount(dataset.value);
                if (length2 < this.requirement) {
                    _addIssue(this, "bytes", dataset, config2, {
                        received: `${length2}`
                    });
                }
            }
            return dataset;
        }
    };
}
// src/actions/minEntries/minEntries.ts
// @__NO_SIDE_EFFECTS__
function minEntries(requirement, message2) {
    return {
        kind: "validation",
        type: "min_entries",
        reference: minEntries,
        async: false,
        expects: `>=${requirement}`,
        requirement,
        message: message2,
        "~run" (dataset, config2) {
            if (!dataset.typed) return dataset;
            const count = Object.keys(dataset.value).length;
            if (dataset.typed && count < this.requirement) {
                _addIssue(this, "entries", dataset, config2, {
                    received: `${count}`
                });
            }
            return dataset;
        }
    };
}
// src/actions/minGraphemes/minGraphemes.ts
// @__NO_SIDE_EFFECTS__
function minGraphemes(requirement, message2) {
    return {
        kind: "validation",
        type: "min_graphemes",
        reference: minGraphemes,
        async: false,
        expects: `>=${requirement}`,
        requirement,
        message: message2,
        "~run" (dataset, config2) {
            if (dataset.typed) {
                const count = _getGraphemeCount(dataset.value);
                if (count < this.requirement) {
                    _addIssue(this, "graphemes", dataset, config2, {
                        received: `${count}`
                    });
                }
            }
            return dataset;
        }
    };
}
// src/actions/minLength/minLength.ts
// @__NO_SIDE_EFFECTS__
function minLength(requirement, message2) {
    return {
        kind: "validation",
        type: "min_length",
        reference: minLength,
        async: false,
        expects: `>=${requirement}`,
        requirement,
        message: message2,
        "~run" (dataset, config2) {
            if (dataset.typed && dataset.value.length < this.requirement) {
                _addIssue(this, "length", dataset, config2, {
                    received: `${dataset.value.length}`
                });
            }
            return dataset;
        }
    };
}
// src/actions/minSize/minSize.ts
// @__NO_SIDE_EFFECTS__
function minSize(requirement, message2) {
    return {
        kind: "validation",
        type: "min_size",
        reference: minSize,
        async: false,
        expects: `>=${requirement}`,
        requirement,
        message: message2,
        "~run" (dataset, config2) {
            if (dataset.typed && dataset.value.size < this.requirement) {
                _addIssue(this, "size", dataset, config2, {
                    received: `${dataset.value.size}`
                });
            }
            return dataset;
        }
    };
}
// src/actions/minValue/minValue.ts
// @__NO_SIDE_EFFECTS__
function minValue(requirement, message2) {
    return {
        kind: "validation",
        type: "min_value",
        reference: minValue,
        async: false,
        expects: `>=${requirement instanceof Date ? requirement.toJSON() : _stringify(requirement)}`,
        requirement,
        message: message2,
        "~run" (dataset, config2) {
            if (dataset.typed && !(dataset.value >= this.requirement)) {
                _addIssue(this, "value", dataset, config2, {
                    received: dataset.value instanceof Date ? dataset.value.toJSON() : _stringify(dataset.value)
                });
            }
            return dataset;
        }
    };
}
// src/actions/minWords/minWords.ts
// @__NO_SIDE_EFFECTS__
function minWords(locales, requirement, message2) {
    return {
        kind: "validation",
        type: "min_words",
        reference: minWords,
        async: false,
        expects: `>=${requirement}`,
        locales,
        requirement,
        message: message2,
        "~run" (dataset, config2) {
            if (dataset.typed) {
                const count = _getWordCount(this.locales, dataset.value);
                if (count < this.requirement) {
                    _addIssue(this, "words", dataset, config2, {
                        received: `${count}`
                    });
                }
            }
            return dataset;
        }
    };
}
// src/actions/multipleOf/multipleOf.ts
// @__NO_SIDE_EFFECTS__
function multipleOf(requirement, message2) {
    return {
        kind: "validation",
        type: "multiple_of",
        reference: multipleOf,
        async: false,
        expects: `%${requirement}`,
        requirement,
        message: message2,
        "~run" (dataset, config2) {
            if (dataset.typed && dataset.value % this.requirement != 0) {
                _addIssue(this, "multiple", dataset, config2);
            }
            return dataset;
        }
    };
}
// src/actions/nanoid/nanoid.ts
// @__NO_SIDE_EFFECTS__
function nanoid(message2) {
    return {
        kind: "validation",
        type: "nanoid",
        reference: nanoid,
        async: false,
        expects: null,
        requirement: NANO_ID_REGEX,
        message: message2,
        "~run" (dataset, config2) {
            if (dataset.typed && !this.requirement.test(dataset.value)) {
                _addIssue(this, "Nano ID", dataset, config2);
            }
            return dataset;
        }
    };
}
// src/actions/nonEmpty/nonEmpty.ts
// @__NO_SIDE_EFFECTS__
function nonEmpty(message2) {
    return {
        kind: "validation",
        type: "non_empty",
        reference: nonEmpty,
        async: false,
        expects: "!0",
        message: message2,
        "~run" (dataset, config2) {
            if (dataset.typed && dataset.value.length === 0) {
                _addIssue(this, "length", dataset, config2, {
                    received: "0"
                });
            }
            return dataset;
        }
    };
}
// src/actions/normalize/normalize.ts
// @__NO_SIDE_EFFECTS__
function normalize(form) {
    return {
        kind: "transformation",
        type: "normalize",
        reference: normalize,
        async: false,
        form,
        "~run" (dataset) {
            dataset.value = dataset.value.normalize(this.form);
            return dataset;
        }
    };
}
// src/actions/notBytes/notBytes.ts
// @__NO_SIDE_EFFECTS__
function notBytes(requirement, message2) {
    return {
        kind: "validation",
        type: "not_bytes",
        reference: notBytes,
        async: false,
        expects: `!${requirement}`,
        requirement,
        message: message2,
        "~run" (dataset, config2) {
            if (dataset.typed) {
                const length2 = _getByteCount(dataset.value);
                if (length2 === this.requirement) {
                    _addIssue(this, "bytes", dataset, config2, {
                        received: `${length2}`
                    });
                }
            }
            return dataset;
        }
    };
}
// src/actions/notEntries/notEntries.ts
// @__NO_SIDE_EFFECTS__
function notEntries(requirement, message2) {
    return {
        kind: "validation",
        type: "not_entries",
        reference: notEntries,
        async: false,
        expects: `!${requirement}`,
        requirement,
        message: message2,
        "~run" (dataset, config2) {
            if (!dataset.typed) return dataset;
            const count = Object.keys(dataset.value).length;
            if (dataset.typed && count === this.requirement) {
                _addIssue(this, "entries", dataset, config2, {
                    received: `${count}`
                });
            }
            return dataset;
        }
    };
}
// src/actions/notGraphemes/notGraphemes.ts
// @__NO_SIDE_EFFECTS__
function notGraphemes(requirement, message2) {
    return {
        kind: "validation",
        type: "not_graphemes",
        reference: notGraphemes,
        async: false,
        expects: `!${requirement}`,
        requirement,
        message: message2,
        "~run" (dataset, config2) {
            if (dataset.typed) {
                const count = _getGraphemeCount(dataset.value);
                if (count === this.requirement) {
                    _addIssue(this, "graphemes", dataset, config2, {
                        received: `${count}`
                    });
                }
            }
            return dataset;
        }
    };
}
// src/actions/notLength/notLength.ts
// @__NO_SIDE_EFFECTS__
function notLength(requirement, message2) {
    return {
        kind: "validation",
        type: "not_length",
        reference: notLength,
        async: false,
        expects: `!${requirement}`,
        requirement,
        message: message2,
        "~run" (dataset, config2) {
            if (dataset.typed && dataset.value.length === this.requirement) {
                _addIssue(this, "length", dataset, config2, {
                    received: `${dataset.value.length}`
                });
            }
            return dataset;
        }
    };
}
// src/actions/notSize/notSize.ts
// @__NO_SIDE_EFFECTS__
function notSize(requirement, message2) {
    return {
        kind: "validation",
        type: "not_size",
        reference: notSize,
        async: false,
        expects: `!${requirement}`,
        requirement,
        message: message2,
        "~run" (dataset, config2) {
            if (dataset.typed && dataset.value.size === this.requirement) {
                _addIssue(this, "size", dataset, config2, {
                    received: `${dataset.value.size}`
                });
            }
            return dataset;
        }
    };
}
// src/actions/notValue/notValue.ts
// @__NO_SIDE_EFFECTS__
function notValue(requirement, message2) {
    return {
        kind: "validation",
        type: "not_value",
        reference: notValue,
        async: false,
        expects: requirement instanceof Date ? `!${requirement.toJSON()}` : `!${_stringify(requirement)}`,
        requirement,
        message: message2,
        "~run" (dataset, config2) {
            if (dataset.typed && this.requirement <= dataset.value && this.requirement >= dataset.value) {
                _addIssue(this, "value", dataset, config2, {
                    received: dataset.value instanceof Date ? dataset.value.toJSON() : _stringify(dataset.value)
                });
            }
            return dataset;
        }
    };
}
// src/actions/notValues/notValues.ts
// @__NO_SIDE_EFFECTS__
function notValues(requirement, message2) {
    return {
        kind: "validation",
        type: "not_values",
        reference: notValues,
        async: false,
        expects: `!${_joinExpects(requirement.map((value2)=>value2 instanceof Date ? value2.toJSON() : _stringify(value2)), "|")}`,
        requirement,
        message: message2,
        "~run" (dataset, config2) {
            if (dataset.typed && this.requirement.some((value2)=>value2 <= dataset.value && value2 >= dataset.value)) {
                _addIssue(this, "value", dataset, config2, {
                    received: dataset.value instanceof Date ? dataset.value.toJSON() : _stringify(dataset.value)
                });
            }
            return dataset;
        }
    };
}
// src/actions/notWords/notWords.ts
// @__NO_SIDE_EFFECTS__
function notWords(locales, requirement, message2) {
    return {
        kind: "validation",
        type: "not_words",
        reference: notWords,
        async: false,
        expects: `!${requirement}`,
        locales,
        requirement,
        message: message2,
        "~run" (dataset, config2) {
            if (dataset.typed) {
                const count = _getWordCount(this.locales, dataset.value);
                if (count === this.requirement) {
                    _addIssue(this, "words", dataset, config2, {
                        received: `${count}`
                    });
                }
            }
            return dataset;
        }
    };
}
// src/actions/octal/octal.ts
// @__NO_SIDE_EFFECTS__
function octal(message2) {
    return {
        kind: "validation",
        type: "octal",
        reference: octal,
        async: false,
        expects: null,
        requirement: OCTAL_REGEX,
        message: message2,
        "~run" (dataset, config2) {
            if (dataset.typed && !this.requirement.test(dataset.value)) {
                _addIssue(this, "octal", dataset, config2);
            }
            return dataset;
        }
    };
}
// src/actions/parseJson/parseJson.ts
// @__NO_SIDE_EFFECTS__
function parseJson(config2, message2) {
    return {
        kind: "transformation",
        type: "parse_json",
        reference: parseJson,
        config: config2,
        message: message2,
        async: false,
        "~run" (dataset, config3) {
            try {
                dataset.value = JSON.parse(dataset.value, this.config?.reviver);
            } catch (error) {
                if (error instanceof Error) {
                    _addIssue(this, "JSON", dataset, config3, {
                        received: `"${error.message}"`
                    });
                    dataset.typed = false;
                } else {
                    throw error;
                }
            }
            return dataset;
        }
    };
}
// src/actions/partialCheck/utils/_isPartiallyTyped/_isPartiallyTyped.ts
// @__NO_SIDE_EFFECTS__
function _isPartiallyTyped(dataset, paths) {
    if (dataset.issues) {
        for (const path of paths){
            for (const issue of dataset.issues){
                let typed = false;
                const bound = Math.min(path.length, issue.path?.length ?? 0);
                for(let index = 0; index < bound; index++){
                    if (// @ts-expect-error
                    path[index] !== issue.path[index].key && // @ts-expect-error
                    (path[index] !== "$" || issue.path[index].type !== "array")) {
                        typed = true;
                        break;
                    }
                }
                if (!typed) {
                    return false;
                }
            }
        }
    }
    return true;
}
// src/actions/partialCheck/partialCheck.ts
// @__NO_SIDE_EFFECTS__
function partialCheck(paths, requirement, message2) {
    return {
        kind: "validation",
        type: "partial_check",
        reference: partialCheck,
        async: false,
        expects: null,
        paths,
        requirement,
        message: message2,
        "~run" (dataset, config2) {
            if ((dataset.typed || _isPartiallyTyped(dataset, paths)) && // @ts-expect-error
            !this.requirement(dataset.value)) {
                _addIssue(this, "input", dataset, config2);
            }
            return dataset;
        }
    };
}
// src/actions/partialCheck/partialCheckAsync.ts
// @__NO_SIDE_EFFECTS__
function partialCheckAsync(paths, requirement, message2) {
    return {
        kind: "validation",
        type: "partial_check",
        reference: partialCheckAsync,
        async: true,
        expects: null,
        paths,
        requirement,
        message: message2,
        async "~run" (dataset, config2) {
            if ((dataset.typed || _isPartiallyTyped(dataset, paths)) && // @ts-expect-error
            !await this.requirement(dataset.value)) {
                _addIssue(this, "input", dataset, config2);
            }
            return dataset;
        }
    };
}
// src/actions/rawCheck/rawCheck.ts
// @__NO_SIDE_EFFECTS__
function rawCheck(action) {
    return {
        kind: "validation",
        type: "raw_check",
        reference: rawCheck,
        async: false,
        expects: null,
        "~run" (dataset, config2) {
            action({
                dataset,
                config: config2,
                addIssue: (info)=>_addIssue(this, info?.label ?? "input", dataset, config2, info)
            });
            return dataset;
        }
    };
}
// src/actions/rawCheck/rawCheckAsync.ts
// @__NO_SIDE_EFFECTS__
function rawCheckAsync(action) {
    return {
        kind: "validation",
        type: "raw_check",
        reference: rawCheckAsync,
        async: true,
        expects: null,
        async "~run" (dataset, config2) {
            await action({
                dataset,
                config: config2,
                addIssue: (info)=>_addIssue(this, info?.label ?? "input", dataset, config2, info)
            });
            return dataset;
        }
    };
}
// src/actions/rawTransform/rawTransform.ts
// @__NO_SIDE_EFFECTS__
function rawTransform(action) {
    return {
        kind: "transformation",
        type: "raw_transform",
        reference: rawTransform,
        async: false,
        "~run" (dataset, config2) {
            const output = action({
                dataset,
                config: config2,
                addIssue: (info)=>_addIssue(this, info?.label ?? "input", dataset, config2, info),
                NEVER: null
            });
            if (dataset.issues) {
                dataset.typed = false;
            } else {
                dataset.value = output;
            }
            return dataset;
        }
    };
}
// src/actions/rawTransform/rawTransformAsync.ts
// @__NO_SIDE_EFFECTS__
function rawTransformAsync(action) {
    return {
        kind: "transformation",
        type: "raw_transform",
        reference: rawTransformAsync,
        async: true,
        async "~run" (dataset, config2) {
            const output = await action({
                dataset,
                config: config2,
                addIssue: (info)=>_addIssue(this, info?.label ?? "input", dataset, config2, info),
                NEVER: null
            });
            if (dataset.issues) {
                dataset.typed = false;
            } else {
                dataset.value = output;
            }
            return dataset;
        }
    };
}
// src/actions/readonly/readonly.ts
// @__NO_SIDE_EFFECTS__
function readonly() {
    return {
        kind: "transformation",
        type: "readonly",
        reference: readonly,
        async: false,
        "~run" (dataset) {
            return dataset;
        }
    };
}
// src/actions/reduceItems/reduceItems.ts
// @__NO_SIDE_EFFECTS__
function reduceItems(operation, initial) {
    return {
        kind: "transformation",
        type: "reduce_items",
        reference: reduceItems,
        async: false,
        operation,
        initial,
        "~run" (dataset) {
            dataset.value = dataset.value.reduce(this.operation, this.initial);
            return dataset;
        }
    };
}
// src/actions/regex/regex.ts
// @__NO_SIDE_EFFECTS__
function regex(requirement, message2) {
    return {
        kind: "validation",
        type: "regex",
        reference: regex,
        async: false,
        expects: `${requirement}`,
        requirement,
        message: message2,
        "~run" (dataset, config2) {
            if (dataset.typed && !this.requirement.test(dataset.value)) {
                _addIssue(this, "format", dataset, config2);
            }
            return dataset;
        }
    };
}
// src/actions/returns/returns.ts
// @__NO_SIDE_EFFECTS__
function returns(schema) {
    return {
        kind: "transformation",
        type: "returns",
        reference: returns,
        async: false,
        schema,
        "~run" (dataset, config2) {
            const func = dataset.value;
            dataset.value = (...args_)=>{
                const returnsDataset = this.schema["~run"]({
                    value: func(...args_)
                }, config2);
                if (returnsDataset.issues) {
                    throw new ValiError(returnsDataset.issues);
                }
                return returnsDataset.value;
            };
            return dataset;
        }
    };
}
// src/actions/returns/returnsAsync.ts
// @__NO_SIDE_EFFECTS__
function returnsAsync(schema) {
    return {
        kind: "transformation",
        type: "returns",
        reference: returnsAsync,
        async: false,
        schema,
        "~run" (dataset, config2) {
            const func = dataset.value;
            dataset.value = async (...args_)=>{
                const returnsDataset = await this.schema["~run"]({
                    value: await func(...args_)
                }, config2);
                if (returnsDataset.issues) {
                    throw new ValiError(returnsDataset.issues);
                }
                return returnsDataset.value;
            };
            return dataset;
        }
    };
}
// src/actions/rfcEmail/rfcEmail.ts
// @__NO_SIDE_EFFECTS__
function rfcEmail(message2) {
    return {
        kind: "validation",
        type: "rfc_email",
        reference: rfcEmail,
        expects: null,
        async: false,
        requirement: RFC_EMAIL_REGEX,
        message: message2,
        "~run" (dataset, config2) {
            if (dataset.typed && !this.requirement.test(dataset.value)) {
                _addIssue(this, "email", dataset, config2);
            }
            return dataset;
        }
    };
}
// src/actions/safeInteger/safeInteger.ts
// @__NO_SIDE_EFFECTS__
function safeInteger(message2) {
    return {
        kind: "validation",
        type: "safe_integer",
        reference: safeInteger,
        async: false,
        expects: null,
        requirement: Number.isSafeInteger,
        message: message2,
        "~run" (dataset, config2) {
            if (dataset.typed && !this.requirement(dataset.value)) {
                _addIssue(this, "safe integer", dataset, config2);
            }
            return dataset;
        }
    };
}
// src/actions/size/size.ts
// @__NO_SIDE_EFFECTS__
function size(requirement, message2) {
    return {
        kind: "validation",
        type: "size",
        reference: size,
        async: false,
        expects: `${requirement}`,
        requirement,
        message: message2,
        "~run" (dataset, config2) {
            if (dataset.typed && dataset.value.size !== this.requirement) {
                _addIssue(this, "size", dataset, config2, {
                    received: `${dataset.value.size}`
                });
            }
            return dataset;
        }
    };
}
// src/actions/slug/slug.ts
// @__NO_SIDE_EFFECTS__
function slug(message2) {
    return {
        kind: "validation",
        type: "slug",
        reference: slug,
        async: false,
        expects: null,
        requirement: SLUG_REGEX,
        message: message2,
        "~run" (dataset, config2) {
            if (dataset.typed && !this.requirement.test(dataset.value)) {
                _addIssue(this, "slug", dataset, config2);
            }
            return dataset;
        }
    };
}
// src/actions/someItem/someItem.ts
// @__NO_SIDE_EFFECTS__
function someItem(requirement, message2) {
    return {
        kind: "validation",
        type: "some_item",
        reference: someItem,
        async: false,
        expects: null,
        requirement,
        message: message2,
        "~run" (dataset, config2) {
            if (dataset.typed && !dataset.value.some(this.requirement)) {
                _addIssue(this, "item", dataset, config2);
            }
            return dataset;
        }
    };
}
// src/actions/sortItems/sortItems.ts
// @__NO_SIDE_EFFECTS__
function sortItems(operation) {
    return {
        kind: "transformation",
        type: "sort_items",
        reference: sortItems,
        async: false,
        operation,
        "~run" (dataset) {
            dataset.value = dataset.value.sort(this.operation);
            return dataset;
        }
    };
}
// src/actions/startsWith/startsWith.ts
// @__NO_SIDE_EFFECTS__
function startsWith(requirement, message2) {
    return {
        kind: "validation",
        type: "starts_with",
        reference: startsWith,
        async: false,
        expects: `"${requirement}"`,
        requirement,
        message: message2,
        "~run" (dataset, config2) {
            if (dataset.typed && !dataset.value.startsWith(this.requirement)) {
                _addIssue(this, "start", dataset, config2, {
                    received: `"${dataset.value.slice(0, this.requirement.length)}"`
                });
            }
            return dataset;
        }
    };
}
// src/actions/stringifyJson/stringifyJson.ts
// @__NO_SIDE_EFFECTS__
function stringifyJson(config2, message2) {
    return {
        kind: "transformation",
        type: "stringify_json",
        reference: stringifyJson,
        message: message2,
        config: config2,
        async: false,
        "~run" (dataset, config3) {
            try {
                const output = JSON.stringify(dataset.value, // @ts-expect-error
                this.config?.replacer, this.config?.space);
                if (output === void 0) {
                    _addIssue(this, "JSON", dataset, config3);
                    dataset.typed = false;
                }
                dataset.value = output;
            } catch (error) {
                if (error instanceof Error) {
                    _addIssue(this, "JSON", dataset, config3, {
                        received: `"${error.message}"`
                    });
                    dataset.typed = false;
                } else {
                    throw error;
                }
            }
            return dataset;
        }
    };
}
// src/actions/title/title.ts
// @__NO_SIDE_EFFECTS__
function title(title_) {
    return {
        kind: "metadata",
        type: "title",
        reference: title,
        title: title_
    };
}
// src/actions/toLowerCase/toLowerCase.ts
// @__NO_SIDE_EFFECTS__
function toLowerCase() {
    return {
        kind: "transformation",
        type: "to_lower_case",
        reference: toLowerCase,
        async: false,
        "~run" (dataset) {
            dataset.value = dataset.value.toLowerCase();
            return dataset;
        }
    };
}
// src/actions/toMaxValue/toMaxValue.ts
// @__NO_SIDE_EFFECTS__
function toMaxValue(requirement) {
    return {
        kind: "transformation",
        type: "to_max_value",
        reference: toMaxValue,
        async: false,
        requirement,
        "~run" (dataset) {
            dataset.value = dataset.value > this.requirement ? this.requirement : dataset.value;
            return dataset;
        }
    };
}
// src/actions/toMinValue/toMinValue.ts
// @__NO_SIDE_EFFECTS__
function toMinValue(requirement) {
    return {
        kind: "transformation",
        type: "to_min_value",
        reference: toMinValue,
        async: false,
        requirement,
        "~run" (dataset) {
            dataset.value = dataset.value < this.requirement ? this.requirement : dataset.value;
            return dataset;
        }
    };
}
// src/actions/toUpperCase/toUpperCase.ts
// @__NO_SIDE_EFFECTS__
function toUpperCase() {
    return {
        kind: "transformation",
        type: "to_upper_case",
        reference: toUpperCase,
        async: false,
        "~run" (dataset) {
            dataset.value = dataset.value.toUpperCase();
            return dataset;
        }
    };
}
// src/actions/transform/transform.ts
// @__NO_SIDE_EFFECTS__
function transform(operation) {
    return {
        kind: "transformation",
        type: "transform",
        reference: transform,
        async: false,
        operation,
        "~run" (dataset) {
            dataset.value = this.operation(dataset.value);
            return dataset;
        }
    };
}
// src/actions/transform/transformAsync.ts
// @__NO_SIDE_EFFECTS__
function transformAsync(operation) {
    return {
        kind: "transformation",
        type: "transform",
        reference: transformAsync,
        async: true,
        operation,
        async "~run" (dataset) {
            dataset.value = await this.operation(dataset.value);
            return dataset;
        }
    };
}
// src/actions/trim/trim.ts
// @__NO_SIDE_EFFECTS__
function trim() {
    return {
        kind: "transformation",
        type: "trim",
        reference: trim,
        async: false,
        "~run" (dataset) {
            dataset.value = dataset.value.trim();
            return dataset;
        }
    };
}
// src/actions/trimEnd/trimEnd.ts
// @__NO_SIDE_EFFECTS__
function trimEnd() {
    return {
        kind: "transformation",
        type: "trim_end",
        reference: trimEnd,
        async: false,
        "~run" (dataset) {
            dataset.value = dataset.value.trimEnd();
            return dataset;
        }
    };
}
// src/actions/trimStart/trimStart.ts
// @__NO_SIDE_EFFECTS__
function trimStart() {
    return {
        kind: "transformation",
        type: "trim_start",
        reference: trimStart,
        async: false,
        "~run" (dataset) {
            dataset.value = dataset.value.trimStart();
            return dataset;
        }
    };
}
// src/actions/ulid/ulid.ts
// @__NO_SIDE_EFFECTS__
function ulid(message2) {
    return {
        kind: "validation",
        type: "ulid",
        reference: ulid,
        async: false,
        expects: null,
        requirement: ULID_REGEX,
        message: message2,
        "~run" (dataset, config2) {
            if (dataset.typed && !this.requirement.test(dataset.value)) {
                _addIssue(this, "ULID", dataset, config2);
            }
            return dataset;
        }
    };
}
// src/actions/url/url.ts
// @__NO_SIDE_EFFECTS__
function url(message2) {
    return {
        kind: "validation",
        type: "url",
        reference: url,
        async: false,
        expects: null,
        requirement (input) {
            try {
                new URL(input);
                return true;
            } catch  {
                return false;
            }
        },
        message: message2,
        "~run" (dataset, config2) {
            if (dataset.typed && !this.requirement(dataset.value)) {
                _addIssue(this, "URL", dataset, config2);
            }
            return dataset;
        }
    };
}
// src/actions/uuid/uuid.ts
// @__NO_SIDE_EFFECTS__
function uuid(message2) {
    return {
        kind: "validation",
        type: "uuid",
        reference: uuid,
        async: false,
        expects: null,
        requirement: UUID_REGEX,
        message: message2,
        "~run" (dataset, config2) {
            if (dataset.typed && !this.requirement.test(dataset.value)) {
                _addIssue(this, "UUID", dataset, config2);
            }
            return dataset;
        }
    };
}
// src/actions/value/value.ts
// @__NO_SIDE_EFFECTS__
function value(requirement, message2) {
    return {
        kind: "validation",
        type: "value",
        reference: value,
        async: false,
        expects: requirement instanceof Date ? requirement.toJSON() : _stringify(requirement),
        requirement,
        message: message2,
        "~run" (dataset, config2) {
            if (dataset.typed && !(this.requirement <= dataset.value && this.requirement >= dataset.value)) {
                _addIssue(this, "value", dataset, config2, {
                    received: dataset.value instanceof Date ? dataset.value.toJSON() : _stringify(dataset.value)
                });
            }
            return dataset;
        }
    };
}
// src/actions/values/values.ts
// @__NO_SIDE_EFFECTS__
function values(requirement, message2) {
    return {
        kind: "validation",
        type: "values",
        reference: values,
        async: false,
        expects: `${_joinExpects(requirement.map((value2)=>value2 instanceof Date ? value2.toJSON() : _stringify(value2)), "|")}`,
        requirement,
        message: message2,
        "~run" (dataset, config2) {
            if (dataset.typed && !this.requirement.some((value2)=>value2 <= dataset.value && value2 >= dataset.value)) {
                _addIssue(this, "value", dataset, config2, {
                    received: dataset.value instanceof Date ? dataset.value.toJSON() : _stringify(dataset.value)
                });
            }
            return dataset;
        }
    };
}
// src/actions/words/words.ts
// @__NO_SIDE_EFFECTS__
function words(locales, requirement, message2) {
    return {
        kind: "validation",
        type: "words",
        reference: words,
        async: false,
        expects: `${requirement}`,
        locales,
        requirement,
        message: message2,
        "~run" (dataset, config2) {
            if (dataset.typed) {
                const count = _getWordCount(this.locales, dataset.value);
                if (count !== this.requirement) {
                    _addIssue(this, "words", dataset, config2, {
                        received: `${count}`
                    });
                }
            }
            return dataset;
        }
    };
}
// src/methods/assert/assert.ts
function assert(schema, input) {
    const issues = schema["~run"]({
        value: input
    }, {
        abortEarly: true
    }).issues;
    if (issues) {
        throw new ValiError(issues);
    }
}
// src/methods/config/config.ts
// @__NO_SIDE_EFFECTS__
function config(schema, config2) {
    return {
        ...schema,
        get "~standard" () {
            return _getStandardProps(this);
        },
        "~run" (dataset, config_) {
            return schema["~run"](dataset, {
                ...config_,
                ...config2
            });
        }
    };
}
// src/methods/getFallback/getFallback.ts
// @__NO_SIDE_EFFECTS__
function getFallback(schema, dataset, config2) {
    return typeof schema.fallback === "function" ? // @ts-expect-error
    schema.fallback(dataset, config2) : // @ts-expect-error
    schema.fallback;
}
// src/methods/fallback/fallback.ts
// @__NO_SIDE_EFFECTS__
function fallback(schema, fallback2) {
    return {
        ...schema,
        fallback: fallback2,
        get "~standard" () {
            return _getStandardProps(this);
        },
        "~run" (dataset, config2) {
            const outputDataset = schema["~run"](dataset, config2);
            return outputDataset.issues ? {
                typed: true,
                value: getFallback(this, outputDataset, config2)
            } : outputDataset;
        }
    };
}
// src/methods/fallback/fallbackAsync.ts
// @__NO_SIDE_EFFECTS__
function fallbackAsync(schema, fallback2) {
    return {
        ...schema,
        fallback: fallback2,
        async: true,
        get "~standard" () {
            return _getStandardProps(this);
        },
        async "~run" (dataset, config2) {
            const outputDataset = await schema["~run"](dataset, config2);
            return outputDataset.issues ? {
                typed: true,
                value: await getFallback(this, outputDataset, config2)
            } : outputDataset;
        }
    };
}
// src/methods/flatten/flatten.ts
// @__NO_SIDE_EFFECTS__
function flatten(issues) {
    const flatErrors = {};
    for (const issue of issues){
        if (issue.path) {
            const dotPath = getDotPath(issue);
            if (dotPath) {
                if (!flatErrors.nested) {
                    flatErrors.nested = {};
                }
                if (flatErrors.nested[dotPath]) {
                    flatErrors.nested[dotPath].push(issue.message);
                } else {
                    flatErrors.nested[dotPath] = [
                        issue.message
                    ];
                }
            } else {
                if (flatErrors.other) {
                    flatErrors.other.push(issue.message);
                } else {
                    flatErrors.other = [
                        issue.message
                    ];
                }
            }
        } else {
            if (flatErrors.root) {
                flatErrors.root.push(issue.message);
            } else {
                flatErrors.root = [
                    issue.message
                ];
            }
        }
    }
    return flatErrors;
}
// src/methods/forward/forward.ts
// @__NO_SIDE_EFFECTS__
function forward(action, path) {
    return {
        ...action,
        "~run" (dataset, config2) {
            const prevIssues = dataset.issues && [
                ...dataset.issues
            ];
            dataset = action["~run"](dataset, config2);
            if (dataset.issues) {
                for (const issue of dataset.issues){
                    if (!prevIssues?.includes(issue)) {
                        let pathInput = dataset.value;
                        for (const key of path){
                            const pathValue = pathInput[key];
                            const pathItem = {
                                type: "unknown",
                                origin: "value",
                                input: pathInput,
                                key,
                                value: pathValue
                            };
                            if (issue.path) {
                                issue.path.push(pathItem);
                            } else {
                                issue.path = [
                                    pathItem
                                ];
                            }
                            if (!pathValue) {
                                break;
                            }
                            pathInput = pathValue;
                        }
                    }
                }
            }
            return dataset;
        }
    };
}
// src/methods/forward/forwardAsync.ts
// @__NO_SIDE_EFFECTS__
function forwardAsync(action, path) {
    return {
        ...action,
        async: true,
        async "~run" (dataset, config2) {
            const prevIssues = dataset.issues && [
                ...dataset.issues
            ];
            dataset = await action["~run"](dataset, config2);
            if (dataset.issues) {
                for (const issue of dataset.issues){
                    if (!prevIssues?.includes(issue)) {
                        let pathInput = dataset.value;
                        for (const key of path){
                            const pathValue = pathInput[key];
                            const pathItem = {
                                type: "unknown",
                                origin: "value",
                                input: pathInput,
                                key,
                                value: pathValue
                            };
                            if (issue.path) {
                                issue.path.push(pathItem);
                            } else {
                                issue.path = [
                                    pathItem
                                ];
                            }
                            if (!pathValue) {
                                break;
                            }
                            pathInput = pathValue;
                        }
                    }
                }
            }
            return dataset;
        }
    };
}
// src/methods/getDefault/getDefault.ts
// @__NO_SIDE_EFFECTS__
function getDefault(schema, dataset, config2) {
    return typeof schema.default === "function" ? // @ts-expect-error
    schema.default(dataset, config2) : // @ts-expect-error
    schema.default;
}
// src/methods/getDefaults/getDefaults.ts
// @__NO_SIDE_EFFECTS__
function getDefaults(schema) {
    if ("entries" in schema) {
        const object2 = {};
        for(const key in schema.entries){
            object2[key] = /* @__PURE__ */ getDefaults(schema.entries[key]);
        }
        return object2;
    }
    if ("items" in schema) {
        return schema.items.map(getDefaults);
    }
    return getDefault(schema);
}
// src/methods/getDefaults/getDefaultsAsync.ts
// @__NO_SIDE_EFFECTS__
async function getDefaultsAsync(schema) {
    if ("entries" in schema) {
        return Object.fromEntries(await Promise.all(Object.entries(schema.entries).map(async ([key, value2])=>[
                key,
                await /* @__PURE__ */ getDefaultsAsync(value2)
            ])));
    }
    if ("items" in schema) {
        return Promise.all(schema.items.map(getDefaultsAsync));
    }
    return getDefault(schema);
}
// src/methods/getDescription/getDescription.ts
// @__NO_SIDE_EFFECTS__
function getDescription(schema) {
    return _getLastMetadata(schema, "description");
}
// src/methods/getFallbacks/getFallbacks.ts
// @__NO_SIDE_EFFECTS__
function getFallbacks(schema) {
    if ("entries" in schema) {
        const object2 = {};
        for(const key in schema.entries){
            object2[key] = /* @__PURE__ */ getFallbacks(schema.entries[key]);
        }
        return object2;
    }
    if ("items" in schema) {
        return schema.items.map(getFallbacks);
    }
    return getFallback(schema);
}
// src/methods/getFallbacks/getFallbacksAsync.ts
// @__NO_SIDE_EFFECTS__
async function getFallbacksAsync(schema) {
    if ("entries" in schema) {
        return Object.fromEntries(await Promise.all(Object.entries(schema.entries).map(async ([key, value2])=>[
                key,
                await /* @__PURE__ */ getFallbacksAsync(value2)
            ])));
    }
    if ("items" in schema) {
        return Promise.all(schema.items.map(getFallbacksAsync));
    }
    return getFallback(schema);
}
// src/methods/getMetadata/getMetadata.ts
// @__NO_SIDE_EFFECTS__
function getMetadata(schema) {
    const result = {};
    function depthFirstMerge(schema2) {
        if ("pipe" in schema2) {
            for (const item of schema2.pipe){
                if (item.kind === "schema" && "pipe" in item) {
                    depthFirstMerge(item);
                } else if (item.kind === "metadata" && item.type === "metadata") {
                    Object.assign(result, item.metadata);
                }
            }
        }
    }
    depthFirstMerge(schema);
    return result;
}
// src/methods/getTitle/getTitle.ts
// @__NO_SIDE_EFFECTS__
function getTitle(schema) {
    return _getLastMetadata(schema, "title");
}
// src/methods/is/is.ts
// @__NO_SIDE_EFFECTS__
function is(schema, input) {
    return !schema["~run"]({
        value: input
    }, {
        abortEarly: true
    }).issues;
}
// src/schemas/any/any.ts
// @__NO_SIDE_EFFECTS__
function any() {
    return {
        kind: "schema",
        type: "any",
        reference: any,
        expects: "any",
        async: false,
        get "~standard" () {
            return _getStandardProps(this);
        },
        "~run" (dataset) {
            dataset.typed = true;
            return dataset;
        }
    };
}
// src/schemas/array/array.ts
// @__NO_SIDE_EFFECTS__
function array(item, message2) {
    return {
        kind: "schema",
        type: "array",
        reference: array,
        expects: "Array",
        async: false,
        item,
        message: message2,
        get "~standard" () {
            return _getStandardProps(this);
        },
        "~run" (dataset, config2) {
            const input = dataset.value;
            if (Array.isArray(input)) {
                dataset.typed = true;
                dataset.value = [];
                for(let key = 0; key < input.length; key++){
                    const value2 = input[key];
                    const itemDataset = this.item["~run"]({
                        value: value2
                    }, config2);
                    if (itemDataset.issues) {
                        const pathItem = {
                            type: "array",
                            origin: "value",
                            input,
                            key,
                            value: value2
                        };
                        for (const issue of itemDataset.issues){
                            if (issue.path) {
                                issue.path.unshift(pathItem);
                            } else {
                                issue.path = [
                                    pathItem
                                ];
                            }
                            dataset.issues?.push(issue);
                        }
                        if (!dataset.issues) {
                            dataset.issues = itemDataset.issues;
                        }
                        if (config2.abortEarly) {
                            dataset.typed = false;
                            break;
                        }
                    }
                    if (!itemDataset.typed) {
                        dataset.typed = false;
                    }
                    dataset.value.push(itemDataset.value);
                }
            } else {
                _addIssue(this, "type", dataset, config2);
            }
            return dataset;
        }
    };
}
// src/schemas/array/arrayAsync.ts
// @__NO_SIDE_EFFECTS__
function arrayAsync(item, message2) {
    return {
        kind: "schema",
        type: "array",
        reference: arrayAsync,
        expects: "Array",
        async: true,
        item,
        message: message2,
        get "~standard" () {
            return _getStandardProps(this);
        },
        async "~run" (dataset, config2) {
            const input = dataset.value;
            if (Array.isArray(input)) {
                dataset.typed = true;
                dataset.value = [];
                const itemDatasets = await Promise.all(input.map((value2)=>this.item["~run"]({
                        value: value2
                    }, config2)));
                for(let key = 0; key < itemDatasets.length; key++){
                    const itemDataset = itemDatasets[key];
                    if (itemDataset.issues) {
                        const pathItem = {
                            type: "array",
                            origin: "value",
                            input,
                            key,
                            value: input[key]
                        };
                        for (const issue of itemDataset.issues){
                            if (issue.path) {
                                issue.path.unshift(pathItem);
                            } else {
                                issue.path = [
                                    pathItem
                                ];
                            }
                            dataset.issues?.push(issue);
                        }
                        if (!dataset.issues) {
                            dataset.issues = itemDataset.issues;
                        }
                        if (config2.abortEarly) {
                            dataset.typed = false;
                            break;
                        }
                    }
                    if (!itemDataset.typed) {
                        dataset.typed = false;
                    }
                    dataset.value.push(itemDataset.value);
                }
            } else {
                _addIssue(this, "type", dataset, config2);
            }
            return dataset;
        }
    };
}
// src/schemas/bigint/bigint.ts
// @__NO_SIDE_EFFECTS__
function bigint(message2) {
    return {
        kind: "schema",
        type: "bigint",
        reference: bigint,
        expects: "bigint",
        async: false,
        message: message2,
        get "~standard" () {
            return _getStandardProps(this);
        },
        "~run" (dataset, config2) {
            if (typeof dataset.value === "bigint") {
                dataset.typed = true;
            } else {
                _addIssue(this, "type", dataset, config2);
            }
            return dataset;
        }
    };
}
// src/schemas/blob/blob.ts
// @__NO_SIDE_EFFECTS__
function blob(message2) {
    return {
        kind: "schema",
        type: "blob",
        reference: blob,
        expects: "Blob",
        async: false,
        message: message2,
        get "~standard" () {
            return _getStandardProps(this);
        },
        "~run" (dataset, config2) {
            if (dataset.value instanceof Blob) {
                dataset.typed = true;
            } else {
                _addIssue(this, "type", dataset, config2);
            }
            return dataset;
        }
    };
}
// src/schemas/boolean/boolean.ts
// @__NO_SIDE_EFFECTS__
function boolean(message2) {
    return {
        kind: "schema",
        type: "boolean",
        reference: boolean,
        expects: "boolean",
        async: false,
        message: message2,
        get "~standard" () {
            return _getStandardProps(this);
        },
        "~run" (dataset, config2) {
            if (typeof dataset.value === "boolean") {
                dataset.typed = true;
            } else {
                _addIssue(this, "type", dataset, config2);
            }
            return dataset;
        }
    };
}
// src/schemas/custom/custom.ts
// @__NO_SIDE_EFFECTS__
function custom(check2, message2) {
    return {
        kind: "schema",
        type: "custom",
        reference: custom,
        expects: "unknown",
        async: false,
        check: check2,
        message: message2,
        get "~standard" () {
            return _getStandardProps(this);
        },
        "~run" (dataset, config2) {
            if (this.check(dataset.value)) {
                dataset.typed = true;
            } else {
                _addIssue(this, "type", dataset, config2);
            }
            return dataset;
        }
    };
}
// src/schemas/custom/customAsync.ts
// @__NO_SIDE_EFFECTS__
function customAsync(check2, message2) {
    return {
        kind: "schema",
        type: "custom",
        reference: customAsync,
        expects: "unknown",
        async: true,
        check: check2,
        message: message2,
        get "~standard" () {
            return _getStandardProps(this);
        },
        async "~run" (dataset, config2) {
            if (await this.check(dataset.value)) {
                dataset.typed = true;
            } else {
                _addIssue(this, "type", dataset, config2);
            }
            return dataset;
        }
    };
}
// src/schemas/date/date.ts
// @__NO_SIDE_EFFECTS__
function date(message2) {
    return {
        kind: "schema",
        type: "date",
        reference: date,
        expects: "Date",
        async: false,
        message: message2,
        get "~standard" () {
            return _getStandardProps(this);
        },
        "~run" (dataset, config2) {
            if (dataset.value instanceof Date) {
                if (!isNaN(dataset.value)) {
                    dataset.typed = true;
                } else {
                    _addIssue(this, "type", dataset, config2, {
                        received: '"Invalid Date"'
                    });
                }
            } else {
                _addIssue(this, "type", dataset, config2);
            }
            return dataset;
        }
    };
}
// src/schemas/enum/enum.ts
// @__NO_SIDE_EFFECTS__
function enum_(enum__, message2) {
    const options = [];
    for(const key in enum__){
        if (`${+key}` !== key || typeof enum__[key] !== "string" || !Object.is(enum__[enum__[key]], +key)) {
            options.push(enum__[key]);
        }
    }
    return {
        kind: "schema",
        type: "enum",
        reference: enum_,
        expects: _joinExpects(options.map(_stringify), "|"),
        async: false,
        enum: enum__,
        options,
        message: message2,
        get "~standard" () {
            return _getStandardProps(this);
        },
        "~run" (dataset, config2) {
            if (this.options.includes(dataset.value)) {
                dataset.typed = true;
            } else {
                _addIssue(this, "type", dataset, config2);
            }
            return dataset;
        }
    };
}
// src/schemas/exactOptional/exactOptional.ts
// @__NO_SIDE_EFFECTS__
function exactOptional(wrapped, default_) {
    return {
        kind: "schema",
        type: "exact_optional",
        reference: exactOptional,
        expects: wrapped.expects,
        async: false,
        wrapped,
        default: default_,
        get "~standard" () {
            return _getStandardProps(this);
        },
        "~run" (dataset, config2) {
            return this.wrapped["~run"](dataset, config2);
        }
    };
}
// src/schemas/exactOptional/exactOptionalAsync.ts
// @__NO_SIDE_EFFECTS__
function exactOptionalAsync(wrapped, default_) {
    return {
        kind: "schema",
        type: "exact_optional",
        reference: exactOptionalAsync,
        expects: wrapped.expects,
        async: true,
        wrapped,
        default: default_,
        get "~standard" () {
            return _getStandardProps(this);
        },
        async "~run" (dataset, config2) {
            return this.wrapped["~run"](dataset, config2);
        }
    };
}
// src/schemas/file/file.ts
// @__NO_SIDE_EFFECTS__
function file(message2) {
    return {
        kind: "schema",
        type: "file",
        reference: file,
        expects: "File",
        async: false,
        message: message2,
        get "~standard" () {
            return _getStandardProps(this);
        },
        "~run" (dataset, config2) {
            if (dataset.value instanceof File) {
                dataset.typed = true;
            } else {
                _addIssue(this, "type", dataset, config2);
            }
            return dataset;
        }
    };
}
// src/schemas/function/function.ts
// @__NO_SIDE_EFFECTS__
function function_(message2) {
    return {
        kind: "schema",
        type: "function",
        reference: function_,
        expects: "Function",
        async: false,
        message: message2,
        get "~standard" () {
            return _getStandardProps(this);
        },
        "~run" (dataset, config2) {
            if (typeof dataset.value === "function") {
                dataset.typed = true;
            } else {
                _addIssue(this, "type", dataset, config2);
            }
            return dataset;
        }
    };
}
// src/schemas/instance/instance.ts
// @__NO_SIDE_EFFECTS__
function instance(class_, message2) {
    return {
        kind: "schema",
        type: "instance",
        reference: instance,
        expects: class_.name,
        async: false,
        class: class_,
        message: message2,
        get "~standard" () {
            return _getStandardProps(this);
        },
        "~run" (dataset, config2) {
            if (dataset.value instanceof this.class) {
                dataset.typed = true;
            } else {
                _addIssue(this, "type", dataset, config2);
            }
            return dataset;
        }
    };
}
// src/schemas/intersect/utils/_merge/_merge.ts
// @__NO_SIDE_EFFECTS__
function _merge(value1, value2) {
    if (typeof value1 === typeof value2) {
        if (value1 === value2 || value1 instanceof Date && value2 instanceof Date && +value1 === +value2) {
            return {
                value: value1
            };
        }
        if (value1 && value2 && value1.constructor === Object && value2.constructor === Object) {
            for(const key in value2){
                if (key in value1) {
                    const dataset = /* @__PURE__ */ _merge(value1[key], value2[key]);
                    if (dataset.issue) {
                        return dataset;
                    }
                    value1[key] = dataset.value;
                } else {
                    value1[key] = value2[key];
                }
            }
            return {
                value: value1
            };
        }
        if (Array.isArray(value1) && Array.isArray(value2)) {
            if (value1.length === value2.length) {
                for(let index = 0; index < value1.length; index++){
                    const dataset = /* @__PURE__ */ _merge(value1[index], value2[index]);
                    if (dataset.issue) {
                        return dataset;
                    }
                    value1[index] = dataset.value;
                }
                return {
                    value: value1
                };
            }
        }
    }
    return {
        issue: true
    };
}
// src/schemas/intersect/intersect.ts
// @__NO_SIDE_EFFECTS__
function intersect(options, message2) {
    return {
        kind: "schema",
        type: "intersect",
        reference: intersect,
        expects: _joinExpects(options.map((option)=>option.expects), "&"),
        async: false,
        options,
        message: message2,
        get "~standard" () {
            return _getStandardProps(this);
        },
        "~run" (dataset, config2) {
            if (this.options.length) {
                const input = dataset.value;
                let outputs;
                dataset.typed = true;
                for (const schema of this.options){
                    const optionDataset = schema["~run"]({
                        value: input
                    }, config2);
                    if (optionDataset.issues) {
                        if (dataset.issues) {
                            dataset.issues.push(...optionDataset.issues);
                        } else {
                            dataset.issues = optionDataset.issues;
                        }
                        if (config2.abortEarly) {
                            dataset.typed = false;
                            break;
                        }
                    }
                    if (!optionDataset.typed) {
                        dataset.typed = false;
                    }
                    if (dataset.typed) {
                        if (outputs) {
                            outputs.push(optionDataset.value);
                        } else {
                            outputs = [
                                optionDataset.value
                            ];
                        }
                    }
                }
                if (dataset.typed) {
                    dataset.value = outputs[0];
                    for(let index = 1; index < outputs.length; index++){
                        const mergeDataset = _merge(dataset.value, outputs[index]);
                        if (mergeDataset.issue) {
                            _addIssue(this, "type", dataset, config2, {
                                received: "unknown"
                            });
                            break;
                        }
                        dataset.value = mergeDataset.value;
                    }
                }
            } else {
                _addIssue(this, "type", dataset, config2);
            }
            return dataset;
        }
    };
}
// src/schemas/intersect/intersectAsync.ts
// @__NO_SIDE_EFFECTS__
function intersectAsync(options, message2) {
    return {
        kind: "schema",
        type: "intersect",
        reference: intersectAsync,
        expects: _joinExpects(options.map((option)=>option.expects), "&"),
        async: true,
        options,
        message: message2,
        get "~standard" () {
            return _getStandardProps(this);
        },
        async "~run" (dataset, config2) {
            if (this.options.length) {
                const input = dataset.value;
                let outputs;
                dataset.typed = true;
                const optionDatasets = await Promise.all(this.options.map((schema)=>schema["~run"]({
                        value: input
                    }, config2)));
                for (const optionDataset of optionDatasets){
                    if (optionDataset.issues) {
                        if (dataset.issues) {
                            dataset.issues.push(...optionDataset.issues);
                        } else {
                            dataset.issues = optionDataset.issues;
                        }
                        if (config2.abortEarly) {
                            dataset.typed = false;
                            break;
                        }
                    }
                    if (!optionDataset.typed) {
                        dataset.typed = false;
                    }
                    if (dataset.typed) {
                        if (outputs) {
                            outputs.push(optionDataset.value);
                        } else {
                            outputs = [
                                optionDataset.value
                            ];
                        }
                    }
                }
                if (dataset.typed) {
                    dataset.value = outputs[0];
                    for(let index = 1; index < outputs.length; index++){
                        const mergeDataset = _merge(dataset.value, outputs[index]);
                        if (mergeDataset.issue) {
                            _addIssue(this, "type", dataset, config2, {
                                received: "unknown"
                            });
                            break;
                        }
                        dataset.value = mergeDataset.value;
                    }
                }
            } else {
                _addIssue(this, "type", dataset, config2);
            }
            return dataset;
        }
    };
}
// src/schemas/lazy/lazy.ts
// @__NO_SIDE_EFFECTS__
function lazy(getter) {
    return {
        kind: "schema",
        type: "lazy",
        reference: lazy,
        expects: "unknown",
        async: false,
        getter,
        get "~standard" () {
            return _getStandardProps(this);
        },
        "~run" (dataset, config2) {
            return this.getter(dataset.value)["~run"](dataset, config2);
        }
    };
}
// src/schemas/lazy/lazyAsync.ts
// @__NO_SIDE_EFFECTS__
function lazyAsync(getter) {
    return {
        kind: "schema",
        type: "lazy",
        reference: lazyAsync,
        expects: "unknown",
        async: true,
        getter,
        get "~standard" () {
            return _getStandardProps(this);
        },
        async "~run" (dataset, config2) {
            return (await this.getter(dataset.value))["~run"](dataset, config2);
        }
    };
}
// src/schemas/literal/literal.ts
// @__NO_SIDE_EFFECTS__
function literal(literal_, message2) {
    return {
        kind: "schema",
        type: "literal",
        reference: literal,
        expects: _stringify(literal_),
        async: false,
        literal: literal_,
        message: message2,
        get "~standard" () {
            return _getStandardProps(this);
        },
        "~run" (dataset, config2) {
            if (dataset.value === this.literal) {
                dataset.typed = true;
            } else {
                _addIssue(this, "type", dataset, config2);
            }
            return dataset;
        }
    };
}
// src/schemas/looseObject/looseObject.ts
// @__NO_SIDE_EFFECTS__
function looseObject(entries2, message2) {
    return {
        kind: "schema",
        type: "loose_object",
        reference: looseObject,
        expects: "Object",
        async: false,
        entries: entries2,
        message: message2,
        get "~standard" () {
            return _getStandardProps(this);
        },
        "~run" (dataset, config2) {
            const input = dataset.value;
            if (input && typeof input === "object") {
                dataset.typed = true;
                dataset.value = {};
                for(const key in this.entries){
                    const valueSchema = this.entries[key];
                    if (key in input || (valueSchema.type === "exact_optional" || valueSchema.type === "optional" || valueSchema.type === "nullish") && // @ts-expect-error
                    valueSchema.default !== void 0) {
                        const value2 = key in input ? // @ts-expect-error
                        input[key] : getDefault(valueSchema);
                        const valueDataset = valueSchema["~run"]({
                            value: value2
                        }, config2);
                        if (valueDataset.issues) {
                            const pathItem = {
                                type: "object",
                                origin: "value",
                                input,
                                key,
                                value: value2
                            };
                            for (const issue of valueDataset.issues){
                                if (issue.path) {
                                    issue.path.unshift(pathItem);
                                } else {
                                    issue.path = [
                                        pathItem
                                    ];
                                }
                                dataset.issues?.push(issue);
                            }
                            if (!dataset.issues) {
                                dataset.issues = valueDataset.issues;
                            }
                            if (config2.abortEarly) {
                                dataset.typed = false;
                                break;
                            }
                        }
                        if (!valueDataset.typed) {
                            dataset.typed = false;
                        }
                        dataset.value[key] = valueDataset.value;
                    } else if (valueSchema.fallback !== void 0) {
                        dataset.value[key] = getFallback(valueSchema);
                    } else if (valueSchema.type !== "exact_optional" && valueSchema.type !== "optional" && valueSchema.type !== "nullish") {
                        _addIssue(this, "key", dataset, config2, {
                            input: void 0,
                            expected: `"${key}"`,
                            path: [
                                {
                                    type: "object",
                                    origin: "key",
                                    input,
                                    key,
                                    // @ts-expect-error
                                    value: input[key]
                                }
                            ]
                        });
                        if (config2.abortEarly) {
                            break;
                        }
                    }
                }
                if (!dataset.issues || !config2.abortEarly) {
                    for(const key in input){
                        if (_isValidObjectKey(input, key) && !(key in this.entries)) {
                            dataset.value[key] = input[key];
                        }
                    }
                }
            } else {
                _addIssue(this, "type", dataset, config2);
            }
            return dataset;
        }
    };
}
// src/schemas/looseObject/looseObjectAsync.ts
// @__NO_SIDE_EFFECTS__
function looseObjectAsync(entries2, message2) {
    return {
        kind: "schema",
        type: "loose_object",
        reference: looseObjectAsync,
        expects: "Object",
        async: true,
        entries: entries2,
        message: message2,
        get "~standard" () {
            return _getStandardProps(this);
        },
        async "~run" (dataset, config2) {
            const input = dataset.value;
            if (input && typeof input === "object") {
                dataset.typed = true;
                dataset.value = {};
                const valueDatasets = await Promise.all(Object.entries(this.entries).map(async ([key, valueSchema])=>{
                    if (key in input || (valueSchema.type === "exact_optional" || valueSchema.type === "optional" || valueSchema.type === "nullish") && // @ts-expect-error
                    valueSchema.default !== void 0) {
                        const value2 = key in input ? // @ts-expect-error
                        input[key] : await getDefault(valueSchema);
                        return [
                            key,
                            value2,
                            valueSchema,
                            await valueSchema["~run"]({
                                value: value2
                            }, config2)
                        ];
                    }
                    return [
                        key,
                        // @ts-expect-error
                        input[key],
                        valueSchema,
                        null
                    ];
                }));
                for (const [key, value2, valueSchema, valueDataset] of valueDatasets){
                    if (valueDataset) {
                        if (valueDataset.issues) {
                            const pathItem = {
                                type: "object",
                                origin: "value",
                                input,
                                key,
                                value: value2
                            };
                            for (const issue of valueDataset.issues){
                                if (issue.path) {
                                    issue.path.unshift(pathItem);
                                } else {
                                    issue.path = [
                                        pathItem
                                    ];
                                }
                                dataset.issues?.push(issue);
                            }
                            if (!dataset.issues) {
                                dataset.issues = valueDataset.issues;
                            }
                            if (config2.abortEarly) {
                                dataset.typed = false;
                                break;
                            }
                        }
                        if (!valueDataset.typed) {
                            dataset.typed = false;
                        }
                        dataset.value[key] = valueDataset.value;
                    } else if (valueSchema.fallback !== void 0) {
                        dataset.value[key] = await getFallback(valueSchema);
                    } else if (valueSchema.type !== "exact_optional" && valueSchema.type !== "optional" && valueSchema.type !== "nullish") {
                        _addIssue(this, "key", dataset, config2, {
                            input: void 0,
                            expected: `"${key}"`,
                            path: [
                                {
                                    type: "object",
                                    origin: "key",
                                    input,
                                    key,
                                    value: value2
                                }
                            ]
                        });
                        if (config2.abortEarly) {
                            break;
                        }
                    }
                }
                if (!dataset.issues || !config2.abortEarly) {
                    for(const key in input){
                        if (_isValidObjectKey(input, key) && !(key in this.entries)) {
                            dataset.value[key] = input[key];
                        }
                    }
                }
            } else {
                _addIssue(this, "type", dataset, config2);
            }
            return dataset;
        }
    };
}
// src/schemas/looseTuple/looseTuple.ts
// @__NO_SIDE_EFFECTS__
function looseTuple(items, message2) {
    return {
        kind: "schema",
        type: "loose_tuple",
        reference: looseTuple,
        expects: "Array",
        async: false,
        items,
        message: message2,
        get "~standard" () {
            return _getStandardProps(this);
        },
        "~run" (dataset, config2) {
            const input = dataset.value;
            if (Array.isArray(input)) {
                dataset.typed = true;
                dataset.value = [];
                for(let key = 0; key < this.items.length; key++){
                    const value2 = input[key];
                    const itemDataset = this.items[key]["~run"]({
                        value: value2
                    }, config2);
                    if (itemDataset.issues) {
                        const pathItem = {
                            type: "array",
                            origin: "value",
                            input,
                            key,
                            value: value2
                        };
                        for (const issue of itemDataset.issues){
                            if (issue.path) {
                                issue.path.unshift(pathItem);
                            } else {
                                issue.path = [
                                    pathItem
                                ];
                            }
                            dataset.issues?.push(issue);
                        }
                        if (!dataset.issues) {
                            dataset.issues = itemDataset.issues;
                        }
                        if (config2.abortEarly) {
                            dataset.typed = false;
                            break;
                        }
                    }
                    if (!itemDataset.typed) {
                        dataset.typed = false;
                    }
                    dataset.value.push(itemDataset.value);
                }
                if (!dataset.issues || !config2.abortEarly) {
                    for(let key = this.items.length; key < input.length; key++){
                        dataset.value.push(input[key]);
                    }
                }
            } else {
                _addIssue(this, "type", dataset, config2);
            }
            return dataset;
        }
    };
}
// src/schemas/looseTuple/looseTupleAsync.ts
// @__NO_SIDE_EFFECTS__
function looseTupleAsync(items, message2) {
    return {
        kind: "schema",
        type: "loose_tuple",
        reference: looseTupleAsync,
        expects: "Array",
        async: true,
        items,
        message: message2,
        get "~standard" () {
            return _getStandardProps(this);
        },
        async "~run" (dataset, config2) {
            const input = dataset.value;
            if (Array.isArray(input)) {
                dataset.typed = true;
                dataset.value = [];
                const itemDatasets = await Promise.all(this.items.map(async (item, key)=>{
                    const value2 = input[key];
                    return [
                        key,
                        value2,
                        await item["~run"]({
                            value: value2
                        }, config2)
                    ];
                }));
                for (const [key, value2, itemDataset] of itemDatasets){
                    if (itemDataset.issues) {
                        const pathItem = {
                            type: "array",
                            origin: "value",
                            input,
                            key,
                            value: value2
                        };
                        for (const issue of itemDataset.issues){
                            if (issue.path) {
                                issue.path.unshift(pathItem);
                            } else {
                                issue.path = [
                                    pathItem
                                ];
                            }
                            dataset.issues?.push(issue);
                        }
                        if (!dataset.issues) {
                            dataset.issues = itemDataset.issues;
                        }
                        if (config2.abortEarly) {
                            dataset.typed = false;
                            break;
                        }
                    }
                    if (!itemDataset.typed) {
                        dataset.typed = false;
                    }
                    dataset.value.push(itemDataset.value);
                }
                if (!dataset.issues || !config2.abortEarly) {
                    for(let key = this.items.length; key < input.length; key++){
                        dataset.value.push(input[key]);
                    }
                }
            } else {
                _addIssue(this, "type", dataset, config2);
            }
            return dataset;
        }
    };
}
// src/schemas/map/map.ts
// @__NO_SIDE_EFFECTS__
function map(key, value2, message2) {
    return {
        kind: "schema",
        type: "map",
        reference: map,
        expects: "Map",
        async: false,
        key,
        value: value2,
        message: message2,
        get "~standard" () {
            return _getStandardProps(this);
        },
        "~run" (dataset, config2) {
            const input = dataset.value;
            if (input instanceof Map) {
                dataset.typed = true;
                dataset.value = /* @__PURE__ */ new Map();
                for (const [inputKey, inputValue] of input){
                    const keyDataset = this.key["~run"]({
                        value: inputKey
                    }, config2);
                    if (keyDataset.issues) {
                        const pathItem = {
                            type: "map",
                            origin: "key",
                            input,
                            key: inputKey,
                            value: inputValue
                        };
                        for (const issue of keyDataset.issues){
                            if (issue.path) {
                                issue.path.unshift(pathItem);
                            } else {
                                issue.path = [
                                    pathItem
                                ];
                            }
                            dataset.issues?.push(issue);
                        }
                        if (!dataset.issues) {
                            dataset.issues = keyDataset.issues;
                        }
                        if (config2.abortEarly) {
                            dataset.typed = false;
                            break;
                        }
                    }
                    const valueDataset = this.value["~run"]({
                        value: inputValue
                    }, config2);
                    if (valueDataset.issues) {
                        const pathItem = {
                            type: "map",
                            origin: "value",
                            input,
                            key: inputKey,
                            value: inputValue
                        };
                        for (const issue of valueDataset.issues){
                            if (issue.path) {
                                issue.path.unshift(pathItem);
                            } else {
                                issue.path = [
                                    pathItem
                                ];
                            }
                            dataset.issues?.push(issue);
                        }
                        if (!dataset.issues) {
                            dataset.issues = valueDataset.issues;
                        }
                        if (config2.abortEarly) {
                            dataset.typed = false;
                            break;
                        }
                    }
                    if (!keyDataset.typed || !valueDataset.typed) {
                        dataset.typed = false;
                    }
                    dataset.value.set(keyDataset.value, valueDataset.value);
                }
            } else {
                _addIssue(this, "type", dataset, config2);
            }
            return dataset;
        }
    };
}
// src/schemas/map/mapAsync.ts
// @__NO_SIDE_EFFECTS__
function mapAsync(key, value2, message2) {
    return {
        kind: "schema",
        type: "map",
        reference: mapAsync,
        expects: "Map",
        async: true,
        key,
        value: value2,
        message: message2,
        get "~standard" () {
            return _getStandardProps(this);
        },
        async "~run" (dataset, config2) {
            const input = dataset.value;
            if (input instanceof Map) {
                dataset.typed = true;
                dataset.value = /* @__PURE__ */ new Map();
                const datasets = await Promise.all([
                    ...input
                ].map(([inputKey, inputValue])=>Promise.all([
                        inputKey,
                        inputValue,
                        this.key["~run"]({
                            value: inputKey
                        }, config2),
                        this.value["~run"]({
                            value: inputValue
                        }, config2)
                    ])));
                for (const [inputKey, inputValue, keyDataset, valueDataset] of datasets){
                    if (keyDataset.issues) {
                        const pathItem = {
                            type: "map",
                            origin: "key",
                            input,
                            key: inputKey,
                            value: inputValue
                        };
                        for (const issue of keyDataset.issues){
                            if (issue.path) {
                                issue.path.unshift(pathItem);
                            } else {
                                issue.path = [
                                    pathItem
                                ];
                            }
                            dataset.issues?.push(issue);
                        }
                        if (!dataset.issues) {
                            dataset.issues = keyDataset.issues;
                        }
                        if (config2.abortEarly) {
                            dataset.typed = false;
                            break;
                        }
                    }
                    if (valueDataset.issues) {
                        const pathItem = {
                            type: "map",
                            origin: "value",
                            input,
                            key: inputKey,
                            value: inputValue
                        };
                        for (const issue of valueDataset.issues){
                            if (issue.path) {
                                issue.path.unshift(pathItem);
                            } else {
                                issue.path = [
                                    pathItem
                                ];
                            }
                            dataset.issues?.push(issue);
                        }
                        if (!dataset.issues) {
                            dataset.issues = valueDataset.issues;
                        }
                        if (config2.abortEarly) {
                            dataset.typed = false;
                            break;
                        }
                    }
                    if (!keyDataset.typed || !valueDataset.typed) {
                        dataset.typed = false;
                    }
                    dataset.value.set(keyDataset.value, valueDataset.value);
                }
            } else {
                _addIssue(this, "type", dataset, config2);
            }
            return dataset;
        }
    };
}
// src/schemas/nan/nan.ts
// @__NO_SIDE_EFFECTS__
function nan(message2) {
    return {
        kind: "schema",
        type: "nan",
        reference: nan,
        expects: "NaN",
        async: false,
        message: message2,
        get "~standard" () {
            return _getStandardProps(this);
        },
        "~run" (dataset, config2) {
            if (Number.isNaN(dataset.value)) {
                dataset.typed = true;
            } else {
                _addIssue(this, "type", dataset, config2);
            }
            return dataset;
        }
    };
}
// src/schemas/never/never.ts
// @__NO_SIDE_EFFECTS__
function never(message2) {
    return {
        kind: "schema",
        type: "never",
        reference: never,
        expects: "never",
        async: false,
        message: message2,
        get "~standard" () {
            return _getStandardProps(this);
        },
        "~run" (dataset, config2) {
            _addIssue(this, "type", dataset, config2);
            return dataset;
        }
    };
}
// src/schemas/nonNullable/nonNullable.ts
// @__NO_SIDE_EFFECTS__
function nonNullable(wrapped, message2) {
    return {
        kind: "schema",
        type: "non_nullable",
        reference: nonNullable,
        expects: "!null",
        async: false,
        wrapped,
        message: message2,
        get "~standard" () {
            return _getStandardProps(this);
        },
        "~run" (dataset, config2) {
            if (dataset.value !== null) {
                dataset = this.wrapped["~run"](dataset, config2);
            }
            if (dataset.value === null) {
                _addIssue(this, "type", dataset, config2);
            }
            return dataset;
        }
    };
}
// src/schemas/nonNullable/nonNullableAsync.ts
// @__NO_SIDE_EFFECTS__
function nonNullableAsync(wrapped, message2) {
    return {
        kind: "schema",
        type: "non_nullable",
        reference: nonNullableAsync,
        expects: "!null",
        async: true,
        wrapped,
        message: message2,
        get "~standard" () {
            return _getStandardProps(this);
        },
        async "~run" (dataset, config2) {
            if (dataset.value !== null) {
                dataset = await this.wrapped["~run"](dataset, config2);
            }
            if (dataset.value === null) {
                _addIssue(this, "type", dataset, config2);
            }
            return dataset;
        }
    };
}
// src/schemas/nonNullish/nonNullish.ts
// @__NO_SIDE_EFFECTS__
function nonNullish(wrapped, message2) {
    return {
        kind: "schema",
        type: "non_nullish",
        reference: nonNullish,
        expects: "(!null & !undefined)",
        async: false,
        wrapped,
        message: message2,
        get "~standard" () {
            return _getStandardProps(this);
        },
        "~run" (dataset, config2) {
            if (!(dataset.value === null || dataset.value === void 0)) {
                dataset = this.wrapped["~run"](dataset, config2);
            }
            if (dataset.value === null || dataset.value === void 0) {
                _addIssue(this, "type", dataset, config2);
            }
            return dataset;
        }
    };
}
// src/schemas/nonNullish/nonNullishAsync.ts
// @__NO_SIDE_EFFECTS__
function nonNullishAsync(wrapped, message2) {
    return {
        kind: "schema",
        type: "non_nullish",
        reference: nonNullishAsync,
        expects: "(!null & !undefined)",
        async: true,
        wrapped,
        message: message2,
        get "~standard" () {
            return _getStandardProps(this);
        },
        async "~run" (dataset, config2) {
            if (!(dataset.value === null || dataset.value === void 0)) {
                dataset = await this.wrapped["~run"](dataset, config2);
            }
            if (dataset.value === null || dataset.value === void 0) {
                _addIssue(this, "type", dataset, config2);
            }
            return dataset;
        }
    };
}
// src/schemas/nonOptional/nonOptional.ts
// @__NO_SIDE_EFFECTS__
function nonOptional(wrapped, message2) {
    return {
        kind: "schema",
        type: "non_optional",
        reference: nonOptional,
        expects: "!undefined",
        async: false,
        wrapped,
        message: message2,
        get "~standard" () {
            return _getStandardProps(this);
        },
        "~run" (dataset, config2) {
            if (dataset.value !== void 0) {
                dataset = this.wrapped["~run"](dataset, config2);
            }
            if (dataset.value === void 0) {
                _addIssue(this, "type", dataset, config2);
            }
            return dataset;
        }
    };
}
// src/schemas/nonOptional/nonOptionalAsync.ts
// @__NO_SIDE_EFFECTS__
function nonOptionalAsync(wrapped, message2) {
    return {
        kind: "schema",
        type: "non_optional",
        reference: nonOptionalAsync,
        expects: "!undefined",
        async: true,
        wrapped,
        message: message2,
        get "~standard" () {
            return _getStandardProps(this);
        },
        async "~run" (dataset, config2) {
            if (dataset.value !== void 0) {
                dataset = await this.wrapped["~run"](dataset, config2);
            }
            if (dataset.value === void 0) {
                _addIssue(this, "type", dataset, config2);
            }
            return dataset;
        }
    };
}
// src/schemas/null/null.ts
// @__NO_SIDE_EFFECTS__
function null_(message2) {
    return {
        kind: "schema",
        type: "null",
        reference: null_,
        expects: "null",
        async: false,
        message: message2,
        get "~standard" () {
            return _getStandardProps(this);
        },
        "~run" (dataset, config2) {
            if (dataset.value === null) {
                dataset.typed = true;
            } else {
                _addIssue(this, "type", dataset, config2);
            }
            return dataset;
        }
    };
}
// src/schemas/nullable/nullable.ts
// @__NO_SIDE_EFFECTS__
function nullable(wrapped, default_) {
    return {
        kind: "schema",
        type: "nullable",
        reference: nullable,
        expects: `(${wrapped.expects} | null)`,
        async: false,
        wrapped,
        default: default_,
        get "~standard" () {
            return _getStandardProps(this);
        },
        "~run" (dataset, config2) {
            if (dataset.value === null) {
                if (this.default !== void 0) {
                    dataset.value = getDefault(this, dataset, config2);
                }
                if (dataset.value === null) {
                    dataset.typed = true;
                    return dataset;
                }
            }
            return this.wrapped["~run"](dataset, config2);
        }
    };
}
// src/schemas/nullable/nullableAsync.ts
// @__NO_SIDE_EFFECTS__
function nullableAsync(wrapped, default_) {
    return {
        kind: "schema",
        type: "nullable",
        reference: nullableAsync,
        expects: `(${wrapped.expects} | null)`,
        async: true,
        wrapped,
        default: default_,
        get "~standard" () {
            return _getStandardProps(this);
        },
        async "~run" (dataset, config2) {
            if (dataset.value === null) {
                if (this.default !== void 0) {
                    dataset.value = await getDefault(this, dataset, config2);
                }
                if (dataset.value === null) {
                    dataset.typed = true;
                    return dataset;
                }
            }
            return this.wrapped["~run"](dataset, config2);
        }
    };
}
// src/schemas/nullish/nullish.ts
// @__NO_SIDE_EFFECTS__
function nullish(wrapped, default_) {
    return {
        kind: "schema",
        type: "nullish",
        reference: nullish,
        expects: `(${wrapped.expects} | null | undefined)`,
        async: false,
        wrapped,
        default: default_,
        get "~standard" () {
            return _getStandardProps(this);
        },
        "~run" (dataset, config2) {
            if (dataset.value === null || dataset.value === void 0) {
                if (this.default !== void 0) {
                    dataset.value = getDefault(this, dataset, config2);
                }
                if (dataset.value === null || dataset.value === void 0) {
                    dataset.typed = true;
                    return dataset;
                }
            }
            return this.wrapped["~run"](dataset, config2);
        }
    };
}
// src/schemas/nullish/nullishAsync.ts
// @__NO_SIDE_EFFECTS__
function nullishAsync(wrapped, default_) {
    return {
        kind: "schema",
        type: "nullish",
        reference: nullishAsync,
        expects: `(${wrapped.expects} | null | undefined)`,
        async: true,
        wrapped,
        default: default_,
        get "~standard" () {
            return _getStandardProps(this);
        },
        async "~run" (dataset, config2) {
            if (dataset.value === null || dataset.value === void 0) {
                if (this.default !== void 0) {
                    dataset.value = await getDefault(this, dataset, config2);
                }
                if (dataset.value === null || dataset.value === void 0) {
                    dataset.typed = true;
                    return dataset;
                }
            }
            return this.wrapped["~run"](dataset, config2);
        }
    };
}
// src/schemas/number/number.ts
// @__NO_SIDE_EFFECTS__
function number(message2) {
    return {
        kind: "schema",
        type: "number",
        reference: number,
        expects: "number",
        async: false,
        message: message2,
        get "~standard" () {
            return _getStandardProps(this);
        },
        "~run" (dataset, config2) {
            if (typeof dataset.value === "number" && !isNaN(dataset.value)) {
                dataset.typed = true;
            } else {
                _addIssue(this, "type", dataset, config2);
            }
            return dataset;
        }
    };
}
// src/schemas/object/object.ts
// @__NO_SIDE_EFFECTS__
function object(entries2, message2) {
    return {
        kind: "schema",
        type: "object",
        reference: object,
        expects: "Object",
        async: false,
        entries: entries2,
        message: message2,
        get "~standard" () {
            return _getStandardProps(this);
        },
        "~run" (dataset, config2) {
            const input = dataset.value;
            if (input && typeof input === "object") {
                dataset.typed = true;
                dataset.value = {};
                for(const key in this.entries){
                    const valueSchema = this.entries[key];
                    if (key in input || (valueSchema.type === "exact_optional" || valueSchema.type === "optional" || valueSchema.type === "nullish") && // @ts-expect-error
                    valueSchema.default !== void 0) {
                        const value2 = key in input ? // @ts-expect-error
                        input[key] : getDefault(valueSchema);
                        const valueDataset = valueSchema["~run"]({
                            value: value2
                        }, config2);
                        if (valueDataset.issues) {
                            const pathItem = {
                                type: "object",
                                origin: "value",
                                input,
                                key,
                                value: value2
                            };
                            for (const issue of valueDataset.issues){
                                if (issue.path) {
                                    issue.path.unshift(pathItem);
                                } else {
                                    issue.path = [
                                        pathItem
                                    ];
                                }
                                dataset.issues?.push(issue);
                            }
                            if (!dataset.issues) {
                                dataset.issues = valueDataset.issues;
                            }
                            if (config2.abortEarly) {
                                dataset.typed = false;
                                break;
                            }
                        }
                        if (!valueDataset.typed) {
                            dataset.typed = false;
                        }
                        dataset.value[key] = valueDataset.value;
                    } else if (valueSchema.fallback !== void 0) {
                        dataset.value[key] = getFallback(valueSchema);
                    } else if (valueSchema.type !== "exact_optional" && valueSchema.type !== "optional" && valueSchema.type !== "nullish") {
                        _addIssue(this, "key", dataset, config2, {
                            input: void 0,
                            expected: `"${key}"`,
                            path: [
                                {
                                    type: "object",
                                    origin: "key",
                                    input,
                                    key,
                                    // @ts-expect-error
                                    value: input[key]
                                }
                            ]
                        });
                        if (config2.abortEarly) {
                            break;
                        }
                    }
                }
            } else {
                _addIssue(this, "type", dataset, config2);
            }
            return dataset;
        }
    };
}
// src/schemas/object/objectAsync.ts
// @__NO_SIDE_EFFECTS__
function objectAsync(entries2, message2) {
    return {
        kind: "schema",
        type: "object",
        reference: objectAsync,
        expects: "Object",
        async: true,
        entries: entries2,
        message: message2,
        get "~standard" () {
            return _getStandardProps(this);
        },
        async "~run" (dataset, config2) {
            const input = dataset.value;
            if (input && typeof input === "object") {
                dataset.typed = true;
                dataset.value = {};
                const valueDatasets = await Promise.all(Object.entries(this.entries).map(async ([key, valueSchema])=>{
                    if (key in input || (valueSchema.type === "exact_optional" || valueSchema.type === "optional" || valueSchema.type === "nullish") && // @ts-expect-error
                    valueSchema.default !== void 0) {
                        const value2 = key in input ? // @ts-expect-error
                        input[key] : await getDefault(valueSchema);
                        return [
                            key,
                            value2,
                            valueSchema,
                            await valueSchema["~run"]({
                                value: value2
                            }, config2)
                        ];
                    }
                    return [
                        key,
                        // @ts-expect-error
                        input[key],
                        valueSchema,
                        null
                    ];
                }));
                for (const [key, value2, valueSchema, valueDataset] of valueDatasets){
                    if (valueDataset) {
                        if (valueDataset.issues) {
                            const pathItem = {
                                type: "object",
                                origin: "value",
                                input,
                                key,
                                value: value2
                            };
                            for (const issue of valueDataset.issues){
                                if (issue.path) {
                                    issue.path.unshift(pathItem);
                                } else {
                                    issue.path = [
                                        pathItem
                                    ];
                                }
                                dataset.issues?.push(issue);
                            }
                            if (!dataset.issues) {
                                dataset.issues = valueDataset.issues;
                            }
                            if (config2.abortEarly) {
                                dataset.typed = false;
                                break;
                            }
                        }
                        if (!valueDataset.typed) {
                            dataset.typed = false;
                        }
                        dataset.value[key] = valueDataset.value;
                    } else if (valueSchema.fallback !== void 0) {
                        dataset.value[key] = await getFallback(valueSchema);
                    } else if (valueSchema.type !== "exact_optional" && valueSchema.type !== "optional" && valueSchema.type !== "nullish") {
                        _addIssue(this, "key", dataset, config2, {
                            input: void 0,
                            expected: `"${key}"`,
                            path: [
                                {
                                    type: "object",
                                    origin: "key",
                                    input,
                                    key,
                                    value: value2
                                }
                            ]
                        });
                        if (config2.abortEarly) {
                            break;
                        }
                    }
                }
            } else {
                _addIssue(this, "type", dataset, config2);
            }
            return dataset;
        }
    };
}
// src/schemas/objectWithRest/objectWithRest.ts
// @__NO_SIDE_EFFECTS__
function objectWithRest(entries2, rest, message2) {
    return {
        kind: "schema",
        type: "object_with_rest",
        reference: objectWithRest,
        expects: "Object",
        async: false,
        entries: entries2,
        rest,
        message: message2,
        get "~standard" () {
            return _getStandardProps(this);
        },
        "~run" (dataset, config2) {
            const input = dataset.value;
            if (input && typeof input === "object") {
                dataset.typed = true;
                dataset.value = {};
                for(const key in this.entries){
                    const valueSchema = this.entries[key];
                    if (key in input || (valueSchema.type === "exact_optional" || valueSchema.type === "optional" || valueSchema.type === "nullish") && // @ts-expect-error
                    valueSchema.default !== void 0) {
                        const value2 = key in input ? // @ts-expect-error
                        input[key] : getDefault(valueSchema);
                        const valueDataset = valueSchema["~run"]({
                            value: value2
                        }, config2);
                        if (valueDataset.issues) {
                            const pathItem = {
                                type: "object",
                                origin: "value",
                                input,
                                key,
                                value: value2
                            };
                            for (const issue of valueDataset.issues){
                                if (issue.path) {
                                    issue.path.unshift(pathItem);
                                } else {
                                    issue.path = [
                                        pathItem
                                    ];
                                }
                                dataset.issues?.push(issue);
                            }
                            if (!dataset.issues) {
                                dataset.issues = valueDataset.issues;
                            }
                            if (config2.abortEarly) {
                                dataset.typed = false;
                                break;
                            }
                        }
                        if (!valueDataset.typed) {
                            dataset.typed = false;
                        }
                        dataset.value[key] = valueDataset.value;
                    } else if (valueSchema.fallback !== void 0) {
                        dataset.value[key] = getFallback(valueSchema);
                    } else if (valueSchema.type !== "exact_optional" && valueSchema.type !== "optional" && valueSchema.type !== "nullish") {
                        _addIssue(this, "key", dataset, config2, {
                            input: void 0,
                            expected: `"${key}"`,
                            path: [
                                {
                                    type: "object",
                                    origin: "key",
                                    input,
                                    key,
                                    // @ts-expect-error
                                    value: input[key]
                                }
                            ]
                        });
                        if (config2.abortEarly) {
                            break;
                        }
                    }
                }
                if (!dataset.issues || !config2.abortEarly) {
                    for(const key in input){
                        if (_isValidObjectKey(input, key) && !(key in this.entries)) {
                            const valueDataset = this.rest["~run"](// @ts-expect-error
                            {
                                value: input[key]
                            }, config2);
                            if (valueDataset.issues) {
                                const pathItem = {
                                    type: "object",
                                    origin: "value",
                                    input,
                                    key,
                                    // @ts-expect-error
                                    value: input[key]
                                };
                                for (const issue of valueDataset.issues){
                                    if (issue.path) {
                                        issue.path.unshift(pathItem);
                                    } else {
                                        issue.path = [
                                            pathItem
                                        ];
                                    }
                                    dataset.issues?.push(issue);
                                }
                                if (!dataset.issues) {
                                    dataset.issues = valueDataset.issues;
                                }
                                if (config2.abortEarly) {
                                    dataset.typed = false;
                                    break;
                                }
                            }
                            if (!valueDataset.typed) {
                                dataset.typed = false;
                            }
                            dataset.value[key] = valueDataset.value;
                        }
                    }
                }
            } else {
                _addIssue(this, "type", dataset, config2);
            }
            return dataset;
        }
    };
}
// src/schemas/objectWithRest/objectWithRestAsync.ts
// @__NO_SIDE_EFFECTS__
function objectWithRestAsync(entries2, rest, message2) {
    return {
        kind: "schema",
        type: "object_with_rest",
        reference: objectWithRestAsync,
        expects: "Object",
        async: true,
        entries: entries2,
        rest,
        message: message2,
        get "~standard" () {
            return _getStandardProps(this);
        },
        async "~run" (dataset, config2) {
            const input = dataset.value;
            if (input && typeof input === "object") {
                dataset.typed = true;
                dataset.value = {};
                const [normalDatasets, restDatasets] = await Promise.all([
                    // If key is present or its an optional schema with a default value,
                    // parse input of key or default value asynchronously
                    Promise.all(Object.entries(this.entries).map(async ([key, valueSchema])=>{
                        if (key in input || (valueSchema.type === "exact_optional" || valueSchema.type === "optional" || valueSchema.type === "nullish") && // @ts-expect-error
                        valueSchema.default !== void 0) {
                            const value2 = key in input ? // @ts-expect-error
                            input[key] : await getDefault(valueSchema);
                            return [
                                key,
                                value2,
                                valueSchema,
                                await valueSchema["~run"]({
                                    value: value2
                                }, config2)
                            ];
                        }
                        return [
                            key,
                            // @ts-expect-error
                            input[key],
                            valueSchema,
                            null
                        ];
                    })),
                    // Parse other entries with rest schema asynchronously
                    // Hint: We exclude specific keys for security reasons
                    Promise.all(Object.entries(input).filter(([key])=>_isValidObjectKey(input, key) && !(key in this.entries)).map(async ([key, value2])=>[
                            key,
                            value2,
                            await this.rest["~run"]({
                                value: value2
                            }, config2)
                        ]))
                ]);
                for (const [key, value2, valueSchema, valueDataset] of normalDatasets){
                    if (valueDataset) {
                        if (valueDataset.issues) {
                            const pathItem = {
                                type: "object",
                                origin: "value",
                                input,
                                key,
                                value: value2
                            };
                            for (const issue of valueDataset.issues){
                                if (issue.path) {
                                    issue.path.unshift(pathItem);
                                } else {
                                    issue.path = [
                                        pathItem
                                    ];
                                }
                                dataset.issues?.push(issue);
                            }
                            if (!dataset.issues) {
                                dataset.issues = valueDataset.issues;
                            }
                            if (config2.abortEarly) {
                                dataset.typed = false;
                                break;
                            }
                        }
                        if (!valueDataset.typed) {
                            dataset.typed = false;
                        }
                        dataset.value[key] = valueDataset.value;
                    } else if (valueSchema.fallback !== void 0) {
                        dataset.value[key] = await getFallback(valueSchema);
                    } else if (valueSchema.type !== "exact_optional" && valueSchema.type !== "optional" && valueSchema.type !== "nullish") {
                        _addIssue(this, "key", dataset, config2, {
                            input: void 0,
                            expected: `"${key}"`,
                            path: [
                                {
                                    type: "object",
                                    origin: "key",
                                    input,
                                    key,
                                    value: value2
                                }
                            ]
                        });
                        if (config2.abortEarly) {
                            break;
                        }
                    }
                }
                if (!dataset.issues || !config2.abortEarly) {
                    for (const [key, value2, valueDataset] of restDatasets){
                        if (valueDataset.issues) {
                            const pathItem = {
                                type: "object",
                                origin: "value",
                                input,
                                key,
                                value: value2
                            };
                            for (const issue of valueDataset.issues){
                                if (issue.path) {
                                    issue.path.unshift(pathItem);
                                } else {
                                    issue.path = [
                                        pathItem
                                    ];
                                }
                                dataset.issues?.push(issue);
                            }
                            if (!dataset.issues) {
                                dataset.issues = valueDataset.issues;
                            }
                            if (config2.abortEarly) {
                                dataset.typed = false;
                                break;
                            }
                        }
                        if (!valueDataset.typed) {
                            dataset.typed = false;
                        }
                        dataset.value[key] = valueDataset.value;
                    }
                }
            } else {
                _addIssue(this, "type", dataset, config2);
            }
            return dataset;
        }
    };
}
// src/schemas/optional/optional.ts
// @__NO_SIDE_EFFECTS__
function optional(wrapped, default_) {
    return {
        kind: "schema",
        type: "optional",
        reference: optional,
        expects: `(${wrapped.expects} | undefined)`,
        async: false,
        wrapped,
        default: default_,
        get "~standard" () {
            return _getStandardProps(this);
        },
        "~run" (dataset, config2) {
            if (dataset.value === void 0) {
                if (this.default !== void 0) {
                    dataset.value = getDefault(this, dataset, config2);
                }
                if (dataset.value === void 0) {
                    dataset.typed = true;
                    return dataset;
                }
            }
            return this.wrapped["~run"](dataset, config2);
        }
    };
}
// src/schemas/optional/optionalAsync.ts
// @__NO_SIDE_EFFECTS__
function optionalAsync(wrapped, default_) {
    return {
        kind: "schema",
        type: "optional",
        reference: optionalAsync,
        expects: `(${wrapped.expects} | undefined)`,
        async: true,
        wrapped,
        default: default_,
        get "~standard" () {
            return _getStandardProps(this);
        },
        async "~run" (dataset, config2) {
            if (dataset.value === void 0) {
                if (this.default !== void 0) {
                    dataset.value = await getDefault(this, dataset, config2);
                }
                if (dataset.value === void 0) {
                    dataset.typed = true;
                    return dataset;
                }
            }
            return this.wrapped["~run"](dataset, config2);
        }
    };
}
// src/schemas/picklist/picklist.ts
// @__NO_SIDE_EFFECTS__
function picklist(options, message2) {
    return {
        kind: "schema",
        type: "picklist",
        reference: picklist,
        expects: _joinExpects(options.map(_stringify), "|"),
        async: false,
        options,
        message: message2,
        get "~standard" () {
            return _getStandardProps(this);
        },
        "~run" (dataset, config2) {
            if (this.options.includes(dataset.value)) {
                dataset.typed = true;
            } else {
                _addIssue(this, "type", dataset, config2);
            }
            return dataset;
        }
    };
}
// src/schemas/promise/promise.ts
// @__NO_SIDE_EFFECTS__
function promise(message2) {
    return {
        kind: "schema",
        type: "promise",
        reference: promise,
        expects: "Promise",
        async: false,
        message: message2,
        get "~standard" () {
            return _getStandardProps(this);
        },
        "~run" (dataset, config2) {
            if (dataset.value instanceof Promise) {
                dataset.typed = true;
            } else {
                _addIssue(this, "type", dataset, config2);
            }
            return dataset;
        }
    };
}
// src/schemas/record/record.ts
// @__NO_SIDE_EFFECTS__
function record(key, value2, message2) {
    return {
        kind: "schema",
        type: "record",
        reference: record,
        expects: "Object",
        async: false,
        key,
        value: value2,
        message: message2,
        get "~standard" () {
            return _getStandardProps(this);
        },
        "~run" (dataset, config2) {
            const input = dataset.value;
            if (input && typeof input === "object") {
                dataset.typed = true;
                dataset.value = {};
                for(const entryKey in input){
                    if (_isValidObjectKey(input, entryKey)) {
                        const entryValue = input[entryKey];
                        const keyDataset = this.key["~run"]({
                            value: entryKey
                        }, config2);
                        if (keyDataset.issues) {
                            const pathItem = {
                                type: "object",
                                origin: "key",
                                input,
                                key: entryKey,
                                value: entryValue
                            };
                            for (const issue of keyDataset.issues){
                                issue.path = [
                                    pathItem
                                ];
                                dataset.issues?.push(issue);
                            }
                            if (!dataset.issues) {
                                dataset.issues = keyDataset.issues;
                            }
                            if (config2.abortEarly) {
                                dataset.typed = false;
                                break;
                            }
                        }
                        const valueDataset = this.value["~run"]({
                            value: entryValue
                        }, config2);
                        if (valueDataset.issues) {
                            const pathItem = {
                                type: "object",
                                origin: "value",
                                input,
                                key: entryKey,
                                value: entryValue
                            };
                            for (const issue of valueDataset.issues){
                                if (issue.path) {
                                    issue.path.unshift(pathItem);
                                } else {
                                    issue.path = [
                                        pathItem
                                    ];
                                }
                                dataset.issues?.push(issue);
                            }
                            if (!dataset.issues) {
                                dataset.issues = valueDataset.issues;
                            }
                            if (config2.abortEarly) {
                                dataset.typed = false;
                                break;
                            }
                        }
                        if (!keyDataset.typed || !valueDataset.typed) {
                            dataset.typed = false;
                        }
                        if (keyDataset.typed) {
                            dataset.value[keyDataset.value] = valueDataset.value;
                        }
                    }
                }
            } else {
                _addIssue(this, "type", dataset, config2);
            }
            return dataset;
        }
    };
}
// src/schemas/record/recordAsync.ts
// @__NO_SIDE_EFFECTS__
function recordAsync(key, value2, message2) {
    return {
        kind: "schema",
        type: "record",
        reference: recordAsync,
        expects: "Object",
        async: true,
        key,
        value: value2,
        message: message2,
        get "~standard" () {
            return _getStandardProps(this);
        },
        async "~run" (dataset, config2) {
            const input = dataset.value;
            if (input && typeof input === "object") {
                dataset.typed = true;
                dataset.value = {};
                const datasets = await Promise.all(Object.entries(input).filter(([key2])=>_isValidObjectKey(input, key2)).map(([entryKey, entryValue])=>Promise.all([
                        entryKey,
                        entryValue,
                        this.key["~run"]({
                            value: entryKey
                        }, config2),
                        this.value["~run"]({
                            value: entryValue
                        }, config2)
                    ])));
                for (const [entryKey, entryValue, keyDataset, valueDataset] of datasets){
                    if (keyDataset.issues) {
                        const pathItem = {
                            type: "object",
                            origin: "key",
                            input,
                            key: entryKey,
                            value: entryValue
                        };
                        for (const issue of keyDataset.issues){
                            issue.path = [
                                pathItem
                            ];
                            dataset.issues?.push(issue);
                        }
                        if (!dataset.issues) {
                            dataset.issues = keyDataset.issues;
                        }
                        if (config2.abortEarly) {
                            dataset.typed = false;
                            break;
                        }
                    }
                    if (valueDataset.issues) {
                        const pathItem = {
                            type: "object",
                            origin: "value",
                            input,
                            key: entryKey,
                            value: entryValue
                        };
                        for (const issue of valueDataset.issues){
                            if (issue.path) {
                                issue.path.unshift(pathItem);
                            } else {
                                issue.path = [
                                    pathItem
                                ];
                            }
                            dataset.issues?.push(issue);
                        }
                        if (!dataset.issues) {
                            dataset.issues = valueDataset.issues;
                        }
                        if (config2.abortEarly) {
                            dataset.typed = false;
                            break;
                        }
                    }
                    if (!keyDataset.typed || !valueDataset.typed) {
                        dataset.typed = false;
                    }
                    if (keyDataset.typed) {
                        dataset.value[keyDataset.value] = valueDataset.value;
                    }
                }
            } else {
                _addIssue(this, "type", dataset, config2);
            }
            return dataset;
        }
    };
}
// src/schemas/set/set.ts
// @__NO_SIDE_EFFECTS__
function set(value2, message2) {
    return {
        kind: "schema",
        type: "set",
        reference: set,
        expects: "Set",
        async: false,
        value: value2,
        message: message2,
        get "~standard" () {
            return _getStandardProps(this);
        },
        "~run" (dataset, config2) {
            const input = dataset.value;
            if (input instanceof Set) {
                dataset.typed = true;
                dataset.value = /* @__PURE__ */ new Set();
                for (const inputValue of input){
                    const valueDataset = this.value["~run"]({
                        value: inputValue
                    }, config2);
                    if (valueDataset.issues) {
                        const pathItem = {
                            type: "set",
                            origin: "value",
                            input,
                            key: null,
                            value: inputValue
                        };
                        for (const issue of valueDataset.issues){
                            if (issue.path) {
                                issue.path.unshift(pathItem);
                            } else {
                                issue.path = [
                                    pathItem
                                ];
                            }
                            dataset.issues?.push(issue);
                        }
                        if (!dataset.issues) {
                            dataset.issues = valueDataset.issues;
                        }
                        if (config2.abortEarly) {
                            dataset.typed = false;
                            break;
                        }
                    }
                    if (!valueDataset.typed) {
                        dataset.typed = false;
                    }
                    dataset.value.add(valueDataset.value);
                }
            } else {
                _addIssue(this, "type", dataset, config2);
            }
            return dataset;
        }
    };
}
// src/schemas/set/setAsync.ts
// @__NO_SIDE_EFFECTS__
function setAsync(value2, message2) {
    return {
        kind: "schema",
        type: "set",
        reference: setAsync,
        expects: "Set",
        async: true,
        value: value2,
        message: message2,
        get "~standard" () {
            return _getStandardProps(this);
        },
        async "~run" (dataset, config2) {
            const input = dataset.value;
            if (input instanceof Set) {
                dataset.typed = true;
                dataset.value = /* @__PURE__ */ new Set();
                const valueDatasets = await Promise.all([
                    ...input
                ].map(async (inputValue)=>[
                        inputValue,
                        await this.value["~run"]({
                            value: inputValue
                        }, config2)
                    ]));
                for (const [inputValue, valueDataset] of valueDatasets){
                    if (valueDataset.issues) {
                        const pathItem = {
                            type: "set",
                            origin: "value",
                            input,
                            key: null,
                            value: inputValue
                        };
                        for (const issue of valueDataset.issues){
                            if (issue.path) {
                                issue.path.unshift(pathItem);
                            } else {
                                issue.path = [
                                    pathItem
                                ];
                            }
                            dataset.issues?.push(issue);
                        }
                        if (!dataset.issues) {
                            dataset.issues = valueDataset.issues;
                        }
                        if (config2.abortEarly) {
                            dataset.typed = false;
                            break;
                        }
                    }
                    if (!valueDataset.typed) {
                        dataset.typed = false;
                    }
                    dataset.value.add(valueDataset.value);
                }
            } else {
                _addIssue(this, "type", dataset, config2);
            }
            return dataset;
        }
    };
}
// src/schemas/strictObject/strictObject.ts
// @__NO_SIDE_EFFECTS__
function strictObject(entries2, message2) {
    return {
        kind: "schema",
        type: "strict_object",
        reference: strictObject,
        expects: "Object",
        async: false,
        entries: entries2,
        message: message2,
        get "~standard" () {
            return _getStandardProps(this);
        },
        "~run" (dataset, config2) {
            const input = dataset.value;
            if (input && typeof input === "object") {
                dataset.typed = true;
                dataset.value = {};
                for(const key in this.entries){
                    const valueSchema = this.entries[key];
                    if (key in input || (valueSchema.type === "exact_optional" || valueSchema.type === "optional" || valueSchema.type === "nullish") && // @ts-expect-error
                    valueSchema.default !== void 0) {
                        const value2 = key in input ? // @ts-expect-error
                        input[key] : getDefault(valueSchema);
                        const valueDataset = valueSchema["~run"]({
                            value: value2
                        }, config2);
                        if (valueDataset.issues) {
                            const pathItem = {
                                type: "object",
                                origin: "value",
                                input,
                                key,
                                value: value2
                            };
                            for (const issue of valueDataset.issues){
                                if (issue.path) {
                                    issue.path.unshift(pathItem);
                                } else {
                                    issue.path = [
                                        pathItem
                                    ];
                                }
                                dataset.issues?.push(issue);
                            }
                            if (!dataset.issues) {
                                dataset.issues = valueDataset.issues;
                            }
                            if (config2.abortEarly) {
                                dataset.typed = false;
                                break;
                            }
                        }
                        if (!valueDataset.typed) {
                            dataset.typed = false;
                        }
                        dataset.value[key] = valueDataset.value;
                    } else if (valueSchema.fallback !== void 0) {
                        dataset.value[key] = getFallback(valueSchema);
                    } else if (valueSchema.type !== "exact_optional" && valueSchema.type !== "optional" && valueSchema.type !== "nullish") {
                        _addIssue(this, "key", dataset, config2, {
                            input: void 0,
                            expected: `"${key}"`,
                            path: [
                                {
                                    type: "object",
                                    origin: "key",
                                    input,
                                    key,
                                    // @ts-expect-error
                                    value: input[key]
                                }
                            ]
                        });
                        if (config2.abortEarly) {
                            break;
                        }
                    }
                }
                if (!dataset.issues || !config2.abortEarly) {
                    for(const key in input){
                        if (!(key in this.entries)) {
                            _addIssue(this, "key", dataset, config2, {
                                input: key,
                                expected: "never",
                                path: [
                                    {
                                        type: "object",
                                        origin: "key",
                                        input,
                                        key,
                                        // @ts-expect-error
                                        value: input[key]
                                    }
                                ]
                            });
                            break;
                        }
                    }
                }
            } else {
                _addIssue(this, "type", dataset, config2);
            }
            return dataset;
        }
    };
}
// src/schemas/strictObject/strictObjectAsync.ts
// @__NO_SIDE_EFFECTS__
function strictObjectAsync(entries2, message2) {
    return {
        kind: "schema",
        type: "strict_object",
        reference: strictObjectAsync,
        expects: "Object",
        async: true,
        entries: entries2,
        message: message2,
        get "~standard" () {
            return _getStandardProps(this);
        },
        async "~run" (dataset, config2) {
            const input = dataset.value;
            if (input && typeof input === "object") {
                dataset.typed = true;
                dataset.value = {};
                const valueDatasets = await Promise.all(Object.entries(this.entries).map(async ([key, valueSchema])=>{
                    if (key in input || (valueSchema.type === "exact_optional" || valueSchema.type === "optional" || valueSchema.type === "nullish") && // @ts-expect-error
                    valueSchema.default !== void 0) {
                        const value2 = key in input ? // @ts-expect-error
                        input[key] : await getDefault(valueSchema);
                        return [
                            key,
                            value2,
                            valueSchema,
                            await valueSchema["~run"]({
                                value: value2
                            }, config2)
                        ];
                    }
                    return [
                        key,
                        // @ts-expect-error
                        input[key],
                        valueSchema,
                        null
                    ];
                }));
                for (const [key, value2, valueSchema, valueDataset] of valueDatasets){
                    if (valueDataset) {
                        if (valueDataset.issues) {
                            const pathItem = {
                                type: "object",
                                origin: "value",
                                input,
                                key,
                                value: value2
                            };
                            for (const issue of valueDataset.issues){
                                if (issue.path) {
                                    issue.path.unshift(pathItem);
                                } else {
                                    issue.path = [
                                        pathItem
                                    ];
                                }
                                dataset.issues?.push(issue);
                            }
                            if (!dataset.issues) {
                                dataset.issues = valueDataset.issues;
                            }
                            if (config2.abortEarly) {
                                dataset.typed = false;
                                break;
                            }
                        }
                        if (!valueDataset.typed) {
                            dataset.typed = false;
                        }
                        dataset.value[key] = valueDataset.value;
                    } else if (valueSchema.fallback !== void 0) {
                        dataset.value[key] = await getFallback(valueSchema);
                    } else if (valueSchema.type !== "exact_optional" && valueSchema.type !== "optional" && valueSchema.type !== "nullish") {
                        _addIssue(this, "key", dataset, config2, {
                            input: void 0,
                            expected: `"${key}"`,
                            path: [
                                {
                                    type: "object",
                                    origin: "key",
                                    input,
                                    key,
                                    value: value2
                                }
                            ]
                        });
                        if (config2.abortEarly) {
                            break;
                        }
                    }
                }
                if (!dataset.issues || !config2.abortEarly) {
                    for(const key in input){
                        if (!(key in this.entries)) {
                            _addIssue(this, "key", dataset, config2, {
                                input: key,
                                expected: "never",
                                path: [
                                    {
                                        type: "object",
                                        origin: "key",
                                        input,
                                        key,
                                        // @ts-expect-error
                                        value: input[key]
                                    }
                                ]
                            });
                            break;
                        }
                    }
                }
            } else {
                _addIssue(this, "type", dataset, config2);
            }
            return dataset;
        }
    };
}
// src/schemas/strictTuple/strictTuple.ts
// @__NO_SIDE_EFFECTS__
function strictTuple(items, message2) {
    return {
        kind: "schema",
        type: "strict_tuple",
        reference: strictTuple,
        expects: "Array",
        async: false,
        items,
        message: message2,
        get "~standard" () {
            return _getStandardProps(this);
        },
        "~run" (dataset, config2) {
            const input = dataset.value;
            if (Array.isArray(input)) {
                dataset.typed = true;
                dataset.value = [];
                for(let key = 0; key < this.items.length; key++){
                    const value2 = input[key];
                    const itemDataset = this.items[key]["~run"]({
                        value: value2
                    }, config2);
                    if (itemDataset.issues) {
                        const pathItem = {
                            type: "array",
                            origin: "value",
                            input,
                            key,
                            value: value2
                        };
                        for (const issue of itemDataset.issues){
                            if (issue.path) {
                                issue.path.unshift(pathItem);
                            } else {
                                issue.path = [
                                    pathItem
                                ];
                            }
                            dataset.issues?.push(issue);
                        }
                        if (!dataset.issues) {
                            dataset.issues = itemDataset.issues;
                        }
                        if (config2.abortEarly) {
                            dataset.typed = false;
                            break;
                        }
                    }
                    if (!itemDataset.typed) {
                        dataset.typed = false;
                    }
                    dataset.value.push(itemDataset.value);
                }
                if (!(dataset.issues && config2.abortEarly) && this.items.length < input.length) {
                    _addIssue(this, "type", dataset, config2, {
                        input: input[this.items.length],
                        expected: "never",
                        path: [
                            {
                                type: "array",
                                origin: "value",
                                input,
                                key: this.items.length,
                                value: input[this.items.length]
                            }
                        ]
                    });
                }
            } else {
                _addIssue(this, "type", dataset, config2);
            }
            return dataset;
        }
    };
}
// src/schemas/strictTuple/strictTupleAsync.ts
// @__NO_SIDE_EFFECTS__
function strictTupleAsync(items, message2) {
    return {
        kind: "schema",
        type: "strict_tuple",
        reference: strictTupleAsync,
        expects: "Array",
        async: true,
        items,
        message: message2,
        get "~standard" () {
            return _getStandardProps(this);
        },
        async "~run" (dataset, config2) {
            const input = dataset.value;
            if (Array.isArray(input)) {
                dataset.typed = true;
                dataset.value = [];
                const itemDatasets = await Promise.all(this.items.map(async (item, key)=>{
                    const value2 = input[key];
                    return [
                        key,
                        value2,
                        await item["~run"]({
                            value: value2
                        }, config2)
                    ];
                }));
                for (const [key, value2, itemDataset] of itemDatasets){
                    if (itemDataset.issues) {
                        const pathItem = {
                            type: "array",
                            origin: "value",
                            input,
                            key,
                            value: value2
                        };
                        for (const issue of itemDataset.issues){
                            if (issue.path) {
                                issue.path.unshift(pathItem);
                            } else {
                                issue.path = [
                                    pathItem
                                ];
                            }
                            dataset.issues?.push(issue);
                        }
                        if (!dataset.issues) {
                            dataset.issues = itemDataset.issues;
                        }
                        if (config2.abortEarly) {
                            dataset.typed = false;
                            break;
                        }
                    }
                    if (!itemDataset.typed) {
                        dataset.typed = false;
                    }
                    dataset.value.push(itemDataset.value);
                }
                if (!(dataset.issues && config2.abortEarly) && this.items.length < input.length) {
                    _addIssue(this, "type", dataset, config2, {
                        input: input[this.items.length],
                        expected: "never",
                        path: [
                            {
                                type: "array",
                                origin: "value",
                                input,
                                key: this.items.length,
                                value: input[this.items.length]
                            }
                        ]
                    });
                }
            } else {
                _addIssue(this, "type", dataset, config2);
            }
            return dataset;
        }
    };
}
// src/schemas/string/string.ts
// @__NO_SIDE_EFFECTS__
function string(message2) {
    return {
        kind: "schema",
        type: "string",
        reference: string,
        expects: "string",
        async: false,
        message: message2,
        get "~standard" () {
            return _getStandardProps(this);
        },
        "~run" (dataset, config2) {
            if (typeof dataset.value === "string") {
                dataset.typed = true;
            } else {
                _addIssue(this, "type", dataset, config2);
            }
            return dataset;
        }
    };
}
// src/schemas/symbol/symbol.ts
// @__NO_SIDE_EFFECTS__
function symbol(message2) {
    return {
        kind: "schema",
        type: "symbol",
        reference: symbol,
        expects: "symbol",
        async: false,
        message: message2,
        get "~standard" () {
            return _getStandardProps(this);
        },
        "~run" (dataset, config2) {
            if (typeof dataset.value === "symbol") {
                dataset.typed = true;
            } else {
                _addIssue(this, "type", dataset, config2);
            }
            return dataset;
        }
    };
}
// src/schemas/tuple/tuple.ts
// @__NO_SIDE_EFFECTS__
function tuple(items, message2) {
    return {
        kind: "schema",
        type: "tuple",
        reference: tuple,
        expects: "Array",
        async: false,
        items,
        message: message2,
        get "~standard" () {
            return _getStandardProps(this);
        },
        "~run" (dataset, config2) {
            const input = dataset.value;
            if (Array.isArray(input)) {
                dataset.typed = true;
                dataset.value = [];
                for(let key = 0; key < this.items.length; key++){
                    const value2 = input[key];
                    const itemDataset = this.items[key]["~run"]({
                        value: value2
                    }, config2);
                    if (itemDataset.issues) {
                        const pathItem = {
                            type: "array",
                            origin: "value",
                            input,
                            key,
                            value: value2
                        };
                        for (const issue of itemDataset.issues){
                            if (issue.path) {
                                issue.path.unshift(pathItem);
                            } else {
                                issue.path = [
                                    pathItem
                                ];
                            }
                            dataset.issues?.push(issue);
                        }
                        if (!dataset.issues) {
                            dataset.issues = itemDataset.issues;
                        }
                        if (config2.abortEarly) {
                            dataset.typed = false;
                            break;
                        }
                    }
                    if (!itemDataset.typed) {
                        dataset.typed = false;
                    }
                    dataset.value.push(itemDataset.value);
                }
            } else {
                _addIssue(this, "type", dataset, config2);
            }
            return dataset;
        }
    };
}
// src/schemas/tuple/tupleAsync.ts
// @__NO_SIDE_EFFECTS__
function tupleAsync(items, message2) {
    return {
        kind: "schema",
        type: "tuple",
        reference: tupleAsync,
        expects: "Array",
        async: true,
        items,
        message: message2,
        get "~standard" () {
            return _getStandardProps(this);
        },
        async "~run" (dataset, config2) {
            const input = dataset.value;
            if (Array.isArray(input)) {
                dataset.typed = true;
                dataset.value = [];
                const itemDatasets = await Promise.all(this.items.map(async (item, key)=>{
                    const value2 = input[key];
                    return [
                        key,
                        value2,
                        await item["~run"]({
                            value: value2
                        }, config2)
                    ];
                }));
                for (const [key, value2, itemDataset] of itemDatasets){
                    if (itemDataset.issues) {
                        const pathItem = {
                            type: "array",
                            origin: "value",
                            input,
                            key,
                            value: value2
                        };
                        for (const issue of itemDataset.issues){
                            if (issue.path) {
                                issue.path.unshift(pathItem);
                            } else {
                                issue.path = [
                                    pathItem
                                ];
                            }
                            dataset.issues?.push(issue);
                        }
                        if (!dataset.issues) {
                            dataset.issues = itemDataset.issues;
                        }
                        if (config2.abortEarly) {
                            dataset.typed = false;
                            break;
                        }
                    }
                    if (!itemDataset.typed) {
                        dataset.typed = false;
                    }
                    dataset.value.push(itemDataset.value);
                }
            } else {
                _addIssue(this, "type", dataset, config2);
            }
            return dataset;
        }
    };
}
// src/schemas/tupleWithRest/tupleWithRest.ts
// @__NO_SIDE_EFFECTS__
function tupleWithRest(items, rest, message2) {
    return {
        kind: "schema",
        type: "tuple_with_rest",
        reference: tupleWithRest,
        expects: "Array",
        async: false,
        items,
        rest,
        message: message2,
        get "~standard" () {
            return _getStandardProps(this);
        },
        "~run" (dataset, config2) {
            const input = dataset.value;
            if (Array.isArray(input)) {
                dataset.typed = true;
                dataset.value = [];
                for(let key = 0; key < this.items.length; key++){
                    const value2 = input[key];
                    const itemDataset = this.items[key]["~run"]({
                        value: value2
                    }, config2);
                    if (itemDataset.issues) {
                        const pathItem = {
                            type: "array",
                            origin: "value",
                            input,
                            key,
                            value: value2
                        };
                        for (const issue of itemDataset.issues){
                            if (issue.path) {
                                issue.path.unshift(pathItem);
                            } else {
                                issue.path = [
                                    pathItem
                                ];
                            }
                            dataset.issues?.push(issue);
                        }
                        if (!dataset.issues) {
                            dataset.issues = itemDataset.issues;
                        }
                        if (config2.abortEarly) {
                            dataset.typed = false;
                            break;
                        }
                    }
                    if (!itemDataset.typed) {
                        dataset.typed = false;
                    }
                    dataset.value.push(itemDataset.value);
                }
                if (!dataset.issues || !config2.abortEarly) {
                    for(let key = this.items.length; key < input.length; key++){
                        const value2 = input[key];
                        const itemDataset = this.rest["~run"]({
                            value: value2
                        }, config2);
                        if (itemDataset.issues) {
                            const pathItem = {
                                type: "array",
                                origin: "value",
                                input,
                                key,
                                value: value2
                            };
                            for (const issue of itemDataset.issues){
                                if (issue.path) {
                                    issue.path.unshift(pathItem);
                                } else {
                                    issue.path = [
                                        pathItem
                                    ];
                                }
                                dataset.issues?.push(issue);
                            }
                            if (!dataset.issues) {
                                dataset.issues = itemDataset.issues;
                            }
                            if (config2.abortEarly) {
                                dataset.typed = false;
                                break;
                            }
                        }
                        if (!itemDataset.typed) {
                            dataset.typed = false;
                        }
                        dataset.value.push(itemDataset.value);
                    }
                }
            } else {
                _addIssue(this, "type", dataset, config2);
            }
            return dataset;
        }
    };
}
// src/schemas/tupleWithRest/tupleWithRestAsync.ts
// @__NO_SIDE_EFFECTS__
function tupleWithRestAsync(items, rest, message2) {
    return {
        kind: "schema",
        type: "tuple_with_rest",
        reference: tupleWithRestAsync,
        expects: "Array",
        async: true,
        items,
        rest,
        message: message2,
        get "~standard" () {
            return _getStandardProps(this);
        },
        async "~run" (dataset, config2) {
            const input = dataset.value;
            if (Array.isArray(input)) {
                dataset.typed = true;
                dataset.value = [];
                const [normalDatasets, restDatasets] = await Promise.all([
                    // Parse schema of each normal item
                    Promise.all(this.items.map(async (item, key)=>{
                        const value2 = input[key];
                        return [
                            key,
                            value2,
                            await item["~run"]({
                                value: value2
                            }, config2)
                        ];
                    })),
                    // Parse other items with rest schema
                    Promise.all(input.slice(this.items.length).map(async (value2, key)=>{
                        return [
                            key + this.items.length,
                            value2,
                            await this.rest["~run"]({
                                value: value2
                            }, config2)
                        ];
                    }))
                ]);
                for (const [key, value2, itemDataset] of normalDatasets){
                    if (itemDataset.issues) {
                        const pathItem = {
                            type: "array",
                            origin: "value",
                            input,
                            key,
                            value: value2
                        };
                        for (const issue of itemDataset.issues){
                            if (issue.path) {
                                issue.path.unshift(pathItem);
                            } else {
                                issue.path = [
                                    pathItem
                                ];
                            }
                            dataset.issues?.push(issue);
                        }
                        if (!dataset.issues) {
                            dataset.issues = itemDataset.issues;
                        }
                        if (config2.abortEarly) {
                            dataset.typed = false;
                            break;
                        }
                    }
                    if (!itemDataset.typed) {
                        dataset.typed = false;
                    }
                    dataset.value.push(itemDataset.value);
                }
                if (!dataset.issues || !config2.abortEarly) {
                    for (const [key, value2, itemDataset] of restDatasets){
                        if (itemDataset.issues) {
                            const pathItem = {
                                type: "array",
                                origin: "value",
                                input,
                                key,
                                value: value2
                            };
                            for (const issue of itemDataset.issues){
                                if (issue.path) {
                                    issue.path.unshift(pathItem);
                                } else {
                                    issue.path = [
                                        pathItem
                                    ];
                                }
                                dataset.issues?.push(issue);
                            }
                            if (!dataset.issues) {
                                dataset.issues = itemDataset.issues;
                            }
                            if (config2.abortEarly) {
                                dataset.typed = false;
                                break;
                            }
                        }
                        if (!itemDataset.typed) {
                            dataset.typed = false;
                        }
                        dataset.value.push(itemDataset.value);
                    }
                }
            } else {
                _addIssue(this, "type", dataset, config2);
            }
            return dataset;
        }
    };
}
// src/schemas/undefined/undefined.ts
// @__NO_SIDE_EFFECTS__
function undefined_(message2) {
    return {
        kind: "schema",
        type: "undefined",
        reference: undefined_,
        expects: "undefined",
        async: false,
        message: message2,
        get "~standard" () {
            return _getStandardProps(this);
        },
        "~run" (dataset, config2) {
            if (dataset.value === void 0) {
                dataset.typed = true;
            } else {
                _addIssue(this, "type", dataset, config2);
            }
            return dataset;
        }
    };
}
// src/schemas/undefinedable/undefinedable.ts
// @__NO_SIDE_EFFECTS__
function undefinedable(wrapped, default_) {
    return {
        kind: "schema",
        type: "undefinedable",
        reference: undefinedable,
        expects: `(${wrapped.expects} | undefined)`,
        async: false,
        wrapped,
        default: default_,
        get "~standard" () {
            return _getStandardProps(this);
        },
        "~run" (dataset, config2) {
            if (dataset.value === void 0) {
                if (this.default !== void 0) {
                    dataset.value = getDefault(this, dataset, config2);
                }
                if (dataset.value === void 0) {
                    dataset.typed = true;
                    return dataset;
                }
            }
            return this.wrapped["~run"](dataset, config2);
        }
    };
}
// src/schemas/undefinedable/undefinedableAsync.ts
// @__NO_SIDE_EFFECTS__
function undefinedableAsync(wrapped, default_) {
    return {
        kind: "schema",
        type: "undefinedable",
        reference: undefinedableAsync,
        expects: `(${wrapped.expects} | undefined)`,
        async: true,
        wrapped,
        default: default_,
        get "~standard" () {
            return _getStandardProps(this);
        },
        async "~run" (dataset, config2) {
            if (dataset.value === void 0) {
                if (this.default !== void 0) {
                    dataset.value = await getDefault(this, dataset, config2);
                }
                if (dataset.value === void 0) {
                    dataset.typed = true;
                    return dataset;
                }
            }
            return this.wrapped["~run"](dataset, config2);
        }
    };
}
// src/schemas/union/utils/_subIssues/_subIssues.ts
// @__NO_SIDE_EFFECTS__
function _subIssues(datasets) {
    let issues;
    if (datasets) {
        for (const dataset of datasets){
            if (issues) {
                issues.push(...dataset.issues);
            } else {
                issues = dataset.issues;
            }
        }
    }
    return issues;
}
// src/schemas/union/union.ts
// @__NO_SIDE_EFFECTS__
function union(options, message2) {
    return {
        kind: "schema",
        type: "union",
        reference: union,
        expects: _joinExpects(options.map((option)=>option.expects), "|"),
        async: false,
        options,
        message: message2,
        get "~standard" () {
            return _getStandardProps(this);
        },
        "~run" (dataset, config2) {
            let validDataset;
            let typedDatasets;
            let untypedDatasets;
            for (const schema of this.options){
                const optionDataset = schema["~run"]({
                    value: dataset.value
                }, config2);
                if (optionDataset.typed) {
                    if (optionDataset.issues) {
                        if (typedDatasets) {
                            typedDatasets.push(optionDataset);
                        } else {
                            typedDatasets = [
                                optionDataset
                            ];
                        }
                    } else {
                        validDataset = optionDataset;
                        break;
                    }
                } else {
                    if (untypedDatasets) {
                        untypedDatasets.push(optionDataset);
                    } else {
                        untypedDatasets = [
                            optionDataset
                        ];
                    }
                }
            }
            if (validDataset) {
                return validDataset;
            }
            if (typedDatasets) {
                if (typedDatasets.length === 1) {
                    return typedDatasets[0];
                }
                _addIssue(this, "type", dataset, config2, {
                    issues: _subIssues(typedDatasets)
                });
                dataset.typed = true;
            } else if (untypedDatasets?.length === 1) {
                return untypedDatasets[0];
            } else {
                _addIssue(this, "type", dataset, config2, {
                    issues: _subIssues(untypedDatasets)
                });
            }
            return dataset;
        }
    };
}
// src/schemas/union/unionAsync.ts
// @__NO_SIDE_EFFECTS__
function unionAsync(options, message2) {
    return {
        kind: "schema",
        type: "union",
        reference: unionAsync,
        expects: _joinExpects(options.map((option)=>option.expects), "|"),
        async: true,
        options,
        message: message2,
        get "~standard" () {
            return _getStandardProps(this);
        },
        async "~run" (dataset, config2) {
            let validDataset;
            let typedDatasets;
            let untypedDatasets;
            for (const schema of this.options){
                const optionDataset = await schema["~run"]({
                    value: dataset.value
                }, config2);
                if (optionDataset.typed) {
                    if (optionDataset.issues) {
                        if (typedDatasets) {
                            typedDatasets.push(optionDataset);
                        } else {
                            typedDatasets = [
                                optionDataset
                            ];
                        }
                    } else {
                        validDataset = optionDataset;
                        break;
                    }
                } else {
                    if (untypedDatasets) {
                        untypedDatasets.push(optionDataset);
                    } else {
                        untypedDatasets = [
                            optionDataset
                        ];
                    }
                }
            }
            if (validDataset) {
                return validDataset;
            }
            if (typedDatasets) {
                if (typedDatasets.length === 1) {
                    return typedDatasets[0];
                }
                _addIssue(this, "type", dataset, config2, {
                    issues: _subIssues(typedDatasets)
                });
                dataset.typed = true;
            } else if (untypedDatasets?.length === 1) {
                return untypedDatasets[0];
            } else {
                _addIssue(this, "type", dataset, config2, {
                    issues: _subIssues(untypedDatasets)
                });
            }
            return dataset;
        }
    };
}
// src/schemas/unknown/unknown.ts
// @__NO_SIDE_EFFECTS__
function unknown() {
    return {
        kind: "schema",
        type: "unknown",
        reference: unknown,
        expects: "unknown",
        async: false,
        get "~standard" () {
            return _getStandardProps(this);
        },
        "~run" (dataset) {
            dataset.typed = true;
            return dataset;
        }
    };
}
// src/schemas/variant/variant.ts
// @__NO_SIDE_EFFECTS__
function variant(key, options, message2) {
    return {
        kind: "schema",
        type: "variant",
        reference: variant,
        expects: "Object",
        async: false,
        key,
        options,
        message: message2,
        get "~standard" () {
            return _getStandardProps(this);
        },
        "~run" (dataset, config2) {
            const input = dataset.value;
            if (input && typeof input === "object") {
                let outputDataset;
                let maxDiscriminatorPriority = 0;
                let invalidDiscriminatorKey = this.key;
                let expectedDiscriminators = [];
                const parseOptions = (variant2, allKeys)=>{
                    for (const schema of variant2.options){
                        if (schema.type === "variant") {
                            parseOptions(schema, new Set(allKeys).add(schema.key));
                        } else {
                            let keysAreValid = true;
                            let currentPriority = 0;
                            for (const currentKey of allKeys){
                                const discriminatorSchema = schema.entries[currentKey];
                                if (currentKey in input ? discriminatorSchema["~run"](// @ts-expect-error
                                {
                                    typed: false,
                                    value: input[currentKey]
                                }, {
                                    abortEarly: true
                                }).issues : discriminatorSchema.type !== "exact_optional" && discriminatorSchema.type !== "optional" && discriminatorSchema.type !== "nullish") {
                                    keysAreValid = false;
                                    if (invalidDiscriminatorKey !== currentKey && (maxDiscriminatorPriority < currentPriority || maxDiscriminatorPriority === currentPriority && currentKey in input && !(invalidDiscriminatorKey in input))) {
                                        maxDiscriminatorPriority = currentPriority;
                                        invalidDiscriminatorKey = currentKey;
                                        expectedDiscriminators = [];
                                    }
                                    if (invalidDiscriminatorKey === currentKey) {
                                        expectedDiscriminators.push(schema.entries[currentKey].expects);
                                    }
                                    break;
                                }
                                currentPriority++;
                            }
                            if (keysAreValid) {
                                const optionDataset = schema["~run"]({
                                    value: input
                                }, config2);
                                if (!outputDataset || !outputDataset.typed && optionDataset.typed) {
                                    outputDataset = optionDataset;
                                }
                            }
                        }
                        if (outputDataset && !outputDataset.issues) {
                            break;
                        }
                    }
                };
                parseOptions(this, /* @__PURE__ */ new Set([
                    this.key
                ]));
                if (outputDataset) {
                    return outputDataset;
                }
                _addIssue(this, "type", dataset, config2, {
                    // @ts-expect-error
                    input: input[invalidDiscriminatorKey],
                    expected: _joinExpects(expectedDiscriminators, "|"),
                    path: [
                        {
                            type: "object",
                            origin: "value",
                            input,
                            key: invalidDiscriminatorKey,
                            // @ts-expect-error
                            value: input[invalidDiscriminatorKey]
                        }
                    ]
                });
            } else {
                _addIssue(this, "type", dataset, config2);
            }
            return dataset;
        }
    };
}
// src/schemas/variant/variantAsync.ts
// @__NO_SIDE_EFFECTS__
function variantAsync(key, options, message2) {
    return {
        kind: "schema",
        type: "variant",
        reference: variantAsync,
        expects: "Object",
        async: true,
        key,
        options,
        message: message2,
        get "~standard" () {
            return _getStandardProps(this);
        },
        async "~run" (dataset, config2) {
            const input = dataset.value;
            if (input && typeof input === "object") {
                let outputDataset;
                let maxDiscriminatorPriority = 0;
                let invalidDiscriminatorKey = this.key;
                let expectedDiscriminators = [];
                const parseOptions = async (variant2, allKeys)=>{
                    for (const schema of variant2.options){
                        if (schema.type === "variant") {
                            await parseOptions(schema, new Set(allKeys).add(schema.key));
                        } else {
                            let keysAreValid = true;
                            let currentPriority = 0;
                            for (const currentKey of allKeys){
                                const discriminatorSchema = schema.entries[currentKey];
                                if (currentKey in input ? (await discriminatorSchema["~run"](// @ts-expect-error
                                {
                                    typed: false,
                                    value: input[currentKey]
                                }, {
                                    abortEarly: true
                                })).issues : discriminatorSchema.type !== "exact_optional" && discriminatorSchema.type !== "optional" && discriminatorSchema.type !== "nullish") {
                                    keysAreValid = false;
                                    if (invalidDiscriminatorKey !== currentKey && (maxDiscriminatorPriority < currentPriority || maxDiscriminatorPriority === currentPriority && currentKey in input && !(invalidDiscriminatorKey in input))) {
                                        maxDiscriminatorPriority = currentPriority;
                                        invalidDiscriminatorKey = currentKey;
                                        expectedDiscriminators = [];
                                    }
                                    if (invalidDiscriminatorKey === currentKey) {
                                        expectedDiscriminators.push(schema.entries[currentKey].expects);
                                    }
                                    break;
                                }
                                currentPriority++;
                            }
                            if (keysAreValid) {
                                const optionDataset = await schema["~run"]({
                                    value: input
                                }, config2);
                                if (!outputDataset || !outputDataset.typed && optionDataset.typed) {
                                    outputDataset = optionDataset;
                                }
                            }
                        }
                        if (outputDataset && !outputDataset.issues) {
                            break;
                        }
                    }
                };
                await parseOptions(this, /* @__PURE__ */ new Set([
                    this.key
                ]));
                if (outputDataset) {
                    return outputDataset;
                }
                _addIssue(this, "type", dataset, config2, {
                    // @ts-expect-error
                    input: input[invalidDiscriminatorKey],
                    expected: _joinExpects(expectedDiscriminators, "|"),
                    path: [
                        {
                            type: "object",
                            origin: "value",
                            input,
                            key: invalidDiscriminatorKey,
                            // @ts-expect-error
                            value: input[invalidDiscriminatorKey]
                        }
                    ]
                });
            } else {
                _addIssue(this, "type", dataset, config2);
            }
            return dataset;
        }
    };
}
// src/schemas/void/void.ts
// @__NO_SIDE_EFFECTS__
function void_(message2) {
    return {
        kind: "schema",
        type: "void",
        reference: void_,
        expects: "void",
        async: false,
        message: message2,
        get "~standard" () {
            return _getStandardProps(this);
        },
        "~run" (dataset, config2) {
            if (dataset.value === void 0) {
                dataset.typed = true;
            } else {
                _addIssue(this, "type", dataset, config2);
            }
            return dataset;
        }
    };
}
// src/methods/keyof/keyof.ts
// @__NO_SIDE_EFFECTS__
function keyof(schema, message2) {
    return picklist(Object.keys(schema.entries), message2);
}
// src/methods/message/message.ts
// @__NO_SIDE_EFFECTS__
function message(schema, message_) {
    return {
        ...schema,
        get "~standard" () {
            return _getStandardProps(this);
        },
        "~run" (dataset, config2) {
            return schema["~run"](dataset, {
                ...config2,
                message: message_
            });
        }
    };
}
// src/methods/omit/omit.ts
// @__NO_SIDE_EFFECTS__
function omit(schema, keys) {
    const entries2 = {
        ...schema.entries
    };
    for (const key of keys){
        delete entries2[key];
    }
    return {
        ...schema,
        entries: entries2,
        get "~standard" () {
            return _getStandardProps(this);
        }
    };
}
// src/methods/parse/parse.ts
function parse(schema, input, config2) {
    const dataset = schema["~run"]({
        value: input
    }, getGlobalConfig(config2));
    if (dataset.issues) {
        throw new ValiError(dataset.issues);
    }
    return dataset.value;
}
// src/methods/parse/parseAsync.ts
async function parseAsync(schema, input, config2) {
    const dataset = await schema["~run"]({
        value: input
    }, getGlobalConfig(config2));
    if (dataset.issues) {
        throw new ValiError(dataset.issues);
    }
    return dataset.value;
}
// src/methods/parser/parser.ts
// @__NO_SIDE_EFFECTS__
function parser(schema, config2) {
    const func = (input)=>parse(schema, input, config2);
    func.schema = schema;
    func.config = config2;
    return func;
}
// src/methods/parser/parserAsync.ts
// @__NO_SIDE_EFFECTS__
function parserAsync(schema, config2) {
    const func = (input)=>parseAsync(schema, input, config2);
    func.schema = schema;
    func.config = config2;
    return func;
}
// src/methods/partial/partial.ts
// @__NO_SIDE_EFFECTS__
function partial(schema, keys) {
    const entries2 = {};
    for(const key in schema.entries){
        entries2[key] = !keys || keys.includes(key) ? optional(schema.entries[key]) : schema.entries[key];
    }
    return {
        ...schema,
        entries: entries2,
        get "~standard" () {
            return _getStandardProps(this);
        }
    };
}
// src/methods/partial/partialAsync.ts
// @__NO_SIDE_EFFECTS__
function partialAsync(schema, keys) {
    const entries2 = {};
    for(const key in schema.entries){
        entries2[key] = !keys || keys.includes(key) ? optionalAsync(schema.entries[key]) : schema.entries[key];
    }
    return {
        ...schema,
        entries: entries2,
        get "~standard" () {
            return _getStandardProps(this);
        }
    };
}
// src/methods/pick/pick.ts
// @__NO_SIDE_EFFECTS__
function pick(schema, keys) {
    const entries2 = {};
    for (const key of keys){
        entries2[key] = schema.entries[key];
    }
    return {
        ...schema,
        entries: entries2,
        get "~standard" () {
            return _getStandardProps(this);
        }
    };
}
// src/methods/pipe/pipe.ts
// @__NO_SIDE_EFFECTS__
function pipe(...pipe2) {
    return {
        ...pipe2[0],
        pipe: pipe2,
        get "~standard" () {
            return _getStandardProps(this);
        },
        "~run" (dataset, config2) {
            for (const item of pipe2){
                if (item.kind !== "metadata") {
                    if (dataset.issues && (item.kind === "schema" || item.kind === "transformation")) {
                        dataset.typed = false;
                        break;
                    }
                    if (!dataset.issues || !config2.abortEarly && !config2.abortPipeEarly) {
                        dataset = item["~run"](dataset, config2);
                    }
                }
            }
            return dataset;
        }
    };
}
// src/methods/pipe/pipeAsync.ts
// @__NO_SIDE_EFFECTS__
function pipeAsync(...pipe2) {
    return {
        ...pipe2[0],
        pipe: pipe2,
        async: true,
        get "~standard" () {
            return _getStandardProps(this);
        },
        async "~run" (dataset, config2) {
            for (const item of pipe2){
                if (item.kind !== "metadata") {
                    if (dataset.issues && (item.kind === "schema" || item.kind === "transformation")) {
                        dataset.typed = false;
                        break;
                    }
                    if (!dataset.issues || !config2.abortEarly && !config2.abortPipeEarly) {
                        dataset = await item["~run"](dataset, config2);
                    }
                }
            }
            return dataset;
        }
    };
}
// src/methods/required/required.ts
// @__NO_SIDE_EFFECTS__
function required(schema, arg2, arg3) {
    const keys = Array.isArray(arg2) ? arg2 : void 0;
    const message2 = Array.isArray(arg2) ? arg3 : arg2;
    const entries2 = {};
    for(const key in schema.entries){
        entries2[key] = !keys || keys.includes(key) ? nonOptional(schema.entries[key], message2) : schema.entries[key];
    }
    return {
        ...schema,
        entries: entries2,
        get "~standard" () {
            return _getStandardProps(this);
        }
    };
}
// src/methods/required/requiredAsync.ts
// @__NO_SIDE_EFFECTS__
function requiredAsync(schema, arg2, arg3) {
    const keys = Array.isArray(arg2) ? arg2 : void 0;
    const message2 = Array.isArray(arg2) ? arg3 : arg2;
    const entries2 = {};
    for(const key in schema.entries){
        entries2[key] = !keys || keys.includes(key) ? nonOptionalAsync(schema.entries[key], message2) : schema.entries[key];
    }
    return {
        ...schema,
        entries: entries2,
        get "~standard" () {
            return _getStandardProps(this);
        }
    };
}
// src/methods/safeParse/safeParse.ts
// @__NO_SIDE_EFFECTS__
function safeParse(schema, input, config2) {
    const dataset = schema["~run"]({
        value: input
    }, getGlobalConfig(config2));
    return {
        typed: dataset.typed,
        success: !dataset.issues,
        output: dataset.value,
        issues: dataset.issues
    };
}
// src/methods/safeParse/safeParseAsync.ts
// @__NO_SIDE_EFFECTS__
async function safeParseAsync(schema, input, config2) {
    const dataset = await schema["~run"]({
        value: input
    }, getGlobalConfig(config2));
    return {
        typed: dataset.typed,
        success: !dataset.issues,
        output: dataset.value,
        issues: dataset.issues
    };
}
// src/methods/safeParser/safeParser.ts
// @__NO_SIDE_EFFECTS__
function safeParser(schema, config2) {
    const func = (input)=>safeParse(schema, input, config2);
    func.schema = schema;
    func.config = config2;
    return func;
}
// src/methods/safeParser/safeParserAsync.ts
// @__NO_SIDE_EFFECTS__
function safeParserAsync(schema, config2) {
    const func = (input)=>safeParseAsync(schema, input, config2);
    func.schema = schema;
    func.config = config2;
    return func;
}
// src/methods/summarize/summarize.ts
// @__NO_SIDE_EFFECTS__
function summarize(issues) {
    let summary = "";
    for (const issue of issues){
        if (summary) {
            summary += "\n";
        }
        summary += `\xD7 ${issue.message}`;
        const dotPath = getDotPath(issue);
        if (dotPath) {
            summary += `
  \u2192 at ${dotPath}`;
        }
    }
    return summary;
}
// src/methods/unwrap/unwrap.ts
// @__NO_SIDE_EFFECTS__
function unwrap(schema) {
    return schema.wrapped;
}
;
}}),
"[project]/node_modules/@sanity/visual-editing-csm/dist/index.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "createDataAttribute": (()=>createDataAttribute),
    "decodeSanityNodeData": (()=>decodeSanityNodeData),
    "encodeSanityNodeData": (()=>encodeSanityNodeData),
    "pathToUrlString": (()=>pathToUrlString),
    "urlStringToPath": (()=>urlStringToPath)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$sanity$2f$client$2f$dist$2f$_chunks$2d$es$2f$resolveEditInfo$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@sanity/client/dist/_chunks-es/resolveEditInfo.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$valibot$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/valibot/dist/index.js [app-ssr] (ecmascript)");
;
;
const lengthyStr$1 = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$valibot$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["pipe"])((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$valibot$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["string"])(), (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$valibot$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["minLength"])(1)), optionalLengthyStr = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$valibot$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["optional"])(lengthyStr$1), sanityNodeSchema = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$valibot$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["object"])({
    baseUrl: lengthyStr$1,
    dataset: optionalLengthyStr,
    id: lengthyStr$1,
    path: lengthyStr$1,
    projectId: optionalLengthyStr,
    tool: optionalLengthyStr,
    type: optionalLengthyStr,
    workspace: optionalLengthyStr
});
function isValidSanityNode(node) {
    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$valibot$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["is"])(sanityNodeSchema, node);
}
function isArray(value) {
    return value !== null && Array.isArray(value);
}
function pathToUrlString(path) {
    let str = "";
    for (const segment of path){
        if (typeof segment == "string") {
            str && (str += "."), str += segment;
            continue;
        }
        if (typeof segment == "number") {
            str && (str += ":"), str += `${segment}`;
            continue;
        }
        if (isArray(segment)) {
            str && (str += ":"), str += `${segment.join(",")}}`;
            continue;
        }
        if (segment._key) {
            str && (str += ":"), str += `${segment._key}`;
            continue;
        }
    }
    return str;
}
function encodeSanityNodeData(node) {
    const { id: _id, path, baseUrl, tool, workspace, type } = node;
    return isValidSanityNode(node) ? [
        [
            "id",
            (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$sanity$2f$client$2f$dist$2f$_chunks$2d$es$2f$resolveEditInfo$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["getPublishedId"])(_id)
        ],
        [
            "type",
            type
        ],
        [
            "path",
            pathToUrlString(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$sanity$2f$client$2f$dist$2f$_chunks$2d$es$2f$resolveEditInfo$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["studioPath"].fromString(path))
        ],
        [
            "base",
            encodeURIComponent(baseUrl)
        ],
        [
            "workspace",
            workspace
        ],
        [
            "tool",
            tool
        ]
    ].filter(([, value])=>!!value).map((part)=>part.join("=")).join(";") : void 0;
}
function createDataAttribute(props) {
    function normalizePath(path) {
        return path ? typeof path == "string" ? __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$sanity$2f$client$2f$dist$2f$_chunks$2d$es$2f$resolveEditInfo$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["studioPath"].fromString(path) : path : [];
    }
    function toString(props2) {
        if (!props2.id) throw new Error("`id` is required to create a data attribute");
        if (!props2.type) throw new Error("`type` is required to create a data attribute");
        if (!props2.path || !props2.path.length) throw new Error("`path` is required to create a data attribute");
        const attrs = {
            baseUrl: props2.baseUrl || "/",
            workspace: props2.workspace,
            tool: props2.tool,
            type: props2.type,
            id: props2.id,
            path: typeof props2.path == "string" ? props2.path : __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$sanity$2f$client$2f$dist$2f$_chunks$2d$es$2f$resolveEditInfo$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["studioPath"].toString(props2.path)
        };
        return encodeSanityNodeData(attrs);
    }
    const DataAttribute = (path)=>toString({
            ...props,
            path: [
                ...normalizePath(props.path),
                ...normalizePath(path)
            ]
        });
    return DataAttribute.toString = function() {
        return toString(props);
    }, DataAttribute.combine = function(attrs) {
        return createDataAttribute({
            ...props,
            ...attrs
        });
    }, DataAttribute.scope = function(path) {
        return createDataAttribute({
            ...props,
            path: [
                ...normalizePath(props.path),
                ...normalizePath(path)
            ]
        });
    }, DataAttribute;
}
const RE_SEGMENT_WITH_INDEX = /^([\w-]+):(0|[1-9][0-9]*)$/, RE_SEGMENT_WITH_TUPLE = /^([\w-]+):([0-9]+),([0-9]+)$/, RE_SEGMENT_WITH_KEY = /^([\w-]+):([\w-]+)$/;
function urlStringToPath(str) {
    const path = [];
    for (const segment of str.split(".")){
        const withIndex = RE_SEGMENT_WITH_INDEX.exec(segment);
        if (withIndex) {
            path.push(withIndex[1], Number(withIndex[2]));
            continue;
        }
        const withTuple = RE_SEGMENT_WITH_TUPLE.exec(segment);
        if (withTuple) {
            path.push(withTuple[1], [
                Number(withTuple[2]),
                Number(withTuple[3])
            ]);
            continue;
        }
        const withKey = RE_SEGMENT_WITH_KEY.exec(segment);
        if (withKey) {
            path.push(withKey[1], {
                _key: withKey[2]
            });
            continue;
        }
        path.push(segment);
    }
    return path;
}
const lengthyStr = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$valibot$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["pipe"])((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$valibot$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["string"])(), (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$valibot$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["minLength"])(1)), sanityLegacyNodeSchema = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$valibot$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["object"])({
    origin: lengthyStr,
    href: lengthyStr,
    data: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$valibot$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["optional"])((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$valibot$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["record"])((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$valibot$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["string"])(), (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$valibot$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["unknown"])()))
});
function decodeSanityString(str) {
    const data = str.split(";").reduce((acc, segment)=>{
        const [key, value] = segment.split("=");
        if (!key || segment.includes("=") && !value) return acc;
        switch(key){
            case "id":
                acc.id = value;
                break;
            case "type":
                acc.type = value;
                break;
            case "path":
                acc.path = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$sanity$2f$client$2f$dist$2f$_chunks$2d$es$2f$resolveEditInfo$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["studioPath"].toString(urlStringToPath(value));
                break;
            case "base":
                acc.baseUrl = decodeURIComponent(value);
                break;
            case "tool":
                acc.tool = value;
                break;
            case "workspace":
                acc.workspace = value;
                break;
            case "projectId":
                acc.projectId = value;
                break;
            case "dataset":
                acc.dataset = value;
                break;
        }
        return acc;
    }, {});
    if (isValidSanityNode(data)) return data;
}
function decodeSanityObject(data) {
    const sanityNode = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$valibot$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["safeParse"])(sanityNodeSchema, data);
    if (sanityNode.success) return sanityNode.output;
    const sanityLegacyNode = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$valibot$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["safeParse"])(sanityLegacyNodeSchema, data);
    if (sanityLegacyNode.success) try {
        const url = new URL(sanityLegacyNode.output.href, typeof document > "u" ? "https://example.com" : location.origin);
        return url.searchParams.size > 0 ? (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$valibot$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["parse"])(sanityNodeSchema, Object.fromEntries(url.searchParams.entries())) : sanityLegacyNode.output;
    } catch (err) {
        return console.error("Failed to parse sanity node", err), sanityLegacyNode.output;
    }
}
function decodeSanityNodeData(data) {
    if (typeof data == "object" && data !== null) return decodeSanityObject(data);
    try {
        const obj = JSON.parse(data);
        return decodeSanityObject(obj);
    } catch  {
        return decodeSanityString(data);
    }
}
;
 //# sourceMappingURL=index.js.map
}}),
"[project]/node_modules/uuid/dist/esm-node/rng.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "default": (()=>rng)
});
var __TURBOPACK__imported__module__$5b$externals$5d2f$crypto__$5b$external$5d$__$28$crypto$2c$__cjs$29$__ = __turbopack_context__.i("[externals]/crypto [external] (crypto, cjs)");
;
const rnds8Pool = new Uint8Array(256); // # of random values to pre-allocate
let poolPtr = rnds8Pool.length;
function rng() {
    if (poolPtr > rnds8Pool.length - 16) {
        __TURBOPACK__imported__module__$5b$externals$5d2f$crypto__$5b$external$5d$__$28$crypto$2c$__cjs$29$__["default"].randomFillSync(rnds8Pool);
        poolPtr = 0;
    }
    return rnds8Pool.slice(poolPtr, poolPtr += 16);
}
}}),
"[project]/node_modules/uuid/dist/esm-node/regex.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "default": (()=>__TURBOPACK__default__export__)
});
const __TURBOPACK__default__export__ = /^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i;
}}),
"[project]/node_modules/uuid/dist/esm-node/validate.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "default": (()=>__TURBOPACK__default__export__)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$uuid$2f$dist$2f$esm$2d$node$2f$regex$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/uuid/dist/esm-node/regex.js [app-ssr] (ecmascript)");
;
function validate(uuid) {
    return typeof uuid === 'string' && __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$uuid$2f$dist$2f$esm$2d$node$2f$regex$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"].test(uuid);
}
const __TURBOPACK__default__export__ = validate;
}}),
"[project]/node_modules/uuid/dist/esm-node/stringify.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "default": (()=>__TURBOPACK__default__export__)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$uuid$2f$dist$2f$esm$2d$node$2f$validate$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/uuid/dist/esm-node/validate.js [app-ssr] (ecmascript)");
;
/**
 * Convert array of 16 byte values to UUID string format of the form:
 * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX
 */ const byteToHex = [];
for(let i = 0; i < 256; ++i){
    byteToHex.push((i + 0x100).toString(16).substr(1));
}
function stringify(arr, offset = 0) {
    // Note: Be careful editing this code!  It's been tuned for performance
    // and works in ways you may not expect. See https://github.com/uuidjs/uuid/pull/434
    const uuid = (byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + '-' + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + '-' + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + '-' + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + '-' + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]]).toLowerCase(); // Consistency check for valid UUID.  If this throws, it's likely due to one
    // of the following:
    // - One or more input array values don't map to a hex octet (leading to
    // "undefined" in the uuid)
    // - Invalid input values for the RFC `version` or `variant` fields
    if (!(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$uuid$2f$dist$2f$esm$2d$node$2f$validate$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"])(uuid)) {
        throw TypeError('Stringified UUID is invalid');
    }
    return uuid;
}
const __TURBOPACK__default__export__ = stringify;
}}),
"[project]/node_modules/uuid/dist/esm-node/v4.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "default": (()=>__TURBOPACK__default__export__)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$uuid$2f$dist$2f$esm$2d$node$2f$rng$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/uuid/dist/esm-node/rng.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$uuid$2f$dist$2f$esm$2d$node$2f$stringify$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/uuid/dist/esm-node/stringify.js [app-ssr] (ecmascript)");
;
;
function v4(options, buf, offset) {
    options = options || {};
    const rnds = options.random || (options.rng || __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$uuid$2f$dist$2f$esm$2d$node$2f$rng$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"])(); // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`
    rnds[6] = rnds[6] & 0x0f | 0x40;
    rnds[8] = rnds[8] & 0x3f | 0x80; // Copy bytes to buffer, if provided
    if (buf) {
        offset = offset || 0;
        for(let i = 0; i < 16; ++i){
            buf[offset + i] = rnds[i];
        }
        return buf;
    }
    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$uuid$2f$dist$2f$esm$2d$node$2f$stringify$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"])(rnds);
}
const __TURBOPACK__default__export__ = v4;
}}),
"[project]/node_modules/uuid/dist/esm-node/v4.js [app-ssr] (ecmascript) <export default as uuid>": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "uuid": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$uuid$2f$dist$2f$esm$2d$node$2f$v4$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"])
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$uuid$2f$dist$2f$esm$2d$node$2f$v4$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/uuid/dist/esm-node/v4.js [app-ssr] (ecmascript)");
}}),
"[project]/node_modules/next/dist/shared/lib/image-blur-svg.js [app-ssr] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
/**
 * A shared function, used on both client and server, to generate a SVG blur placeholder.
 */ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "getImageBlurSvg", {
    enumerable: true,
    get: function() {
        return getImageBlurSvg;
    }
});
function getImageBlurSvg(param) {
    let { widthInt, heightInt, blurWidth, blurHeight, blurDataURL, objectFit } = param;
    const std = 20;
    const svgWidth = blurWidth ? blurWidth * 40 : widthInt;
    const svgHeight = blurHeight ? blurHeight * 40 : heightInt;
    const viewBox = svgWidth && svgHeight ? "viewBox='0 0 " + svgWidth + " " + svgHeight + "'" : '';
    const preserveAspectRatio = viewBox ? 'none' : objectFit === 'contain' ? 'xMidYMid' : objectFit === 'cover' ? 'xMidYMid slice' : 'none';
    return "%3Csvg xmlns='http://www.w3.org/2000/svg' " + viewBox + "%3E%3Cfilter id='b' color-interpolation-filters='sRGB'%3E%3CfeGaussianBlur stdDeviation='" + std + "'/%3E%3CfeColorMatrix values='1 0 0 0 0 0 1 0 0 0 0 0 1 0 0 0 0 0 100 -1' result='s'/%3E%3CfeFlood x='0' y='0' width='100%25' height='100%25'/%3E%3CfeComposite operator='out' in='s'/%3E%3CfeComposite in2='SourceGraphic'/%3E%3CfeGaussianBlur stdDeviation='" + std + "'/%3E%3C/filter%3E%3Cimage width='100%25' height='100%25' x='0' y='0' preserveAspectRatio='" + preserveAspectRatio + "' style='filter: url(%23b);' href='" + blurDataURL + "'/%3E%3C/svg%3E";
} //# sourceMappingURL=image-blur-svg.js.map
}}),
"[project]/node_modules/next/dist/shared/lib/image-config.js [app-ssr] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
0 && (module.exports = {
    VALID_LOADERS: null,
    imageConfigDefault: null
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    VALID_LOADERS: function() {
        return VALID_LOADERS;
    },
    imageConfigDefault: function() {
        return imageConfigDefault;
    }
});
const VALID_LOADERS = [
    'default',
    'imgix',
    'cloudinary',
    'akamai',
    'custom'
];
const imageConfigDefault = {
    deviceSizes: [
        640,
        750,
        828,
        1080,
        1200,
        1920,
        2048,
        3840
    ],
    imageSizes: [
        16,
        32,
        48,
        64,
        96,
        128,
        256,
        384
    ],
    path: '/_next/image',
    loader: 'default',
    loaderFile: '',
    domains: [],
    disableStaticImages: false,
    minimumCacheTTL: 60,
    formats: [
        'image/webp'
    ],
    dangerouslyAllowSVG: false,
    contentSecurityPolicy: "script-src 'none'; frame-src 'none'; sandbox;",
    contentDispositionType: 'attachment',
    localPatterns: undefined,
    remotePatterns: [],
    qualities: undefined,
    unoptimized: false
}; //# sourceMappingURL=image-config.js.map
}}),
"[project]/node_modules/next/dist/shared/lib/get-img-props.js [app-ssr] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "getImgProps", {
    enumerable: true,
    get: function() {
        return getImgProps;
    }
});
const _warnonce = __turbopack_context__.r("[project]/node_modules/next/dist/shared/lib/utils/warn-once.js [app-ssr] (ecmascript)");
const _imageblursvg = __turbopack_context__.r("[project]/node_modules/next/dist/shared/lib/image-blur-svg.js [app-ssr] (ecmascript)");
const _imageconfig = __turbopack_context__.r("[project]/node_modules/next/dist/shared/lib/image-config.js [app-ssr] (ecmascript)");
const VALID_LOADING_VALUES = [
    'lazy',
    'eager',
    undefined
];
// Object-fit values that are not valid background-size values
const INVALID_BACKGROUND_SIZE_VALUES = [
    '-moz-initial',
    'fill',
    'none',
    'scale-down',
    undefined
];
function isStaticRequire(src) {
    return src.default !== undefined;
}
function isStaticImageData(src) {
    return src.src !== undefined;
}
function isStaticImport(src) {
    return !!src && typeof src === 'object' && (isStaticRequire(src) || isStaticImageData(src));
}
const allImgs = new Map();
let perfObserver;
function getInt(x) {
    if (typeof x === 'undefined') {
        return x;
    }
    if (typeof x === 'number') {
        return Number.isFinite(x) ? x : NaN;
    }
    if (typeof x === 'string' && /^[0-9]+$/.test(x)) {
        return parseInt(x, 10);
    }
    return NaN;
}
function getWidths(param, width, sizes) {
    let { deviceSizes, allSizes } = param;
    if (sizes) {
        // Find all the "vw" percent sizes used in the sizes prop
        const viewportWidthRe = /(^|\s)(1?\d?\d)vw/g;
        const percentSizes = [];
        for(let match; match = viewportWidthRe.exec(sizes); match){
            percentSizes.push(parseInt(match[2]));
        }
        if (percentSizes.length) {
            const smallestRatio = Math.min(...percentSizes) * 0.01;
            return {
                widths: allSizes.filter((s)=>s >= deviceSizes[0] * smallestRatio),
                kind: 'w'
            };
        }
        return {
            widths: allSizes,
            kind: 'w'
        };
    }
    if (typeof width !== 'number') {
        return {
            widths: deviceSizes,
            kind: 'w'
        };
    }
    const widths = [
        ...new Set(// > are actually 3x in the green color, but only 1.5x in the red and
        // > blue colors. Showing a 3x resolution image in the app vs a 2x
        // > resolution image will be visually the same, though the 3x image
        // > takes significantly more data. Even true 3x resolution screens are
        // > wasteful as the human eye cannot see that level of detail without
        // > something like a magnifying glass.
        // https://blog.twitter.com/engineering/en_us/topics/infrastructure/2019/capping-image-fidelity-on-ultra-high-resolution-devices.html
        [
            width,
            width * 2 /*, width * 3*/ 
        ].map((w)=>allSizes.find((p)=>p >= w) || allSizes[allSizes.length - 1]))
    ];
    return {
        widths,
        kind: 'x'
    };
}
function generateImgAttrs(param) {
    let { config, src, unoptimized, width, quality, sizes, loader } = param;
    if (unoptimized) {
        return {
            src,
            srcSet: undefined,
            sizes: undefined
        };
    }
    const { widths, kind } = getWidths(config, width, sizes);
    const last = widths.length - 1;
    return {
        sizes: !sizes && kind === 'w' ? '100vw' : sizes,
        srcSet: widths.map((w, i)=>loader({
                config,
                src,
                quality,
                width: w
            }) + " " + (kind === 'w' ? w : i + 1) + kind).join(', '),
        // It's intended to keep `src` the last attribute because React updates
        // attributes in order. If we keep `src` the first one, Safari will
        // immediately start to fetch `src`, before `sizes` and `srcSet` are even
        // updated by React. That causes multiple unnecessary requests if `srcSet`
        // and `sizes` are defined.
        // This bug cannot be reproduced in Chrome or Firefox.
        src: loader({
            config,
            src,
            quality,
            width: widths[last]
        })
    };
}
function getImgProps(param, _state) {
    let { src, sizes, unoptimized = false, priority = false, loading, className, quality, width, height, fill = false, style, overrideSrc, onLoad, onLoadingComplete, placeholder = 'empty', blurDataURL, fetchPriority, decoding = 'async', layout, objectFit, objectPosition, lazyBoundary, lazyRoot, ...rest } = param;
    const { imgConf, showAltText, blurComplete, defaultLoader } = _state;
    let config;
    let c = imgConf || _imageconfig.imageConfigDefault;
    if ('allSizes' in c) {
        config = c;
    } else {
        var _c_qualities;
        const allSizes = [
            ...c.deviceSizes,
            ...c.imageSizes
        ].sort((a, b)=>a - b);
        const deviceSizes = c.deviceSizes.sort((a, b)=>a - b);
        const qualities = (_c_qualities = c.qualities) == null ? void 0 : _c_qualities.sort((a, b)=>a - b);
        config = {
            ...c,
            allSizes,
            deviceSizes,
            qualities
        };
    }
    if (typeof defaultLoader === 'undefined') {
        throw Object.defineProperty(new Error('images.loaderFile detected but the file is missing default export.\nRead more: https://nextjs.org/docs/messages/invalid-images-config'), "__NEXT_ERROR_CODE", {
            value: "E163",
            enumerable: false,
            configurable: true
        });
    }
    let loader = rest.loader || defaultLoader;
    // Remove property so it's not spread on <img> element
    delete rest.loader;
    delete rest.srcSet;
    // This special value indicates that the user
    // didn't define a "loader" prop or "loader" config.
    const isDefaultLoader = '__next_img_default' in loader;
    if (isDefaultLoader) {
        if (config.loader === 'custom') {
            throw Object.defineProperty(new Error('Image with src "' + src + '" is missing "loader" prop.' + "\nRead more: https://nextjs.org/docs/messages/next-image-missing-loader"), "__NEXT_ERROR_CODE", {
                value: "E252",
                enumerable: false,
                configurable: true
            });
        }
    } else {
        // The user defined a "loader" prop or config.
        // Since the config object is internal only, we
        // must not pass it to the user-defined "loader".
        const customImageLoader = loader;
        loader = (obj)=>{
            const { config: _, ...opts } = obj;
            return customImageLoader(opts);
        };
    }
    if (layout) {
        if (layout === 'fill') {
            fill = true;
        }
        const layoutToStyle = {
            intrinsic: {
                maxWidth: '100%',
                height: 'auto'
            },
            responsive: {
                width: '100%',
                height: 'auto'
            }
        };
        const layoutToSizes = {
            responsive: '100vw',
            fill: '100vw'
        };
        const layoutStyle = layoutToStyle[layout];
        if (layoutStyle) {
            style = {
                ...style,
                ...layoutStyle
            };
        }
        const layoutSizes = layoutToSizes[layout];
        if (layoutSizes && !sizes) {
            sizes = layoutSizes;
        }
    }
    let staticSrc = '';
    let widthInt = getInt(width);
    let heightInt = getInt(height);
    let blurWidth;
    let blurHeight;
    if (isStaticImport(src)) {
        const staticImageData = isStaticRequire(src) ? src.default : src;
        if (!staticImageData.src) {
            throw Object.defineProperty(new Error("An object should only be passed to the image component src parameter if it comes from a static image import. It must include src. Received " + JSON.stringify(staticImageData)), "__NEXT_ERROR_CODE", {
                value: "E460",
                enumerable: false,
                configurable: true
            });
        }
        if (!staticImageData.height || !staticImageData.width) {
            throw Object.defineProperty(new Error("An object should only be passed to the image component src parameter if it comes from a static image import. It must include height and width. Received " + JSON.stringify(staticImageData)), "__NEXT_ERROR_CODE", {
                value: "E48",
                enumerable: false,
                configurable: true
            });
        }
        blurWidth = staticImageData.blurWidth;
        blurHeight = staticImageData.blurHeight;
        blurDataURL = blurDataURL || staticImageData.blurDataURL;
        staticSrc = staticImageData.src;
        if (!fill) {
            if (!widthInt && !heightInt) {
                widthInt = staticImageData.width;
                heightInt = staticImageData.height;
            } else if (widthInt && !heightInt) {
                const ratio = widthInt / staticImageData.width;
                heightInt = Math.round(staticImageData.height * ratio);
            } else if (!widthInt && heightInt) {
                const ratio = heightInt / staticImageData.height;
                widthInt = Math.round(staticImageData.width * ratio);
            }
        }
    }
    src = typeof src === 'string' ? src : staticSrc;
    let isLazy = !priority && (loading === 'lazy' || typeof loading === 'undefined');
    if (!src || src.startsWith('data:') || src.startsWith('blob:')) {
        // https://developer.mozilla.org/docs/Web/HTTP/Basics_of_HTTP/Data_URIs
        unoptimized = true;
        isLazy = false;
    }
    if (config.unoptimized) {
        unoptimized = true;
    }
    if (isDefaultLoader && !config.dangerouslyAllowSVG && src.split('?', 1)[0].endsWith('.svg')) {
        // Special case to make svg serve as-is to avoid proxying
        // through the built-in Image Optimization API.
        unoptimized = true;
    }
    const qualityInt = getInt(quality);
    if ("TURBOPACK compile-time truthy", 1) {
        if (config.output === 'export' && isDefaultLoader && !unoptimized) {
            throw Object.defineProperty(new Error("Image Optimization using the default loader is not compatible with `{ output: 'export' }`.\n  Possible solutions:\n    - Remove `{ output: 'export' }` and run \"next start\" to run server mode including the Image Optimization API.\n    - Configure `{ images: { unoptimized: true } }` in `next.config.js` to disable the Image Optimization API.\n  Read more: https://nextjs.org/docs/messages/export-image-api"), "__NEXT_ERROR_CODE", {
                value: "E500",
                enumerable: false,
                configurable: true
            });
        }
        if (!src) {
            // React doesn't show the stack trace and there's
            // no `src` to help identify which image, so we
            // instead console.error(ref) during mount.
            unoptimized = true;
        } else {
            if (fill) {
                if (width) {
                    throw Object.defineProperty(new Error('Image with src "' + src + '" has both "width" and "fill" properties. Only one should be used.'), "__NEXT_ERROR_CODE", {
                        value: "E96",
                        enumerable: false,
                        configurable: true
                    });
                }
                if (height) {
                    throw Object.defineProperty(new Error('Image with src "' + src + '" has both "height" and "fill" properties. Only one should be used.'), "__NEXT_ERROR_CODE", {
                        value: "E115",
                        enumerable: false,
                        configurable: true
                    });
                }
                if ((style == null ? void 0 : style.position) && style.position !== 'absolute') {
                    throw Object.defineProperty(new Error('Image with src "' + src + '" has both "fill" and "style.position" properties. Images with "fill" always use position absolute - it cannot be modified.'), "__NEXT_ERROR_CODE", {
                        value: "E216",
                        enumerable: false,
                        configurable: true
                    });
                }
                if ((style == null ? void 0 : style.width) && style.width !== '100%') {
                    throw Object.defineProperty(new Error('Image with src "' + src + '" has both "fill" and "style.width" properties. Images with "fill" always use width 100% - it cannot be modified.'), "__NEXT_ERROR_CODE", {
                        value: "E73",
                        enumerable: false,
                        configurable: true
                    });
                }
                if ((style == null ? void 0 : style.height) && style.height !== '100%') {
                    throw Object.defineProperty(new Error('Image with src "' + src + '" has both "fill" and "style.height" properties. Images with "fill" always use height 100% - it cannot be modified.'), "__NEXT_ERROR_CODE", {
                        value: "E404",
                        enumerable: false,
                        configurable: true
                    });
                }
            } else {
                if (typeof widthInt === 'undefined') {
                    throw Object.defineProperty(new Error('Image with src "' + src + '" is missing required "width" property.'), "__NEXT_ERROR_CODE", {
                        value: "E451",
                        enumerable: false,
                        configurable: true
                    });
                } else if (isNaN(widthInt)) {
                    throw Object.defineProperty(new Error('Image with src "' + src + '" has invalid "width" property. Expected a numeric value in pixels but received "' + width + '".'), "__NEXT_ERROR_CODE", {
                        value: "E66",
                        enumerable: false,
                        configurable: true
                    });
                }
                if (typeof heightInt === 'undefined') {
                    throw Object.defineProperty(new Error('Image with src "' + src + '" is missing required "height" property.'), "__NEXT_ERROR_CODE", {
                        value: "E397",
                        enumerable: false,
                        configurable: true
                    });
                } else if (isNaN(heightInt)) {
                    throw Object.defineProperty(new Error('Image with src "' + src + '" has invalid "height" property. Expected a numeric value in pixels but received "' + height + '".'), "__NEXT_ERROR_CODE", {
                        value: "E444",
                        enumerable: false,
                        configurable: true
                    });
                }
                // eslint-disable-next-line no-control-regex
                if (/^[\x00-\x20]/.test(src)) {
                    throw Object.defineProperty(new Error('Image with src "' + src + '" cannot start with a space or control character. Use src.trimStart() to remove it or encodeURIComponent(src) to keep it.'), "__NEXT_ERROR_CODE", {
                        value: "E176",
                        enumerable: false,
                        configurable: true
                    });
                }
                // eslint-disable-next-line no-control-regex
                if (/[\x00-\x20]$/.test(src)) {
                    throw Object.defineProperty(new Error('Image with src "' + src + '" cannot end with a space or control character. Use src.trimEnd() to remove it or encodeURIComponent(src) to keep it.'), "__NEXT_ERROR_CODE", {
                        value: "E21",
                        enumerable: false,
                        configurable: true
                    });
                }
            }
        }
        if (!VALID_LOADING_VALUES.includes(loading)) {
            throw Object.defineProperty(new Error('Image with src "' + src + '" has invalid "loading" property. Provided "' + loading + '" should be one of ' + VALID_LOADING_VALUES.map(String).join(',') + "."), "__NEXT_ERROR_CODE", {
                value: "E357",
                enumerable: false,
                configurable: true
            });
        }
        if (priority && loading === 'lazy') {
            throw Object.defineProperty(new Error('Image with src "' + src + '" has both "priority" and "loading=\'lazy\'" properties. Only one should be used.'), "__NEXT_ERROR_CODE", {
                value: "E218",
                enumerable: false,
                configurable: true
            });
        }
        if (placeholder !== 'empty' && placeholder !== 'blur' && !placeholder.startsWith('data:image/')) {
            throw Object.defineProperty(new Error('Image with src "' + src + '" has invalid "placeholder" property "' + placeholder + '".'), "__NEXT_ERROR_CODE", {
                value: "E431",
                enumerable: false,
                configurable: true
            });
        }
        if (placeholder !== 'empty') {
            if (widthInt && heightInt && widthInt * heightInt < 1600) {
                (0, _warnonce.warnOnce)('Image with src "' + src + '" is smaller than 40x40. Consider removing the "placeholder" property to improve performance.');
            }
        }
        if (placeholder === 'blur' && !blurDataURL) {
            const VALID_BLUR_EXT = [
                'jpeg',
                'png',
                'webp',
                'avif'
            ] // should match next-image-loader
            ;
            throw Object.defineProperty(new Error('Image with src "' + src + '" has "placeholder=\'blur\'" property but is missing the "blurDataURL" property.\n        Possible solutions:\n          - Add a "blurDataURL" property, the contents should be a small Data URL to represent the image\n          - Change the "src" property to a static import with one of the supported file types: ' + VALID_BLUR_EXT.join(',') + ' (animated images not supported)\n          - Remove the "placeholder" property, effectively no blur effect\n        Read more: https://nextjs.org/docs/messages/placeholder-blur-data-url'), "__NEXT_ERROR_CODE", {
                value: "E371",
                enumerable: false,
                configurable: true
            });
        }
        if ('ref' in rest) {
            (0, _warnonce.warnOnce)('Image with src "' + src + '" is using unsupported "ref" property. Consider using the "onLoad" property instead.');
        }
        if (!unoptimized && !isDefaultLoader) {
            const urlStr = loader({
                config,
                src,
                width: widthInt || 400,
                quality: qualityInt || 75
            });
            let url;
            try {
                url = new URL(urlStr);
            } catch (err) {}
            if (urlStr === src || url && url.pathname === src && !url.search) {
                (0, _warnonce.warnOnce)('Image with src "' + src + '" has a "loader" property that does not implement width. Please implement it or use the "unoptimized" property instead.' + "\nRead more: https://nextjs.org/docs/messages/next-image-missing-loader-width");
            }
        }
        if (onLoadingComplete) {
            (0, _warnonce.warnOnce)('Image with src "' + src + '" is using deprecated "onLoadingComplete" property. Please use the "onLoad" property instead.');
        }
        for (const [legacyKey, legacyValue] of Object.entries({
            layout,
            objectFit,
            objectPosition,
            lazyBoundary,
            lazyRoot
        })){
            if (legacyValue) {
                (0, _warnonce.warnOnce)('Image with src "' + src + '" has legacy prop "' + legacyKey + '". Did you forget to run the codemod?' + "\nRead more: https://nextjs.org/docs/messages/next-image-upgrade-to-13");
            }
        }
        if (typeof window !== 'undefined' && !perfObserver && window.PerformanceObserver) {
            perfObserver = new PerformanceObserver((entryList)=>{
                for (const entry of entryList.getEntries()){
                    var _entry_element;
                    // @ts-ignore - missing "LargestContentfulPaint" class with "element" prop
                    const imgSrc = (entry == null ? void 0 : (_entry_element = entry.element) == null ? void 0 : _entry_element.src) || '';
                    const lcpImage = allImgs.get(imgSrc);
                    if (lcpImage && !lcpImage.priority && lcpImage.placeholder === 'empty' && !lcpImage.src.startsWith('data:') && !lcpImage.src.startsWith('blob:')) {
                        // https://web.dev/lcp/#measure-lcp-in-javascript
                        (0, _warnonce.warnOnce)('Image with src "' + lcpImage.src + '" was detected as the Largest Contentful Paint (LCP). Please add the "priority" property if this image is above the fold.' + "\nRead more: https://nextjs.org/docs/api-reference/next/image#priority");
                    }
                }
            });
            try {
                perfObserver.observe({
                    type: 'largest-contentful-paint',
                    buffered: true
                });
            } catch (err) {
                // Log error but don't crash the app
                console.error(err);
            }
        }
    }
    const imgStyle = Object.assign(fill ? {
        position: 'absolute',
        height: '100%',
        width: '100%',
        left: 0,
        top: 0,
        right: 0,
        bottom: 0,
        objectFit,
        objectPosition
    } : {}, showAltText ? {} : {
        color: 'transparent'
    }, style);
    const backgroundImage = !blurComplete && placeholder !== 'empty' ? placeholder === 'blur' ? 'url("data:image/svg+xml;charset=utf-8,' + (0, _imageblursvg.getImageBlurSvg)({
        widthInt,
        heightInt,
        blurWidth,
        blurHeight,
        blurDataURL: blurDataURL || '',
        objectFit: imgStyle.objectFit
    }) + '")' : 'url("' + placeholder + '")' // assume `data:image/`
     : null;
    const backgroundSize = !INVALID_BACKGROUND_SIZE_VALUES.includes(imgStyle.objectFit) ? imgStyle.objectFit : imgStyle.objectFit === 'fill' ? '100% 100%' // the background-size equivalent of `fill`
     : 'cover';
    let placeholderStyle = backgroundImage ? {
        backgroundSize,
        backgroundPosition: imgStyle.objectPosition || '50% 50%',
        backgroundRepeat: 'no-repeat',
        backgroundImage
    } : {};
    if ("TURBOPACK compile-time truthy", 1) {
        if (placeholderStyle.backgroundImage && placeholder === 'blur' && (blurDataURL == null ? void 0 : blurDataURL.startsWith('/'))) {
            // During `next dev`, we don't want to generate blur placeholders with webpack
            // because it can delay starting the dev server. Instead, `next-image-loader.js`
            // will inline a special url to lazily generate the blur placeholder at request time.
            placeholderStyle.backgroundImage = 'url("' + blurDataURL + '")';
        }
    }
    const imgAttributes = generateImgAttrs({
        config,
        src,
        unoptimized,
        width: widthInt,
        quality: qualityInt,
        sizes,
        loader
    });
    if ("TURBOPACK compile-time truthy", 1) {
        if (typeof window !== 'undefined') {
            let fullUrl;
            try {
                fullUrl = new URL(imgAttributes.src);
            } catch (e) {
                fullUrl = new URL(imgAttributes.src, window.location.href);
            }
            allImgs.set(fullUrl.href, {
                src,
                priority,
                placeholder
            });
        }
    }
    const props = {
        ...rest,
        loading: isLazy ? 'lazy' : loading,
        fetchPriority,
        width: widthInt,
        height: heightInt,
        decoding,
        className,
        style: {
            ...imgStyle,
            ...placeholderStyle
        },
        sizes: imgAttributes.sizes,
        srcSet: imgAttributes.srcSet,
        src: overrideSrc || imgAttributes.src
    };
    const meta = {
        unoptimized,
        priority,
        placeholder,
        fill
    };
    return {
        props,
        meta
    };
} //# sourceMappingURL=get-img-props.js.map
}}),
"[project]/node_modules/next/dist/shared/lib/side-effect.js [app-ssr] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return SideEffect;
    }
});
const _react = __turbopack_context__.r("[project]/node_modules/next/dist/server/route-modules/app-page/vendored/ssr/react.js [app-ssr] (ecmascript)");
const isServer = typeof window === 'undefined';
const useClientOnlyLayoutEffect = isServer ? ()=>{} : _react.useLayoutEffect;
const useClientOnlyEffect = isServer ? ()=>{} : _react.useEffect;
function SideEffect(props) {
    const { headManager, reduceComponentsToState } = props;
    function emitChange() {
        if (headManager && headManager.mountedInstances) {
            const headElements = _react.Children.toArray(Array.from(headManager.mountedInstances).filter(Boolean));
            headManager.updateHead(reduceComponentsToState(headElements, props));
        }
    }
    if (isServer) {
        var _headManager_mountedInstances;
        headManager == null ? void 0 : (_headManager_mountedInstances = headManager.mountedInstances) == null ? void 0 : _headManager_mountedInstances.add(props.children);
        emitChange();
    }
    useClientOnlyLayoutEffect(()=>{
        var _headManager_mountedInstances;
        headManager == null ? void 0 : (_headManager_mountedInstances = headManager.mountedInstances) == null ? void 0 : _headManager_mountedInstances.add(props.children);
        return ()=>{
            var _headManager_mountedInstances;
            headManager == null ? void 0 : (_headManager_mountedInstances = headManager.mountedInstances) == null ? void 0 : _headManager_mountedInstances.delete(props.children);
        };
    });
    // We need to call `updateHead` method whenever the `SideEffect` is trigger in all
    // life-cycles: mount, update, unmount. However, if there are multiple `SideEffect`s
    // being rendered, we only trigger the method from the last one.
    // This is ensured by keeping the last unflushed `updateHead` in the `_pendingUpdate`
    // singleton in the layout effect pass, and actually trigger it in the effect pass.
    useClientOnlyLayoutEffect(()=>{
        if (headManager) {
            headManager._pendingUpdate = emitChange;
        }
        return ()=>{
            if (headManager) {
                headManager._pendingUpdate = emitChange;
            }
        };
    });
    useClientOnlyEffect(()=>{
        if (headManager && headManager._pendingUpdate) {
            headManager._pendingUpdate();
            headManager._pendingUpdate = null;
        }
        return ()=>{
            if (headManager && headManager._pendingUpdate) {
                headManager._pendingUpdate();
                headManager._pendingUpdate = null;
            }
        };
    });
    return null;
} //# sourceMappingURL=side-effect.js.map
}}),
"[project]/node_modules/next/dist/server/route-modules/app-page/vendored/contexts/amp-context.js [app-ssr] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
module.exports = __turbopack_context__.r("[project]/node_modules/next/dist/server/route-modules/app-page/module.compiled.js [app-ssr] (ecmascript)").vendored['contexts'].AmpContext; //# sourceMappingURL=amp-context.js.map
}}),
"[project]/node_modules/next/dist/server/route-modules/app-page/vendored/contexts/head-manager-context.js [app-ssr] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
module.exports = __turbopack_context__.r("[project]/node_modules/next/dist/server/route-modules/app-page/module.compiled.js [app-ssr] (ecmascript)").vendored['contexts'].HeadManagerContext; //# sourceMappingURL=head-manager-context.js.map
}}),
"[project]/node_modules/next/dist/shared/lib/amp-mode.js [app-ssr] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "isInAmpMode", {
    enumerable: true,
    get: function() {
        return isInAmpMode;
    }
});
function isInAmpMode(param) {
    let { ampFirst = false, hybrid = false, hasQuery = false } = param === void 0 ? {} : param;
    return ampFirst || hybrid && hasQuery;
} //# sourceMappingURL=amp-mode.js.map
}}),
"[project]/node_modules/next/dist/shared/lib/head.js [app-ssr] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
'use client';
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
0 && (module.exports = {
    default: null,
    defaultHead: null
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    default: function() {
        return _default;
    },
    defaultHead: function() {
        return defaultHead;
    }
});
const _interop_require_default = __turbopack_context__.r("[project]/node_modules/@swc/helpers/cjs/_interop_require_default.cjs [app-ssr] (ecmascript)");
const _interop_require_wildcard = __turbopack_context__.r("[project]/node_modules/@swc/helpers/cjs/_interop_require_wildcard.cjs [app-ssr] (ecmascript)");
const _jsxruntime = __turbopack_context__.r("[project]/node_modules/next/dist/server/route-modules/app-page/vendored/ssr/react-jsx-runtime.js [app-ssr] (ecmascript)");
const _react = /*#__PURE__*/ _interop_require_wildcard._(__turbopack_context__.r("[project]/node_modules/next/dist/server/route-modules/app-page/vendored/ssr/react.js [app-ssr] (ecmascript)"));
const _sideeffect = /*#__PURE__*/ _interop_require_default._(__turbopack_context__.r("[project]/node_modules/next/dist/shared/lib/side-effect.js [app-ssr] (ecmascript)"));
const _ampcontextsharedruntime = __turbopack_context__.r("[project]/node_modules/next/dist/server/route-modules/app-page/vendored/contexts/amp-context.js [app-ssr] (ecmascript)");
const _headmanagercontextsharedruntime = __turbopack_context__.r("[project]/node_modules/next/dist/server/route-modules/app-page/vendored/contexts/head-manager-context.js [app-ssr] (ecmascript)");
const _ampmode = __turbopack_context__.r("[project]/node_modules/next/dist/shared/lib/amp-mode.js [app-ssr] (ecmascript)");
const _warnonce = __turbopack_context__.r("[project]/node_modules/next/dist/shared/lib/utils/warn-once.js [app-ssr] (ecmascript)");
function defaultHead(inAmpMode) {
    if (inAmpMode === void 0) inAmpMode = false;
    const head = [
        /*#__PURE__*/ (0, _jsxruntime.jsx)("meta", {
            charSet: "utf-8"
        }, "charset")
    ];
    if (!inAmpMode) {
        head.push(/*#__PURE__*/ (0, _jsxruntime.jsx)("meta", {
            name: "viewport",
            content: "width=device-width"
        }, "viewport"));
    }
    return head;
}
function onlyReactElement(list, child) {
    // React children can be "string" or "number" in this case we ignore them for backwards compat
    if (typeof child === 'string' || typeof child === 'number') {
        return list;
    }
    // Adds support for React.Fragment
    if (child.type === _react.default.Fragment) {
        return list.concat(_react.default.Children.toArray(child.props.children).reduce((fragmentList, fragmentChild)=>{
            if (typeof fragmentChild === 'string' || typeof fragmentChild === 'number') {
                return fragmentList;
            }
            return fragmentList.concat(fragmentChild);
        }, []));
    }
    return list.concat(child);
}
const METATYPES = [
    'name',
    'httpEquiv',
    'charSet',
    'itemProp'
];
/*
 returns a function for filtering head child elements
 which shouldn't be duplicated, like <title/>
 Also adds support for deduplicated `key` properties
*/ function unique() {
    const keys = new Set();
    const tags = new Set();
    const metaTypes = new Set();
    const metaCategories = {};
    return (h)=>{
        let isUnique = true;
        let hasKey = false;
        if (h.key && typeof h.key !== 'number' && h.key.indexOf('$') > 0) {
            hasKey = true;
            const key = h.key.slice(h.key.indexOf('$') + 1);
            if (keys.has(key)) {
                isUnique = false;
            } else {
                keys.add(key);
            }
        }
        // eslint-disable-next-line default-case
        switch(h.type){
            case 'title':
            case 'base':
                if (tags.has(h.type)) {
                    isUnique = false;
                } else {
                    tags.add(h.type);
                }
                break;
            case 'meta':
                for(let i = 0, len = METATYPES.length; i < len; i++){
                    const metatype = METATYPES[i];
                    if (!h.props.hasOwnProperty(metatype)) continue;
                    if (metatype === 'charSet') {
                        if (metaTypes.has(metatype)) {
                            isUnique = false;
                        } else {
                            metaTypes.add(metatype);
                        }
                    } else {
                        const category = h.props[metatype];
                        const categories = metaCategories[metatype] || new Set();
                        if ((metatype !== 'name' || !hasKey) && categories.has(category)) {
                            isUnique = false;
                        } else {
                            categories.add(category);
                            metaCategories[metatype] = categories;
                        }
                    }
                }
                break;
        }
        return isUnique;
    };
}
/**
 *
 * @param headChildrenElements List of children of <Head>
 */ function reduceComponents(headChildrenElements, props) {
    const { inAmpMode } = props;
    return headChildrenElements.reduce(onlyReactElement, []).reverse().concat(defaultHead(inAmpMode).reverse()).filter(unique()).reverse().map((c, i)=>{
        const key = c.key || i;
        if ("TURBOPACK compile-time falsy", 0) {
            "TURBOPACK unreachable";
        }
        if ("TURBOPACK compile-time truthy", 1) {
            // omit JSON-LD structured data snippets from the warning
            if (c.type === 'script' && c.props['type'] !== 'application/ld+json') {
                const srcMessage = c.props['src'] ? '<script> tag with src="' + c.props['src'] + '"' : "inline <script>";
                (0, _warnonce.warnOnce)("Do not add <script> tags using next/head (see " + srcMessage + "). Use next/script instead. \nSee more info here: https://nextjs.org/docs/messages/no-script-tags-in-head-component");
            } else if (c.type === 'link' && c.props['rel'] === 'stylesheet') {
                (0, _warnonce.warnOnce)('Do not add stylesheets using next/head (see <link rel="stylesheet"> tag with href="' + c.props['href'] + '"). Use Document instead. \nSee more info here: https://nextjs.org/docs/messages/no-stylesheets-in-head-component');
            }
        }
        return /*#__PURE__*/ _react.default.cloneElement(c, {
            key
        });
    });
}
/**
 * This component injects elements to `<head>` of your page.
 * To avoid duplicated `tags` in `<head>` you can use the `key` property, which will make sure every tag is only rendered once.
 */ function Head(param) {
    let { children } = param;
    const ampState = (0, _react.useContext)(_ampcontextsharedruntime.AmpStateContext);
    const headManager = (0, _react.useContext)(_headmanagercontextsharedruntime.HeadManagerContext);
    return /*#__PURE__*/ (0, _jsxruntime.jsx)(_sideeffect.default, {
        reduceComponentsToState: reduceComponents,
        headManager: headManager,
        inAmpMode: (0, _ampmode.isInAmpMode)(ampState),
        children: children
    });
}
const _default = Head;
if ((typeof exports.default === 'function' || typeof exports.default === 'object' && exports.default !== null) && typeof exports.default.__esModule === 'undefined') {
    Object.defineProperty(exports.default, '__esModule', {
        value: true
    });
    Object.assign(exports.default, exports);
    module.exports = exports.default;
} //# sourceMappingURL=head.js.map
}}),
"[project]/node_modules/next/dist/server/route-modules/app-page/vendored/contexts/image-config-context.js [app-ssr] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
module.exports = __turbopack_context__.r("[project]/node_modules/next/dist/server/route-modules/app-page/module.compiled.js [app-ssr] (ecmascript)").vendored['contexts'].ImageConfigContext; //# sourceMappingURL=image-config-context.js.map
}}),
"[project]/node_modules/next/dist/server/route-modules/app-page/vendored/contexts/router-context.js [app-ssr] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
module.exports = __turbopack_context__.r("[project]/node_modules/next/dist/server/route-modules/app-page/module.compiled.js [app-ssr] (ecmascript)").vendored['contexts'].RouterContext; //# sourceMappingURL=router-context.js.map
}}),
"[project]/node_modules/next/dist/compiled/picomatch/index.js [app-ssr] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
(()=>{
    "use strict";
    var t = {
        170: (t, e, u)=>{
            const n = u(510);
            const isWindows = ()=>{
                if (typeof navigator !== "undefined" && navigator.platform) {
                    const t = navigator.platform.toLowerCase();
                    return t === "win32" || t === "windows";
                }
                if (typeof process !== "undefined" && process.platform) {
                    return process.platform === "win32";
                }
                return false;
            };
            function picomatch(t, e, u = false) {
                if (e && (e.windows === null || e.windows === undefined)) {
                    e = {
                        ...e,
                        windows: isWindows()
                    };
                }
                return n(t, e, u);
            }
            Object.assign(picomatch, n);
            t.exports = picomatch;
        },
        154: (t)=>{
            const e = "\\\\/";
            const u = `[^${e}]`;
            const n = "\\.";
            const o = "\\+";
            const s = "\\?";
            const r = "\\/";
            const a = "(?=.)";
            const i = "[^/]";
            const c = `(?:${r}|$)`;
            const p = `(?:^|${r})`;
            const l = `${n}{1,2}${c}`;
            const f = `(?!${n})`;
            const A = `(?!${p}${l})`;
            const _ = `(?!${n}{0,1}${c})`;
            const R = `(?!${l})`;
            const E = `[^.${r}]`;
            const h = `${i}*?`;
            const g = "/";
            const b = {
                DOT_LITERAL: n,
                PLUS_LITERAL: o,
                QMARK_LITERAL: s,
                SLASH_LITERAL: r,
                ONE_CHAR: a,
                QMARK: i,
                END_ANCHOR: c,
                DOTS_SLASH: l,
                NO_DOT: f,
                NO_DOTS: A,
                NO_DOT_SLASH: _,
                NO_DOTS_SLASH: R,
                QMARK_NO_DOT: E,
                STAR: h,
                START_ANCHOR: p,
                SEP: g
            };
            const C = {
                ...b,
                SLASH_LITERAL: `[${e}]`,
                QMARK: u,
                STAR: `${u}*?`,
                DOTS_SLASH: `${n}{1,2}(?:[${e}]|$)`,
                NO_DOT: `(?!${n})`,
                NO_DOTS: `(?!(?:^|[${e}])${n}{1,2}(?:[${e}]|$))`,
                NO_DOT_SLASH: `(?!${n}{0,1}(?:[${e}]|$))`,
                NO_DOTS_SLASH: `(?!${n}{1,2}(?:[${e}]|$))`,
                QMARK_NO_DOT: `[^.${e}]`,
                START_ANCHOR: `(?:^|[${e}])`,
                END_ANCHOR: `(?:[${e}]|$)`,
                SEP: "\\"
            };
            const y = {
                alnum: "a-zA-Z0-9",
                alpha: "a-zA-Z",
                ascii: "\\x00-\\x7F",
                blank: " \\t",
                cntrl: "\\x00-\\x1F\\x7F",
                digit: "0-9",
                graph: "\\x21-\\x7E",
                lower: "a-z",
                print: "\\x20-\\x7E ",
                punct: "\\-!\"#$%&'()\\*+,./:;<=>?@[\\]^_`{|}~",
                space: " \\t\\r\\n\\v\\f",
                upper: "A-Z",
                word: "A-Za-z0-9_",
                xdigit: "A-Fa-f0-9"
            };
            t.exports = {
                MAX_LENGTH: 1024 * 64,
                POSIX_REGEX_SOURCE: y,
                REGEX_BACKSLASH: /\\(?![*+?^${}(|)[\]])/g,
                REGEX_NON_SPECIAL_CHARS: /^[^@![\].,$*+?^{}()|\\/]+/,
                REGEX_SPECIAL_CHARS: /[-*+?.^${}(|)[\]]/,
                REGEX_SPECIAL_CHARS_BACKREF: /(\\?)((\W)(\3*))/g,
                REGEX_SPECIAL_CHARS_GLOBAL: /([-*+?.^${}(|)[\]])/g,
                REGEX_REMOVE_BACKSLASH: /(?:\[.*?[^\\]\]|\\(?=.))/g,
                REPLACEMENTS: {
                    "***": "*",
                    "**/**": "**",
                    "**/**/**": "**"
                },
                CHAR_0: 48,
                CHAR_9: 57,
                CHAR_UPPERCASE_A: 65,
                CHAR_LOWERCASE_A: 97,
                CHAR_UPPERCASE_Z: 90,
                CHAR_LOWERCASE_Z: 122,
                CHAR_LEFT_PARENTHESES: 40,
                CHAR_RIGHT_PARENTHESES: 41,
                CHAR_ASTERISK: 42,
                CHAR_AMPERSAND: 38,
                CHAR_AT: 64,
                CHAR_BACKWARD_SLASH: 92,
                CHAR_CARRIAGE_RETURN: 13,
                CHAR_CIRCUMFLEX_ACCENT: 94,
                CHAR_COLON: 58,
                CHAR_COMMA: 44,
                CHAR_DOT: 46,
                CHAR_DOUBLE_QUOTE: 34,
                CHAR_EQUAL: 61,
                CHAR_EXCLAMATION_MARK: 33,
                CHAR_FORM_FEED: 12,
                CHAR_FORWARD_SLASH: 47,
                CHAR_GRAVE_ACCENT: 96,
                CHAR_HASH: 35,
                CHAR_HYPHEN_MINUS: 45,
                CHAR_LEFT_ANGLE_BRACKET: 60,
                CHAR_LEFT_CURLY_BRACE: 123,
                CHAR_LEFT_SQUARE_BRACKET: 91,
                CHAR_LINE_FEED: 10,
                CHAR_NO_BREAK_SPACE: 160,
                CHAR_PERCENT: 37,
                CHAR_PLUS: 43,
                CHAR_QUESTION_MARK: 63,
                CHAR_RIGHT_ANGLE_BRACKET: 62,
                CHAR_RIGHT_CURLY_BRACE: 125,
                CHAR_RIGHT_SQUARE_BRACKET: 93,
                CHAR_SEMICOLON: 59,
                CHAR_SINGLE_QUOTE: 39,
                CHAR_SPACE: 32,
                CHAR_TAB: 9,
                CHAR_UNDERSCORE: 95,
                CHAR_VERTICAL_LINE: 124,
                CHAR_ZERO_WIDTH_NOBREAK_SPACE: 65279,
                extglobChars (t) {
                    return {
                        "!": {
                            type: "negate",
                            open: "(?:(?!(?:",
                            close: `))${t.STAR})`
                        },
                        "?": {
                            type: "qmark",
                            open: "(?:",
                            close: ")?"
                        },
                        "+": {
                            type: "plus",
                            open: "(?:",
                            close: ")+"
                        },
                        "*": {
                            type: "star",
                            open: "(?:",
                            close: ")*"
                        },
                        "@": {
                            type: "at",
                            open: "(?:",
                            close: ")"
                        }
                    };
                },
                globChars (t) {
                    return t === true ? C : b;
                }
            };
        },
        697: (t, e, u)=>{
            const n = u(154);
            const o = u(96);
            const { MAX_LENGTH: s, POSIX_REGEX_SOURCE: r, REGEX_NON_SPECIAL_CHARS: a, REGEX_SPECIAL_CHARS_BACKREF: i, REPLACEMENTS: c } = n;
            const expandRange = (t, e)=>{
                if (typeof e.expandRange === "function") {
                    return e.expandRange(...t, e);
                }
                t.sort();
                const u = `[${t.join("-")}]`;
                try {
                    new RegExp(u);
                } catch (e) {
                    return t.map((t)=>o.escapeRegex(t)).join("..");
                }
                return u;
            };
            const syntaxError = (t, e)=>`Missing ${t}: "${e}" - use "\\\\${e}" to match literal characters`;
            const parse = (t, e)=>{
                if (typeof t !== "string") {
                    throw new TypeError("Expected a string");
                }
                t = c[t] || t;
                const u = {
                    ...e
                };
                const p = typeof u.maxLength === "number" ? Math.min(s, u.maxLength) : s;
                let l = t.length;
                if (l > p) {
                    throw new SyntaxError(`Input length: ${l}, exceeds maximum allowed length: ${p}`);
                }
                const f = {
                    type: "bos",
                    value: "",
                    output: u.prepend || ""
                };
                const A = [
                    f
                ];
                const _ = u.capture ? "" : "?:";
                const R = n.globChars(u.windows);
                const E = n.extglobChars(R);
                const { DOT_LITERAL: h, PLUS_LITERAL: g, SLASH_LITERAL: b, ONE_CHAR: C, DOTS_SLASH: y, NO_DOT: $, NO_DOT_SLASH: x, NO_DOTS_SLASH: S, QMARK: H, QMARK_NO_DOT: v, STAR: d, START_ANCHOR: L } = R;
                const globstar = (t)=>`(${_}(?:(?!${L}${t.dot ? y : h}).)*?)`;
                const T = u.dot ? "" : $;
                const O = u.dot ? H : v;
                let k = u.bash === true ? globstar(u) : d;
                if (u.capture) {
                    k = `(${k})`;
                }
                if (typeof u.noext === "boolean") {
                    u.noextglob = u.noext;
                }
                const m = {
                    input: t,
                    index: -1,
                    start: 0,
                    dot: u.dot === true,
                    consumed: "",
                    output: "",
                    prefix: "",
                    backtrack: false,
                    negated: false,
                    brackets: 0,
                    braces: 0,
                    parens: 0,
                    quotes: 0,
                    globstar: false,
                    tokens: A
                };
                t = o.removePrefix(t, m);
                l = t.length;
                const w = [];
                const N = [];
                const I = [];
                let B = f;
                let G;
                const eos = ()=>m.index === l - 1;
                const D = m.peek = (e = 1)=>t[m.index + e];
                const M = m.advance = ()=>t[++m.index] || "";
                const remaining = ()=>t.slice(m.index + 1);
                const consume = (t = "", e = 0)=>{
                    m.consumed += t;
                    m.index += e;
                };
                const append = (t)=>{
                    m.output += t.output != null ? t.output : t.value;
                    consume(t.value);
                };
                const negate = ()=>{
                    let t = 1;
                    while(D() === "!" && (D(2) !== "(" || D(3) === "?")){
                        M();
                        m.start++;
                        t++;
                    }
                    if (t % 2 === 0) {
                        return false;
                    }
                    m.negated = true;
                    m.start++;
                    return true;
                };
                const increment = (t)=>{
                    m[t]++;
                    I.push(t);
                };
                const decrement = (t)=>{
                    m[t]--;
                    I.pop();
                };
                const push = (t)=>{
                    if (B.type === "globstar") {
                        const e = m.braces > 0 && (t.type === "comma" || t.type === "brace");
                        const u = t.extglob === true || w.length && (t.type === "pipe" || t.type === "paren");
                        if (t.type !== "slash" && t.type !== "paren" && !e && !u) {
                            m.output = m.output.slice(0, -B.output.length);
                            B.type = "star";
                            B.value = "*";
                            B.output = k;
                            m.output += B.output;
                        }
                    }
                    if (w.length && t.type !== "paren") {
                        w[w.length - 1].inner += t.value;
                    }
                    if (t.value || t.output) append(t);
                    if (B && B.type === "text" && t.type === "text") {
                        B.output = (B.output || B.value) + t.value;
                        B.value += t.value;
                        return;
                    }
                    t.prev = B;
                    A.push(t);
                    B = t;
                };
                const extglobOpen = (t, e)=>{
                    const n = {
                        ...E[e],
                        conditions: 1,
                        inner: ""
                    };
                    n.prev = B;
                    n.parens = m.parens;
                    n.output = m.output;
                    const o = (u.capture ? "(" : "") + n.open;
                    increment("parens");
                    push({
                        type: t,
                        value: e,
                        output: m.output ? "" : C
                    });
                    push({
                        type: "paren",
                        extglob: true,
                        value: M(),
                        output: o
                    });
                    w.push(n);
                };
                const extglobClose = (t)=>{
                    let n = t.close + (u.capture ? ")" : "");
                    let o;
                    if (t.type === "negate") {
                        let s = k;
                        if (t.inner && t.inner.length > 1 && t.inner.includes("/")) {
                            s = globstar(u);
                        }
                        if (s !== k || eos() || /^\)+$/.test(remaining())) {
                            n = t.close = `)$))${s}`;
                        }
                        if (t.inner.includes("*") && (o = remaining()) && /^\.[^\\/.]+$/.test(o)) {
                            const u = parse(o, {
                                ...e,
                                fastpaths: false
                            }).output;
                            n = t.close = `)${u})${s})`;
                        }
                        if (t.prev.type === "bos") {
                            m.negatedExtglob = true;
                        }
                    }
                    push({
                        type: "paren",
                        extglob: true,
                        value: G,
                        output: n
                    });
                    decrement("parens");
                };
                if (u.fastpaths !== false && !/(^[*!]|[/()[\]{}"])/.test(t)) {
                    let n = false;
                    let s = t.replace(i, (t, e, u, o, s, r)=>{
                        if (o === "\\") {
                            n = true;
                            return t;
                        }
                        if (o === "?") {
                            if (e) {
                                return e + o + (s ? H.repeat(s.length) : "");
                            }
                            if (r === 0) {
                                return O + (s ? H.repeat(s.length) : "");
                            }
                            return H.repeat(u.length);
                        }
                        if (o === ".") {
                            return h.repeat(u.length);
                        }
                        if (o === "*") {
                            if (e) {
                                return e + o + (s ? k : "");
                            }
                            return k;
                        }
                        return e ? t : `\\${t}`;
                    });
                    if (n === true) {
                        if (u.unescape === true) {
                            s = s.replace(/\\/g, "");
                        } else {
                            s = s.replace(/\\+/g, (t)=>t.length % 2 === 0 ? "\\\\" : t ? "\\" : "");
                        }
                    }
                    if (s === t && u.contains === true) {
                        m.output = t;
                        return m;
                    }
                    m.output = o.wrapOutput(s, m, e);
                    return m;
                }
                while(!eos()){
                    G = M();
                    if (G === "\0") {
                        continue;
                    }
                    if (G === "\\") {
                        const t = D();
                        if (t === "/" && u.bash !== true) {
                            continue;
                        }
                        if (t === "." || t === ";") {
                            continue;
                        }
                        if (!t) {
                            G += "\\";
                            push({
                                type: "text",
                                value: G
                            });
                            continue;
                        }
                        const e = /^\\+/.exec(remaining());
                        let n = 0;
                        if (e && e[0].length > 2) {
                            n = e[0].length;
                            m.index += n;
                            if (n % 2 !== 0) {
                                G += "\\";
                            }
                        }
                        if (u.unescape === true) {
                            G = M();
                        } else {
                            G += M();
                        }
                        if (m.brackets === 0) {
                            push({
                                type: "text",
                                value: G
                            });
                            continue;
                        }
                    }
                    if (m.brackets > 0 && (G !== "]" || B.value === "[" || B.value === "[^")) {
                        if (u.posix !== false && G === ":") {
                            const t = B.value.slice(1);
                            if (t.includes("[")) {
                                B.posix = true;
                                if (t.includes(":")) {
                                    const t = B.value.lastIndexOf("[");
                                    const e = B.value.slice(0, t);
                                    const u = B.value.slice(t + 2);
                                    const n = r[u];
                                    if (n) {
                                        B.value = e + n;
                                        m.backtrack = true;
                                        M();
                                        if (!f.output && A.indexOf(B) === 1) {
                                            f.output = C;
                                        }
                                        continue;
                                    }
                                }
                            }
                        }
                        if (G === "[" && D() !== ":" || G === "-" && D() === "]") {
                            G = `\\${G}`;
                        }
                        if (G === "]" && (B.value === "[" || B.value === "[^")) {
                            G = `\\${G}`;
                        }
                        if (u.posix === true && G === "!" && B.value === "[") {
                            G = "^";
                        }
                        B.value += G;
                        append({
                            value: G
                        });
                        continue;
                    }
                    if (m.quotes === 1 && G !== '"') {
                        G = o.escapeRegex(G);
                        B.value += G;
                        append({
                            value: G
                        });
                        continue;
                    }
                    if (G === '"') {
                        m.quotes = m.quotes === 1 ? 0 : 1;
                        if (u.keepQuotes === true) {
                            push({
                                type: "text",
                                value: G
                            });
                        }
                        continue;
                    }
                    if (G === "(") {
                        increment("parens");
                        push({
                            type: "paren",
                            value: G
                        });
                        continue;
                    }
                    if (G === ")") {
                        if (m.parens === 0 && u.strictBrackets === true) {
                            throw new SyntaxError(syntaxError("opening", "("));
                        }
                        const t = w[w.length - 1];
                        if (t && m.parens === t.parens + 1) {
                            extglobClose(w.pop());
                            continue;
                        }
                        push({
                            type: "paren",
                            value: G,
                            output: m.parens ? ")" : "\\)"
                        });
                        decrement("parens");
                        continue;
                    }
                    if (G === "[") {
                        if (u.nobracket === true || !remaining().includes("]")) {
                            if (u.nobracket !== true && u.strictBrackets === true) {
                                throw new SyntaxError(syntaxError("closing", "]"));
                            }
                            G = `\\${G}`;
                        } else {
                            increment("brackets");
                        }
                        push({
                            type: "bracket",
                            value: G
                        });
                        continue;
                    }
                    if (G === "]") {
                        if (u.nobracket === true || B && B.type === "bracket" && B.value.length === 1) {
                            push({
                                type: "text",
                                value: G,
                                output: `\\${G}`
                            });
                            continue;
                        }
                        if (m.brackets === 0) {
                            if (u.strictBrackets === true) {
                                throw new SyntaxError(syntaxError("opening", "["));
                            }
                            push({
                                type: "text",
                                value: G,
                                output: `\\${G}`
                            });
                            continue;
                        }
                        decrement("brackets");
                        const t = B.value.slice(1);
                        if (B.posix !== true && t[0] === "^" && !t.includes("/")) {
                            G = `/${G}`;
                        }
                        B.value += G;
                        append({
                            value: G
                        });
                        if (u.literalBrackets === false || o.hasRegexChars(t)) {
                            continue;
                        }
                        const e = o.escapeRegex(B.value);
                        m.output = m.output.slice(0, -B.value.length);
                        if (u.literalBrackets === true) {
                            m.output += e;
                            B.value = e;
                            continue;
                        }
                        B.value = `(${_}${e}|${B.value})`;
                        m.output += B.value;
                        continue;
                    }
                    if (G === "{" && u.nobrace !== true) {
                        increment("braces");
                        const t = {
                            type: "brace",
                            value: G,
                            output: "(",
                            outputIndex: m.output.length,
                            tokensIndex: m.tokens.length
                        };
                        N.push(t);
                        push(t);
                        continue;
                    }
                    if (G === "}") {
                        const t = N[N.length - 1];
                        if (u.nobrace === true || !t) {
                            push({
                                type: "text",
                                value: G,
                                output: G
                            });
                            continue;
                        }
                        let e = ")";
                        if (t.dots === true) {
                            const t = A.slice();
                            const n = [];
                            for(let e = t.length - 1; e >= 0; e--){
                                A.pop();
                                if (t[e].type === "brace") {
                                    break;
                                }
                                if (t[e].type !== "dots") {
                                    n.unshift(t[e].value);
                                }
                            }
                            e = expandRange(n, u);
                            m.backtrack = true;
                        }
                        if (t.comma !== true && t.dots !== true) {
                            const u = m.output.slice(0, t.outputIndex);
                            const n = m.tokens.slice(t.tokensIndex);
                            t.value = t.output = "\\{";
                            G = e = "\\}";
                            m.output = u;
                            for (const t of n){
                                m.output += t.output || t.value;
                            }
                        }
                        push({
                            type: "brace",
                            value: G,
                            output: e
                        });
                        decrement("braces");
                        N.pop();
                        continue;
                    }
                    if (G === "|") {
                        if (w.length > 0) {
                            w[w.length - 1].conditions++;
                        }
                        push({
                            type: "text",
                            value: G
                        });
                        continue;
                    }
                    if (G === ",") {
                        let t = G;
                        const e = N[N.length - 1];
                        if (e && I[I.length - 1] === "braces") {
                            e.comma = true;
                            t = "|";
                        }
                        push({
                            type: "comma",
                            value: G,
                            output: t
                        });
                        continue;
                    }
                    if (G === "/") {
                        if (B.type === "dot" && m.index === m.start + 1) {
                            m.start = m.index + 1;
                            m.consumed = "";
                            m.output = "";
                            A.pop();
                            B = f;
                            continue;
                        }
                        push({
                            type: "slash",
                            value: G,
                            output: b
                        });
                        continue;
                    }
                    if (G === ".") {
                        if (m.braces > 0 && B.type === "dot") {
                            if (B.value === ".") B.output = h;
                            const t = N[N.length - 1];
                            B.type = "dots";
                            B.output += G;
                            B.value += G;
                            t.dots = true;
                            continue;
                        }
                        if (m.braces + m.parens === 0 && B.type !== "bos" && B.type !== "slash") {
                            push({
                                type: "text",
                                value: G,
                                output: h
                            });
                            continue;
                        }
                        push({
                            type: "dot",
                            value: G,
                            output: h
                        });
                        continue;
                    }
                    if (G === "?") {
                        const t = B && B.value === "(";
                        if (!t && u.noextglob !== true && D() === "(" && D(2) !== "?") {
                            extglobOpen("qmark", G);
                            continue;
                        }
                        if (B && B.type === "paren") {
                            const t = D();
                            let e = G;
                            if (B.value === "(" && !/[!=<:]/.test(t) || t === "<" && !/<([!=]|\w+>)/.test(remaining())) {
                                e = `\\${G}`;
                            }
                            push({
                                type: "text",
                                value: G,
                                output: e
                            });
                            continue;
                        }
                        if (u.dot !== true && (B.type === "slash" || B.type === "bos")) {
                            push({
                                type: "qmark",
                                value: G,
                                output: v
                            });
                            continue;
                        }
                        push({
                            type: "qmark",
                            value: G,
                            output: H
                        });
                        continue;
                    }
                    if (G === "!") {
                        if (u.noextglob !== true && D() === "(") {
                            if (D(2) !== "?" || !/[!=<:]/.test(D(3))) {
                                extglobOpen("negate", G);
                                continue;
                            }
                        }
                        if (u.nonegate !== true && m.index === 0) {
                            negate();
                            continue;
                        }
                    }
                    if (G === "+") {
                        if (u.noextglob !== true && D() === "(" && D(2) !== "?") {
                            extglobOpen("plus", G);
                            continue;
                        }
                        if (B && B.value === "(" || u.regex === false) {
                            push({
                                type: "plus",
                                value: G,
                                output: g
                            });
                            continue;
                        }
                        if (B && (B.type === "bracket" || B.type === "paren" || B.type === "brace") || m.parens > 0) {
                            push({
                                type: "plus",
                                value: G
                            });
                            continue;
                        }
                        push({
                            type: "plus",
                            value: g
                        });
                        continue;
                    }
                    if (G === "@") {
                        if (u.noextglob !== true && D() === "(" && D(2) !== "?") {
                            push({
                                type: "at",
                                extglob: true,
                                value: G,
                                output: ""
                            });
                            continue;
                        }
                        push({
                            type: "text",
                            value: G
                        });
                        continue;
                    }
                    if (G !== "*") {
                        if (G === "$" || G === "^") {
                            G = `\\${G}`;
                        }
                        const t = a.exec(remaining());
                        if (t) {
                            G += t[0];
                            m.index += t[0].length;
                        }
                        push({
                            type: "text",
                            value: G
                        });
                        continue;
                    }
                    if (B && (B.type === "globstar" || B.star === true)) {
                        B.type = "star";
                        B.star = true;
                        B.value += G;
                        B.output = k;
                        m.backtrack = true;
                        m.globstar = true;
                        consume(G);
                        continue;
                    }
                    let e = remaining();
                    if (u.noextglob !== true && /^\([^?]/.test(e)) {
                        extglobOpen("star", G);
                        continue;
                    }
                    if (B.type === "star") {
                        if (u.noglobstar === true) {
                            consume(G);
                            continue;
                        }
                        const n = B.prev;
                        const o = n.prev;
                        const s = n.type === "slash" || n.type === "bos";
                        const r = o && (o.type === "star" || o.type === "globstar");
                        if (u.bash === true && (!s || e[0] && e[0] !== "/")) {
                            push({
                                type: "star",
                                value: G,
                                output: ""
                            });
                            continue;
                        }
                        const a = m.braces > 0 && (n.type === "comma" || n.type === "brace");
                        const i = w.length && (n.type === "pipe" || n.type === "paren");
                        if (!s && n.type !== "paren" && !a && !i) {
                            push({
                                type: "star",
                                value: G,
                                output: ""
                            });
                            continue;
                        }
                        while(e.slice(0, 3) === "/**"){
                            const u = t[m.index + 4];
                            if (u && u !== "/") {
                                break;
                            }
                            e = e.slice(3);
                            consume("/**", 3);
                        }
                        if (n.type === "bos" && eos()) {
                            B.type = "globstar";
                            B.value += G;
                            B.output = globstar(u);
                            m.output = B.output;
                            m.globstar = true;
                            consume(G);
                            continue;
                        }
                        if (n.type === "slash" && n.prev.type !== "bos" && !r && eos()) {
                            m.output = m.output.slice(0, -(n.output + B.output).length);
                            n.output = `(?:${n.output}`;
                            B.type = "globstar";
                            B.output = globstar(u) + (u.strictSlashes ? ")" : "|$)");
                            B.value += G;
                            m.globstar = true;
                            m.output += n.output + B.output;
                            consume(G);
                            continue;
                        }
                        if (n.type === "slash" && n.prev.type !== "bos" && e[0] === "/") {
                            const t = e[1] !== void 0 ? "|$" : "";
                            m.output = m.output.slice(0, -(n.output + B.output).length);
                            n.output = `(?:${n.output}`;
                            B.type = "globstar";
                            B.output = `${globstar(u)}${b}|${b}${t})`;
                            B.value += G;
                            m.output += n.output + B.output;
                            m.globstar = true;
                            consume(G + M());
                            push({
                                type: "slash",
                                value: "/",
                                output: ""
                            });
                            continue;
                        }
                        if (n.type === "bos" && e[0] === "/") {
                            B.type = "globstar";
                            B.value += G;
                            B.output = `(?:^|${b}|${globstar(u)}${b})`;
                            m.output = B.output;
                            m.globstar = true;
                            consume(G + M());
                            push({
                                type: "slash",
                                value: "/",
                                output: ""
                            });
                            continue;
                        }
                        m.output = m.output.slice(0, -B.output.length);
                        B.type = "globstar";
                        B.output = globstar(u);
                        B.value += G;
                        m.output += B.output;
                        m.globstar = true;
                        consume(G);
                        continue;
                    }
                    const n = {
                        type: "star",
                        value: G,
                        output: k
                    };
                    if (u.bash === true) {
                        n.output = ".*?";
                        if (B.type === "bos" || B.type === "slash") {
                            n.output = T + n.output;
                        }
                        push(n);
                        continue;
                    }
                    if (B && (B.type === "bracket" || B.type === "paren") && u.regex === true) {
                        n.output = G;
                        push(n);
                        continue;
                    }
                    if (m.index === m.start || B.type === "slash" || B.type === "dot") {
                        if (B.type === "dot") {
                            m.output += x;
                            B.output += x;
                        } else if (u.dot === true) {
                            m.output += S;
                            B.output += S;
                        } else {
                            m.output += T;
                            B.output += T;
                        }
                        if (D() !== "*") {
                            m.output += C;
                            B.output += C;
                        }
                    }
                    push(n);
                }
                while(m.brackets > 0){
                    if (u.strictBrackets === true) throw new SyntaxError(syntaxError("closing", "]"));
                    m.output = o.escapeLast(m.output, "[");
                    decrement("brackets");
                }
                while(m.parens > 0){
                    if (u.strictBrackets === true) throw new SyntaxError(syntaxError("closing", ")"));
                    m.output = o.escapeLast(m.output, "(");
                    decrement("parens");
                }
                while(m.braces > 0){
                    if (u.strictBrackets === true) throw new SyntaxError(syntaxError("closing", "}"));
                    m.output = o.escapeLast(m.output, "{");
                    decrement("braces");
                }
                if (u.strictSlashes !== true && (B.type === "star" || B.type === "bracket")) {
                    push({
                        type: "maybe_slash",
                        value: "",
                        output: `${b}?`
                    });
                }
                if (m.backtrack === true) {
                    m.output = "";
                    for (const t of m.tokens){
                        m.output += t.output != null ? t.output : t.value;
                        if (t.suffix) {
                            m.output += t.suffix;
                        }
                    }
                }
                return m;
            };
            parse.fastpaths = (t, e)=>{
                const u = {
                    ...e
                };
                const r = typeof u.maxLength === "number" ? Math.min(s, u.maxLength) : s;
                const a = t.length;
                if (a > r) {
                    throw new SyntaxError(`Input length: ${a}, exceeds maximum allowed length: ${r}`);
                }
                t = c[t] || t;
                const { DOT_LITERAL: i, SLASH_LITERAL: p, ONE_CHAR: l, DOTS_SLASH: f, NO_DOT: A, NO_DOTS: _, NO_DOTS_SLASH: R, STAR: E, START_ANCHOR: h } = n.globChars(u.windows);
                const g = u.dot ? _ : A;
                const b = u.dot ? R : A;
                const C = u.capture ? "" : "?:";
                const y = {
                    negated: false,
                    prefix: ""
                };
                let $ = u.bash === true ? ".*?" : E;
                if (u.capture) {
                    $ = `(${$})`;
                }
                const globstar = (t)=>{
                    if (t.noglobstar === true) return $;
                    return `(${C}(?:(?!${h}${t.dot ? f : i}).)*?)`;
                };
                const create = (t)=>{
                    switch(t){
                        case "*":
                            return `${g}${l}${$}`;
                        case ".*":
                            return `${i}${l}${$}`;
                        case "*.*":
                            return `${g}${$}${i}${l}${$}`;
                        case "*/*":
                            return `${g}${$}${p}${l}${b}${$}`;
                        case "**":
                            return g + globstar(u);
                        case "**/*":
                            return `(?:${g}${globstar(u)}${p})?${b}${l}${$}`;
                        case "**/*.*":
                            return `(?:${g}${globstar(u)}${p})?${b}${$}${i}${l}${$}`;
                        case "**/.*":
                            return `(?:${g}${globstar(u)}${p})?${i}${l}${$}`;
                        default:
                            {
                                const e = /^(.*?)\.(\w+)$/.exec(t);
                                if (!e) return;
                                const u = create(e[1]);
                                if (!u) return;
                                return u + i + e[2];
                            }
                    }
                };
                const x = o.removePrefix(t, y);
                let S = create(x);
                if (S && u.strictSlashes !== true) {
                    S += `${p}?`;
                }
                return S;
            };
            t.exports = parse;
        },
        510: (t, e, u)=>{
            const n = u(716);
            const o = u(697);
            const s = u(96);
            const r = u(154);
            const isObject = (t)=>t && typeof t === "object" && !Array.isArray(t);
            const picomatch = (t, e, u = false)=>{
                if (Array.isArray(t)) {
                    const n = t.map((t)=>picomatch(t, e, u));
                    const arrayMatcher = (t)=>{
                        for (const e of n){
                            const u = e(t);
                            if (u) return u;
                        }
                        return false;
                    };
                    return arrayMatcher;
                }
                const n = isObject(t) && t.tokens && t.input;
                if (t === "" || typeof t !== "string" && !n) {
                    throw new TypeError("Expected pattern to be a non-empty string");
                }
                const o = e || {};
                const s = o.windows;
                const r = n ? picomatch.compileRe(t, e) : picomatch.makeRe(t, e, false, true);
                const a = r.state;
                delete r.state;
                let isIgnored = ()=>false;
                if (o.ignore) {
                    const t = {
                        ...e,
                        ignore: null,
                        onMatch: null,
                        onResult: null
                    };
                    isIgnored = picomatch(o.ignore, t, u);
                }
                const matcher = (u, n = false)=>{
                    const { isMatch: i, match: c, output: p } = picomatch.test(u, r, e, {
                        glob: t,
                        posix: s
                    });
                    const l = {
                        glob: t,
                        state: a,
                        regex: r,
                        posix: s,
                        input: u,
                        output: p,
                        match: c,
                        isMatch: i
                    };
                    if (typeof o.onResult === "function") {
                        o.onResult(l);
                    }
                    if (i === false) {
                        l.isMatch = false;
                        return n ? l : false;
                    }
                    if (isIgnored(u)) {
                        if (typeof o.onIgnore === "function") {
                            o.onIgnore(l);
                        }
                        l.isMatch = false;
                        return n ? l : false;
                    }
                    if (typeof o.onMatch === "function") {
                        o.onMatch(l);
                    }
                    return n ? l : true;
                };
                if (u) {
                    matcher.state = a;
                }
                return matcher;
            };
            picomatch.test = (t, e, u, { glob: n, posix: o } = {})=>{
                if (typeof t !== "string") {
                    throw new TypeError("Expected input to be a string");
                }
                if (t === "") {
                    return {
                        isMatch: false,
                        output: ""
                    };
                }
                const r = u || {};
                const a = r.format || (o ? s.toPosixSlashes : null);
                let i = t === n;
                let c = i && a ? a(t) : t;
                if (i === false) {
                    c = a ? a(t) : t;
                    i = c === n;
                }
                if (i === false || r.capture === true) {
                    if (r.matchBase === true || r.basename === true) {
                        i = picomatch.matchBase(t, e, u, o);
                    } else {
                        i = e.exec(c);
                    }
                }
                return {
                    isMatch: Boolean(i),
                    match: i,
                    output: c
                };
            };
            picomatch.matchBase = (t, e, u)=>{
                const n = e instanceof RegExp ? e : picomatch.makeRe(e, u);
                return n.test(s.basename(t));
            };
            picomatch.isMatch = (t, e, u)=>picomatch(e, u)(t);
            picomatch.parse = (t, e)=>{
                if (Array.isArray(t)) return t.map((t)=>picomatch.parse(t, e));
                return o(t, {
                    ...e,
                    fastpaths: false
                });
            };
            picomatch.scan = (t, e)=>n(t, e);
            picomatch.compileRe = (t, e, u = false, n = false)=>{
                if (u === true) {
                    return t.output;
                }
                const o = e || {};
                const s = o.contains ? "" : "^";
                const r = o.contains ? "" : "$";
                let a = `${s}(?:${t.output})${r}`;
                if (t && t.negated === true) {
                    a = `^(?!${a}).*$`;
                }
                const i = picomatch.toRegex(a, e);
                if (n === true) {
                    i.state = t;
                }
                return i;
            };
            picomatch.makeRe = (t, e = {}, u = false, n = false)=>{
                if (!t || typeof t !== "string") {
                    throw new TypeError("Expected a non-empty string");
                }
                let s = {
                    negated: false,
                    fastpaths: true
                };
                if (e.fastpaths !== false && (t[0] === "." || t[0] === "*")) {
                    s.output = o.fastpaths(t, e);
                }
                if (!s.output) {
                    s = o(t, e);
                }
                return picomatch.compileRe(s, e, u, n);
            };
            picomatch.toRegex = (t, e)=>{
                try {
                    const u = e || {};
                    return new RegExp(t, u.flags || (u.nocase ? "i" : ""));
                } catch (t) {
                    if (e && e.debug === true) throw t;
                    return /$^/;
                }
            };
            picomatch.constants = r;
            t.exports = picomatch;
        },
        716: (t, e, u)=>{
            const n = u(96);
            const { CHAR_ASTERISK: o, CHAR_AT: s, CHAR_BACKWARD_SLASH: r, CHAR_COMMA: a, CHAR_DOT: i, CHAR_EXCLAMATION_MARK: c, CHAR_FORWARD_SLASH: p, CHAR_LEFT_CURLY_BRACE: l, CHAR_LEFT_PARENTHESES: f, CHAR_LEFT_SQUARE_BRACKET: A, CHAR_PLUS: _, CHAR_QUESTION_MARK: R, CHAR_RIGHT_CURLY_BRACE: E, CHAR_RIGHT_PARENTHESES: h, CHAR_RIGHT_SQUARE_BRACKET: g } = u(154);
            const isPathSeparator = (t)=>t === p || t === r;
            const depth = (t)=>{
                if (t.isPrefix !== true) {
                    t.depth = t.isGlobstar ? Infinity : 1;
                }
            };
            const scan = (t, e)=>{
                const u = e || {};
                const b = t.length - 1;
                const C = u.parts === true || u.scanToEnd === true;
                const y = [];
                const $ = [];
                const x = [];
                let S = t;
                let H = -1;
                let v = 0;
                let d = 0;
                let L = false;
                let T = false;
                let O = false;
                let k = false;
                let m = false;
                let w = false;
                let N = false;
                let I = false;
                let B = false;
                let G = false;
                let D = 0;
                let M;
                let P;
                let K = {
                    value: "",
                    depth: 0,
                    isGlob: false
                };
                const eos = ()=>H >= b;
                const peek = ()=>S.charCodeAt(H + 1);
                const advance = ()=>{
                    M = P;
                    return S.charCodeAt(++H);
                };
                while(H < b){
                    P = advance();
                    let t;
                    if (P === r) {
                        N = K.backslashes = true;
                        P = advance();
                        if (P === l) {
                            w = true;
                        }
                        continue;
                    }
                    if (w === true || P === l) {
                        D++;
                        while(eos() !== true && (P = advance())){
                            if (P === r) {
                                N = K.backslashes = true;
                                advance();
                                continue;
                            }
                            if (P === l) {
                                D++;
                                continue;
                            }
                            if (w !== true && P === i && (P = advance()) === i) {
                                L = K.isBrace = true;
                                O = K.isGlob = true;
                                G = true;
                                if (C === true) {
                                    continue;
                                }
                                break;
                            }
                            if (w !== true && P === a) {
                                L = K.isBrace = true;
                                O = K.isGlob = true;
                                G = true;
                                if (C === true) {
                                    continue;
                                }
                                break;
                            }
                            if (P === E) {
                                D--;
                                if (D === 0) {
                                    w = false;
                                    L = K.isBrace = true;
                                    G = true;
                                    break;
                                }
                            }
                        }
                        if (C === true) {
                            continue;
                        }
                        break;
                    }
                    if (P === p) {
                        y.push(H);
                        $.push(K);
                        K = {
                            value: "",
                            depth: 0,
                            isGlob: false
                        };
                        if (G === true) continue;
                        if (M === i && H === v + 1) {
                            v += 2;
                            continue;
                        }
                        d = H + 1;
                        continue;
                    }
                    if (u.noext !== true) {
                        const t = P === _ || P === s || P === o || P === R || P === c;
                        if (t === true && peek() === f) {
                            O = K.isGlob = true;
                            k = K.isExtglob = true;
                            G = true;
                            if (P === c && H === v) {
                                B = true;
                            }
                            if (C === true) {
                                while(eos() !== true && (P = advance())){
                                    if (P === r) {
                                        N = K.backslashes = true;
                                        P = advance();
                                        continue;
                                    }
                                    if (P === h) {
                                        O = K.isGlob = true;
                                        G = true;
                                        break;
                                    }
                                }
                                continue;
                            }
                            break;
                        }
                    }
                    if (P === o) {
                        if (M === o) m = K.isGlobstar = true;
                        O = K.isGlob = true;
                        G = true;
                        if (C === true) {
                            continue;
                        }
                        break;
                    }
                    if (P === R) {
                        O = K.isGlob = true;
                        G = true;
                        if (C === true) {
                            continue;
                        }
                        break;
                    }
                    if (P === A) {
                        while(eos() !== true && (t = advance())){
                            if (t === r) {
                                N = K.backslashes = true;
                                advance();
                                continue;
                            }
                            if (t === g) {
                                T = K.isBracket = true;
                                O = K.isGlob = true;
                                G = true;
                                break;
                            }
                        }
                        if (C === true) {
                            continue;
                        }
                        break;
                    }
                    if (u.nonegate !== true && P === c && H === v) {
                        I = K.negated = true;
                        v++;
                        continue;
                    }
                    if (u.noparen !== true && P === f) {
                        O = K.isGlob = true;
                        if (C === true) {
                            while(eos() !== true && (P = advance())){
                                if (P === f) {
                                    N = K.backslashes = true;
                                    P = advance();
                                    continue;
                                }
                                if (P === h) {
                                    G = true;
                                    break;
                                }
                            }
                            continue;
                        }
                        break;
                    }
                    if (O === true) {
                        G = true;
                        if (C === true) {
                            continue;
                        }
                        break;
                    }
                }
                if (u.noext === true) {
                    k = false;
                    O = false;
                }
                let U = S;
                let X = "";
                let F = "";
                if (v > 0) {
                    X = S.slice(0, v);
                    S = S.slice(v);
                    d -= v;
                }
                if (U && O === true && d > 0) {
                    U = S.slice(0, d);
                    F = S.slice(d);
                } else if (O === true) {
                    U = "";
                    F = S;
                } else {
                    U = S;
                }
                if (U && U !== "" && U !== "/" && U !== S) {
                    if (isPathSeparator(U.charCodeAt(U.length - 1))) {
                        U = U.slice(0, -1);
                    }
                }
                if (u.unescape === true) {
                    if (F) F = n.removeBackslashes(F);
                    if (U && N === true) {
                        U = n.removeBackslashes(U);
                    }
                }
                const Q = {
                    prefix: X,
                    input: t,
                    start: v,
                    base: U,
                    glob: F,
                    isBrace: L,
                    isBracket: T,
                    isGlob: O,
                    isExtglob: k,
                    isGlobstar: m,
                    negated: I,
                    negatedExtglob: B
                };
                if (u.tokens === true) {
                    Q.maxDepth = 0;
                    if (!isPathSeparator(P)) {
                        $.push(K);
                    }
                    Q.tokens = $;
                }
                if (u.parts === true || u.tokens === true) {
                    let e;
                    for(let n = 0; n < y.length; n++){
                        const o = e ? e + 1 : v;
                        const s = y[n];
                        const r = t.slice(o, s);
                        if (u.tokens) {
                            if (n === 0 && v !== 0) {
                                $[n].isPrefix = true;
                                $[n].value = X;
                            } else {
                                $[n].value = r;
                            }
                            depth($[n]);
                            Q.maxDepth += $[n].depth;
                        }
                        if (n !== 0 || r !== "") {
                            x.push(r);
                        }
                        e = s;
                    }
                    if (e && e + 1 < t.length) {
                        const n = t.slice(e + 1);
                        x.push(n);
                        if (u.tokens) {
                            $[$.length - 1].value = n;
                            depth($[$.length - 1]);
                            Q.maxDepth += $[$.length - 1].depth;
                        }
                    }
                    Q.slashes = y;
                    Q.parts = x;
                }
                return Q;
            };
            t.exports = scan;
        },
        96: (t, e, u)=>{
            const { REGEX_BACKSLASH: n, REGEX_REMOVE_BACKSLASH: o, REGEX_SPECIAL_CHARS: s, REGEX_SPECIAL_CHARS_GLOBAL: r } = u(154);
            e.isObject = (t)=>t !== null && typeof t === "object" && !Array.isArray(t);
            e.hasRegexChars = (t)=>s.test(t);
            e.isRegexChar = (t)=>t.length === 1 && e.hasRegexChars(t);
            e.escapeRegex = (t)=>t.replace(r, "\\$1");
            e.toPosixSlashes = (t)=>t.replace(n, "/");
            e.removeBackslashes = (t)=>t.replace(o, (t)=>t === "\\" ? "" : t);
            e.escapeLast = (t, u, n)=>{
                const o = t.lastIndexOf(u, n);
                if (o === -1) return t;
                if (t[o - 1] === "\\") return e.escapeLast(t, u, o - 1);
                return `${t.slice(0, o)}\\${t.slice(o)}`;
            };
            e.removePrefix = (t, e = {})=>{
                let u = t;
                if (u.startsWith("./")) {
                    u = u.slice(2);
                    e.prefix = "./";
                }
                return u;
            };
            e.wrapOutput = (t, e = {}, u = {})=>{
                const n = u.contains ? "" : "^";
                const o = u.contains ? "" : "$";
                let s = `${n}(?:${t})${o}`;
                if (e.negated === true) {
                    s = `(?:^(?!${s}).*$)`;
                }
                return s;
            };
            e.basename = (t, { windows: e } = {})=>{
                const u = t.split(e ? /[\\/]/ : "/");
                const n = u[u.length - 1];
                if (n === "") {
                    return u[u.length - 2];
                }
                return n;
            };
        }
    };
    var e = {};
    function __nccwpck_require__(u) {
        var n = e[u];
        if (n !== undefined) {
            return n.exports;
        }
        var o = e[u] = {
            exports: {}
        };
        var s = true;
        try {
            t[u](o, o.exports, __nccwpck_require__);
            s = false;
        } finally{
            if (s) delete e[u];
        }
        return o.exports;
    }
    if (typeof __nccwpck_require__ !== "undefined") __nccwpck_require__.ab = __dirname + "/";
    var u = __nccwpck_require__(170);
    module.exports = u;
})();
}}),
"[project]/node_modules/next/dist/shared/lib/match-local-pattern.js [app-ssr] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
0 && (module.exports = {
    hasLocalMatch: null,
    matchLocalPattern: null
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    hasLocalMatch: function() {
        return hasLocalMatch;
    },
    matchLocalPattern: function() {
        return matchLocalPattern;
    }
});
const _picomatch = __turbopack_context__.r("[project]/node_modules/next/dist/compiled/picomatch/index.js [app-ssr] (ecmascript)");
function matchLocalPattern(pattern, url) {
    if (pattern.search !== undefined) {
        if (pattern.search !== url.search) {
            return false;
        }
    }
    var _pattern_pathname;
    if (!(0, _picomatch.makeRe)((_pattern_pathname = pattern.pathname) != null ? _pattern_pathname : '**', {
        dot: true
    }).test(url.pathname)) {
        return false;
    }
    return true;
}
function hasLocalMatch(localPatterns, urlPathAndQuery) {
    if (!localPatterns) {
        // if the user didn't define "localPatterns", we allow all local images
        return true;
    }
    const url = new URL(urlPathAndQuery, 'http://n');
    return localPatterns.some((p)=>matchLocalPattern(p, url));
} //# sourceMappingURL=match-local-pattern.js.map
}}),
"[project]/node_modules/next/dist/shared/lib/match-remote-pattern.js [app-ssr] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
0 && (module.exports = {
    hasRemoteMatch: null,
    matchRemotePattern: null
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    hasRemoteMatch: function() {
        return hasRemoteMatch;
    },
    matchRemotePattern: function() {
        return matchRemotePattern;
    }
});
const _picomatch = __turbopack_context__.r("[project]/node_modules/next/dist/compiled/picomatch/index.js [app-ssr] (ecmascript)");
function matchRemotePattern(pattern, url) {
    if (pattern.protocol !== undefined) {
        if (pattern.protocol.replace(/:$/, '') !== url.protocol.replace(/:$/, '')) {
            return false;
        }
    }
    if (pattern.port !== undefined) {
        if (pattern.port !== url.port) {
            return false;
        }
    }
    if (pattern.hostname === undefined) {
        throw Object.defineProperty(new Error("Pattern should define hostname but found\n" + JSON.stringify(pattern)), "__NEXT_ERROR_CODE", {
            value: "E410",
            enumerable: false,
            configurable: true
        });
    } else {
        if (!(0, _picomatch.makeRe)(pattern.hostname).test(url.hostname)) {
            return false;
        }
    }
    if (pattern.search !== undefined) {
        if (pattern.search !== url.search) {
            return false;
        }
    }
    var _pattern_pathname;
    // Should be the same as writeImagesManifest()
    if (!(0, _picomatch.makeRe)((_pattern_pathname = pattern.pathname) != null ? _pattern_pathname : '**', {
        dot: true
    }).test(url.pathname)) {
        return false;
    }
    return true;
}
function hasRemoteMatch(domains, remotePatterns, url) {
    return domains.some((domain)=>url.hostname === domain) || remotePatterns.some((p)=>matchRemotePattern(p, url));
} //# sourceMappingURL=match-remote-pattern.js.map
}}),
"[project]/node_modules/next/dist/shared/lib/image-loader.js [app-ssr] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return _default;
    }
});
const DEFAULT_Q = 75;
function defaultLoader(param) {
    let { config, src, width, quality } = param;
    var _config_qualities;
    if ("TURBOPACK compile-time truthy", 1) {
        const missingValues = [];
        // these should always be provided but make sure they are
        if (!src) missingValues.push('src');
        if (!width) missingValues.push('width');
        if (missingValues.length > 0) {
            throw Object.defineProperty(new Error("Next Image Optimization requires " + missingValues.join(', ') + " to be provided. Make sure you pass them as props to the `next/image` component. Received: " + JSON.stringify({
                src,
                width,
                quality
            })), "__NEXT_ERROR_CODE", {
                value: "E188",
                enumerable: false,
                configurable: true
            });
        }
        if (src.startsWith('//')) {
            throw Object.defineProperty(new Error('Failed to parse src "' + src + '" on `next/image`, protocol-relative URL (//) must be changed to an absolute URL (http:// or https://)'), "__NEXT_ERROR_CODE", {
                value: "E360",
                enumerable: false,
                configurable: true
            });
        }
        if (src.startsWith('/') && config.localPatterns) {
            if ("TURBOPACK compile-time truthy", 1) {
                // We use dynamic require because this should only error in development
                const { hasLocalMatch } = __turbopack_context__.r("[project]/node_modules/next/dist/shared/lib/match-local-pattern.js [app-ssr] (ecmascript)");
                if (!hasLocalMatch(config.localPatterns, src)) {
                    throw Object.defineProperty(new Error("Invalid src prop (" + src + ") on `next/image` does not match `images.localPatterns` configured in your `next.config.js`\n" + "See more info: https://nextjs.org/docs/messages/next-image-unconfigured-localpatterns"), "__NEXT_ERROR_CODE", {
                        value: "E426",
                        enumerable: false,
                        configurable: true
                    });
                }
            }
        }
        if (!src.startsWith('/') && (config.domains || config.remotePatterns)) {
            let parsedSrc;
            try {
                parsedSrc = new URL(src);
            } catch (err) {
                console.error(err);
                throw Object.defineProperty(new Error('Failed to parse src "' + src + '" on `next/image`, if using relative image it must start with a leading slash "/" or be an absolute URL (http:// or https://)'), "__NEXT_ERROR_CODE", {
                    value: "E63",
                    enumerable: false,
                    configurable: true
                });
            }
            if ("TURBOPACK compile-time truthy", 1) {
                // We use dynamic require because this should only error in development
                const { hasRemoteMatch } = __turbopack_context__.r("[project]/node_modules/next/dist/shared/lib/match-remote-pattern.js [app-ssr] (ecmascript)");
                if (!hasRemoteMatch(config.domains, config.remotePatterns, parsedSrc)) {
                    throw Object.defineProperty(new Error("Invalid src prop (" + src + ') on `next/image`, hostname "' + parsedSrc.hostname + '" is not configured under images in your `next.config.js`\n' + "See more info: https://nextjs.org/docs/messages/next-image-unconfigured-host"), "__NEXT_ERROR_CODE", {
                        value: "E231",
                        enumerable: false,
                        configurable: true
                    });
                }
            }
        }
        if (quality && config.qualities && !config.qualities.includes(quality)) {
            throw Object.defineProperty(new Error("Invalid quality prop (" + quality + ") on `next/image` does not match `images.qualities` configured in your `next.config.js`\n" + "See more info: https://nextjs.org/docs/messages/next-image-unconfigured-qualities"), "__NEXT_ERROR_CODE", {
                value: "E623",
                enumerable: false,
                configurable: true
            });
        }
    }
    const q = quality || ((_config_qualities = config.qualities) == null ? void 0 : _config_qualities.reduce((prev, cur)=>Math.abs(cur - DEFAULT_Q) < Math.abs(prev - DEFAULT_Q) ? cur : prev)) || DEFAULT_Q;
    return config.path + "?url=" + encodeURIComponent(src) + "&w=" + width + "&q=" + q + (src.startsWith('/_next/static/media/') && ("TURBOPACK compile-time value", false) ? ("TURBOPACK unreachable", undefined) : '');
}
// We use this to determine if the import is the default loader
// or a custom loader defined by the user in next.config.js
defaultLoader.__next_img_default = true;
const _default = defaultLoader; //# sourceMappingURL=image-loader.js.map
}}),
"[project]/node_modules/next/dist/client/image-component.js [app-ssr] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
'use client';
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "Image", {
    enumerable: true,
    get: function() {
        return Image;
    }
});
const _interop_require_default = __turbopack_context__.r("[project]/node_modules/@swc/helpers/cjs/_interop_require_default.cjs [app-ssr] (ecmascript)");
const _interop_require_wildcard = __turbopack_context__.r("[project]/node_modules/@swc/helpers/cjs/_interop_require_wildcard.cjs [app-ssr] (ecmascript)");
const _jsxruntime = __turbopack_context__.r("[project]/node_modules/next/dist/server/route-modules/app-page/vendored/ssr/react-jsx-runtime.js [app-ssr] (ecmascript)");
const _react = /*#__PURE__*/ _interop_require_wildcard._(__turbopack_context__.r("[project]/node_modules/next/dist/server/route-modules/app-page/vendored/ssr/react.js [app-ssr] (ecmascript)"));
const _reactdom = /*#__PURE__*/ _interop_require_default._(__turbopack_context__.r("[project]/node_modules/next/dist/server/route-modules/app-page/vendored/ssr/react-dom.js [app-ssr] (ecmascript)"));
const _head = /*#__PURE__*/ _interop_require_default._(__turbopack_context__.r("[project]/node_modules/next/dist/shared/lib/head.js [app-ssr] (ecmascript)"));
const _getimgprops = __turbopack_context__.r("[project]/node_modules/next/dist/shared/lib/get-img-props.js [app-ssr] (ecmascript)");
const _imageconfig = __turbopack_context__.r("[project]/node_modules/next/dist/shared/lib/image-config.js [app-ssr] (ecmascript)");
const _imageconfigcontextsharedruntime = __turbopack_context__.r("[project]/node_modules/next/dist/server/route-modules/app-page/vendored/contexts/image-config-context.js [app-ssr] (ecmascript)");
const _warnonce = __turbopack_context__.r("[project]/node_modules/next/dist/shared/lib/utils/warn-once.js [app-ssr] (ecmascript)");
const _routercontextsharedruntime = __turbopack_context__.r("[project]/node_modules/next/dist/server/route-modules/app-page/vendored/contexts/router-context.js [app-ssr] (ecmascript)");
const _imageloader = /*#__PURE__*/ _interop_require_default._(__turbopack_context__.r("[project]/node_modules/next/dist/shared/lib/image-loader.js [app-ssr] (ecmascript)"));
const _usemergedref = __turbopack_context__.r("[project]/node_modules/next/dist/client/use-merged-ref.js [app-ssr] (ecmascript)");
// This is replaced by webpack define plugin
const configEnv = ("TURBOPACK compile-time value", JSON.parse('{"deviceSizes":[640,750,828,1080,1200,1920,2048,3840],"imageSizes":[16,32,48,64,96,128,256,384],"path":"/_next/image","loader":"default","dangerouslyAllowSVG":false,"unoptimized":false,"domains":[],"remotePatterns":[]}'));
if (typeof window === 'undefined') {
    ;
    globalThis.__NEXT_IMAGE_IMPORTED = true;
}
// See https://stackoverflow.com/q/39777833/266535 for why we use this ref
// handler instead of the img's onLoad attribute.
function handleLoading(img, placeholder, onLoadRef, onLoadingCompleteRef, setBlurComplete, unoptimized, sizesInput) {
    const src = img == null ? void 0 : img.src;
    if (!img || img['data-loaded-src'] === src) {
        return;
    }
    img['data-loaded-src'] = src;
    const p = 'decode' in img ? img.decode() : Promise.resolve();
    p.catch(()=>{}).then(()=>{
        if (!img.parentElement || !img.isConnected) {
            // Exit early in case of race condition:
            // - onload() is called
            // - decode() is called but incomplete
            // - unmount is called
            // - decode() completes
            return;
        }
        if (placeholder !== 'empty') {
            setBlurComplete(true);
        }
        if (onLoadRef == null ? void 0 : onLoadRef.current) {
            // Since we don't have the SyntheticEvent here,
            // we must create one with the same shape.
            // See https://reactjs.org/docs/events.html
            const event = new Event('load');
            Object.defineProperty(event, 'target', {
                writable: false,
                value: img
            });
            let prevented = false;
            let stopped = false;
            onLoadRef.current({
                ...event,
                nativeEvent: event,
                currentTarget: img,
                target: img,
                isDefaultPrevented: ()=>prevented,
                isPropagationStopped: ()=>stopped,
                persist: ()=>{},
                preventDefault: ()=>{
                    prevented = true;
                    event.preventDefault();
                },
                stopPropagation: ()=>{
                    stopped = true;
                    event.stopPropagation();
                }
            });
        }
        if (onLoadingCompleteRef == null ? void 0 : onLoadingCompleteRef.current) {
            onLoadingCompleteRef.current(img);
        }
        if ("TURBOPACK compile-time truthy", 1) {
            const origSrc = new URL(src, 'http://n').searchParams.get('url') || src;
            if (img.getAttribute('data-nimg') === 'fill') {
                if (!unoptimized && (!sizesInput || sizesInput === '100vw')) {
                    let widthViewportRatio = img.getBoundingClientRect().width / window.innerWidth;
                    if (widthViewportRatio < 0.6) {
                        if (sizesInput === '100vw') {
                            (0, _warnonce.warnOnce)('Image with src "' + origSrc + '" has "fill" prop and "sizes" prop of "100vw", but image is not rendered at full viewport width. Please adjust "sizes" to improve page performance. Read more: https://nextjs.org/docs/api-reference/next/image#sizes');
                        } else {
                            (0, _warnonce.warnOnce)('Image with src "' + origSrc + '" has "fill" but is missing "sizes" prop. Please add it to improve page performance. Read more: https://nextjs.org/docs/api-reference/next/image#sizes');
                        }
                    }
                }
                if (img.parentElement) {
                    const { position } = window.getComputedStyle(img.parentElement);
                    const valid = [
                        'absolute',
                        'fixed',
                        'relative'
                    ];
                    if (!valid.includes(position)) {
                        (0, _warnonce.warnOnce)('Image with src "' + origSrc + '" has "fill" and parent element with invalid "position". Provided "' + position + '" should be one of ' + valid.map(String).join(',') + ".");
                    }
                }
                if (img.height === 0) {
                    (0, _warnonce.warnOnce)('Image with src "' + origSrc + '" has "fill" and a height value of 0. This is likely because the parent element of the image has not been styled to have a set height.');
                }
            }
            const heightModified = img.height.toString() !== img.getAttribute('height');
            const widthModified = img.width.toString() !== img.getAttribute('width');
            if (heightModified && !widthModified || !heightModified && widthModified) {
                (0, _warnonce.warnOnce)('Image with src "' + origSrc + '" has either width or height modified, but not the other. If you use CSS to change the size of your image, also include the styles \'width: "auto"\' or \'height: "auto"\' to maintain the aspect ratio.');
            }
        }
    });
}
function getDynamicProps(fetchPriority) {
    if (Boolean(_react.use)) {
        // In React 19.0.0 or newer, we must use camelCase
        // prop to avoid "Warning: Invalid DOM property".
        // See https://github.com/facebook/react/pull/25927
        return {
            fetchPriority
        };
    }
    // In React 18.2.0 or older, we must use lowercase prop
    // to avoid "Warning: Invalid DOM property".
    return {
        fetchpriority: fetchPriority
    };
}
const ImageElement = /*#__PURE__*/ (0, _react.forwardRef)((param, forwardedRef)=>{
    let { src, srcSet, sizes, height, width, decoding, className, style, fetchPriority, placeholder, loading, unoptimized, fill, onLoadRef, onLoadingCompleteRef, setBlurComplete, setShowAltText, sizesInput, onLoad, onError, ...rest } = param;
    const ownRef = (0, _react.useCallback)((img)=>{
        if (!img) {
            return;
        }
        if (onError) {
            // If the image has an error before react hydrates, then the error is lost.
            // The workaround is to wait until the image is mounted which is after hydration,
            // then we set the src again to trigger the error handler (if there was an error).
            // eslint-disable-next-line no-self-assign
            img.src = img.src;
        }
        if ("TURBOPACK compile-time truthy", 1) {
            if (!src) {
                console.error('Image is missing required "src" property:', img);
            }
            if (img.getAttribute('alt') === null) {
                console.error('Image is missing required "alt" property. Please add Alternative Text to describe the image for screen readers and search engines.');
            }
        }
        if (img.complete) {
            handleLoading(img, placeholder, onLoadRef, onLoadingCompleteRef, setBlurComplete, unoptimized, sizesInput);
        }
    }, [
        src,
        placeholder,
        onLoadRef,
        onLoadingCompleteRef,
        setBlurComplete,
        onError,
        unoptimized,
        sizesInput
    ]);
    const ref = (0, _usemergedref.useMergedRef)(forwardedRef, ownRef);
    return /*#__PURE__*/ (0, _jsxruntime.jsx)("img", {
        ...rest,
        ...getDynamicProps(fetchPriority),
        // It's intended to keep `loading` before `src` because React updates
        // props in order which causes Safari/Firefox to not lazy load properly.
        // See https://github.com/facebook/react/issues/25883
        loading: loading,
        width: width,
        height: height,
        decoding: decoding,
        "data-nimg": fill ? 'fill' : '1',
        className: className,
        style: style,
        // It's intended to keep `src` the last attribute because React updates
        // attributes in order. If we keep `src` the first one, Safari will
        // immediately start to fetch `src`, before `sizes` and `srcSet` are even
        // updated by React. That causes multiple unnecessary requests if `srcSet`
        // and `sizes` are defined.
        // This bug cannot be reproduced in Chrome or Firefox.
        sizes: sizes,
        srcSet: srcSet,
        src: src,
        ref: ref,
        onLoad: (event)=>{
            const img = event.currentTarget;
            handleLoading(img, placeholder, onLoadRef, onLoadingCompleteRef, setBlurComplete, unoptimized, sizesInput);
        },
        onError: (event)=>{
            // if the real image fails to load, this will ensure "alt" is visible
            setShowAltText(true);
            if (placeholder !== 'empty') {
                // If the real image fails to load, this will still remove the placeholder.
                setBlurComplete(true);
            }
            if (onError) {
                onError(event);
            }
        }
    });
});
function ImagePreload(param) {
    let { isAppRouter, imgAttributes } = param;
    const opts = {
        as: 'image',
        imageSrcSet: imgAttributes.srcSet,
        imageSizes: imgAttributes.sizes,
        crossOrigin: imgAttributes.crossOrigin,
        referrerPolicy: imgAttributes.referrerPolicy,
        ...getDynamicProps(imgAttributes.fetchPriority)
    };
    if (isAppRouter && _reactdom.default.preload) {
        // See https://github.com/facebook/react/pull/26940
        _reactdom.default.preload(imgAttributes.src, opts);
        return null;
    }
    return /*#__PURE__*/ (0, _jsxruntime.jsx)(_head.default, {
        children: /*#__PURE__*/ (0, _jsxruntime.jsx)("link", {
            rel: "preload",
            // Note how we omit the `href` attribute, as it would only be relevant
            // for browsers that do not support `imagesrcset`, and in those cases
            // it would cause the incorrect image to be preloaded.
            //
            // https://html.spec.whatwg.org/multipage/semantics.html#attr-link-imagesrcset
            href: imgAttributes.srcSet ? undefined : imgAttributes.src,
            ...opts
        }, '__nimg-' + imgAttributes.src + imgAttributes.srcSet + imgAttributes.sizes)
    });
}
const Image = /*#__PURE__*/ (0, _react.forwardRef)((props, forwardedRef)=>{
    const pagesRouter = (0, _react.useContext)(_routercontextsharedruntime.RouterContext);
    // We're in the app directory if there is no pages router.
    const isAppRouter = !pagesRouter;
    const configContext = (0, _react.useContext)(_imageconfigcontextsharedruntime.ImageConfigContext);
    const config = (0, _react.useMemo)(()=>{
        var _c_qualities;
        const c = configEnv || configContext || _imageconfig.imageConfigDefault;
        const allSizes = [
            ...c.deviceSizes,
            ...c.imageSizes
        ].sort((a, b)=>a - b);
        const deviceSizes = c.deviceSizes.sort((a, b)=>a - b);
        const qualities = (_c_qualities = c.qualities) == null ? void 0 : _c_qualities.sort((a, b)=>a - b);
        return {
            ...c,
            allSizes,
            deviceSizes,
            qualities
        };
    }, [
        configContext
    ]);
    const { onLoad, onLoadingComplete } = props;
    const onLoadRef = (0, _react.useRef)(onLoad);
    (0, _react.useEffect)(()=>{
        onLoadRef.current = onLoad;
    }, [
        onLoad
    ]);
    const onLoadingCompleteRef = (0, _react.useRef)(onLoadingComplete);
    (0, _react.useEffect)(()=>{
        onLoadingCompleteRef.current = onLoadingComplete;
    }, [
        onLoadingComplete
    ]);
    const [blurComplete, setBlurComplete] = (0, _react.useState)(false);
    const [showAltText, setShowAltText] = (0, _react.useState)(false);
    const { props: imgAttributes, meta: imgMeta } = (0, _getimgprops.getImgProps)(props, {
        defaultLoader: _imageloader.default,
        imgConf: config,
        blurComplete,
        showAltText
    });
    return /*#__PURE__*/ (0, _jsxruntime.jsxs)(_jsxruntime.Fragment, {
        children: [
            /*#__PURE__*/ (0, _jsxruntime.jsx)(ImageElement, {
                ...imgAttributes,
                unoptimized: imgMeta.unoptimized,
                placeholder: imgMeta.placeholder,
                fill: imgMeta.fill,
                onLoadRef: onLoadRef,
                onLoadingCompleteRef: onLoadingCompleteRef,
                setBlurComplete: setBlurComplete,
                setShowAltText: setShowAltText,
                sizesInput: props.sizes,
                ref: forwardedRef
            }),
            imgMeta.priority ? /*#__PURE__*/ (0, _jsxruntime.jsx)(ImagePreload, {
                isAppRouter: isAppRouter,
                imgAttributes: imgAttributes
            }) : null
        ]
    });
});
if ((typeof exports.default === 'function' || typeof exports.default === 'object' && exports.default !== null) && typeof exports.default.__esModule === 'undefined') {
    Object.defineProperty(exports.default, '__esModule', {
        value: true
    });
    Object.assign(exports.default, exports);
    module.exports = exports.default;
} //# sourceMappingURL=image-component.js.map
}}),
"[project]/node_modules/next/dist/shared/lib/image-external.js [app-ssr] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
0 && (module.exports = {
    default: null,
    getImageProps: null
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    default: function() {
        return _default;
    },
    getImageProps: function() {
        return getImageProps;
    }
});
const _interop_require_default = __turbopack_context__.r("[project]/node_modules/@swc/helpers/cjs/_interop_require_default.cjs [app-ssr] (ecmascript)");
const _getimgprops = __turbopack_context__.r("[project]/node_modules/next/dist/shared/lib/get-img-props.js [app-ssr] (ecmascript)");
const _imagecomponent = __turbopack_context__.r("[project]/node_modules/next/dist/client/image-component.js [app-ssr] (ecmascript)");
const _imageloader = /*#__PURE__*/ _interop_require_default._(__turbopack_context__.r("[project]/node_modules/next/dist/shared/lib/image-loader.js [app-ssr] (ecmascript)"));
function getImageProps(imgProps) {
    const { props } = (0, _getimgprops.getImgProps)(imgProps, {
        defaultLoader: _imageloader.default,
        // This is replaced by webpack define plugin
        imgConf: ("TURBOPACK compile-time value", JSON.parse('{"deviceSizes":[640,750,828,1080,1200,1920,2048,3840],"imageSizes":[16,32,48,64,96,128,256,384],"path":"/_next/image","loader":"default","dangerouslyAllowSVG":false,"unoptimized":false,"domains":[],"remotePatterns":[]}'))
    });
    // Normally we don't care about undefined props because we pass to JSX,
    // but this exported function could be used by the end user for anything
    // so we delete undefined props to clean it up a little.
    for (const [key, value] of Object.entries(props)){
        if (value === undefined) {
            delete props[key];
        }
    }
    return {
        props
    };
}
const _default = _imagecomponent.Image; //# sourceMappingURL=image-external.js.map
}}),
"[project]/node_modules/next/image.js [app-ssr] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
module.exports = __turbopack_context__.r("[project]/node_modules/next/dist/shared/lib/image-external.js [app-ssr] (ecmascript)");
}}),
"[project]/node_modules/next-sanity/dist/image.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "Image": (()=>Image),
    "imageLoader": (()=>imageLoader)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2d$jsx$2d$runtime$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/next/dist/server/route-modules/app-page/vendored/ssr/react-jsx-runtime.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$image$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/next/image.js [app-ssr] (ecmascript)");
"use client";
;
;
const imageLoader = ({ src, width, quality })=>{
    const url = new URL(src);
    if (url.searchParams.set("auto", "format"), url.searchParams.has("fit") || url.searchParams.set("fit", url.searchParams.has("h") ? "min" : "max"), url.searchParams.has("h") && url.searchParams.has("w")) {
        const originalHeight = parseInt(url.searchParams.get("h"), 10), originalWidth = parseInt(url.searchParams.get("w"), 10);
        url.searchParams.set("h", Math.round(originalHeight / originalWidth * width).toString());
    }
    return url.searchParams.set("w", width.toString()), quality && url.searchParams.set("q", quality.toString()), url.href;
};
function Image(props) {
    const { loader, src, ...rest } = props;
    if (loader) throw new TypeError("The `loader` prop is not supported on `Image` components. Use `next/image` directly to use a custom loader.");
    let srcUrl;
    try {
        srcUrl = new URL(src), props.height && srcUrl.searchParams.set("h", `${props.height}`), props.width && srcUrl.searchParams.set("w", `${props.width}`);
    } catch (err) {
        throw new TypeError("The `src` prop must be a valid URL to an image on the Sanity Image CDN.", {
            cause: err
        });
    }
    return /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2d$jsx$2d$runtime$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["jsx"])(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$image$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"], {
        ...rest,
        src: srcUrl.toString(),
        loader: imageLoader
    });
}
;
 //# sourceMappingURL=image.js.map
}}),

};

//# sourceMappingURL=node_modules_839f0585._.js.map